<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vector Calculus</title>
      <link href="/2024/08/01/vectorcalculus/"/>
      <url>/2024/08/01/vectorcalculus/</url>
      
        <content type="html"><![CDATA[<h1 id="Vector-Calculus"><a href="#Vector-Calculus" class="headerlink" title="Vector Calculus"></a>Vector Calculus</h1><ul><li><p>A function $f$​ is a quantity that relates two quantities to each other. These quantities are typically inputs $x ∈ \mathbb R^D$ and targets (function values) $f(x)$, which we assume are real-valued if not stated otherwise. Here $\mathbb R^D$ is the domain of $f$ and the function values $f(x)$ are the <em>image/codomain</em> of $f$.</p></li><li><p>We often write</p><script type="math/tex; mode=display">f\;:\;\mathbb R^D \rightarrow \mathbb R\\x \mapsto f(x)</script><p>to specify a function, where specifies that $f$ is a mapping from $\mathbb R^D$ to $R$ and  the explicit assignment of an input $x$ to a function value $f(x)$. A function $f$ assigns every input $x $exactly one function value $f(x)$.</p><blockquote><p>e.g. the dot product as a special case of an inner product</p><p>the function $f(x) = x^⊤x, x ∈ \mathbb R^2$, would bespecified as</p><script type="math/tex; mode=display">f\;:\;\mathbb R^2 \rightarrow \mathbb R\\x \mapsto x_1^2 + x_2^2</script></blockquote></li></ul><h2 id="Differentiation-of-Univariate-Functions"><a href="#Differentiation-of-Univariate-Functions" class="headerlink" title="Differentiation of Univariate Functions"></a>Differentiation of Univariate Functions</h2><ul><li><p><strong>Difference Quotient</strong>: The <em>difference quotient</em></p><script type="math/tex; mode=display">\frac{\delta_y}{\delta_x}=\frac{f(x+\delta_x)-f(x)}{\delta_x}</script><p>computes the slope of the secant line through two points on the graph of $f$<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011901845.png" alt="Difference Quotient"></p></li><li><p><strong>Derivative</strong>: More formally, for $h &gt; 0$ the derivative of $f$ at $x$ is defined as the limit</p><script type="math/tex; mode=display">\frac{df}{dx}:=\underset{x\rightarrow 0}{\lim}\frac{f(x+h)-f(x)}{h}</script><p>and the secant in Figure becomes a tangent. The derivative of $f$ points in the direction of steepest ascent of $f$.</p></li><li><p><strong>Taylor Polynomial</strong>: The <em>Taylor polynomial</em> of degree $n$ of $f : \mathbb R → \mathbb R$ at $x_0$ is defined as</p><script type="math/tex; mode=display">T_n(x):=\sum_{k=0}^n{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>where $f^{(k)}(x_0)$ is the $k$th derivative of $f$ at $x_0$ (which we assume exists) and $\frac{f^{(k)}(x_0)}{k!}$ are the coefficients of the polynomial.</p></li><li><p><strong>Taylor Series</strong>: For a smooth function $f ∈ C^∞, f : \mathbb R → \mathbb R$, the <em>Taylor series</em> of $f$ at $x_0$ is defined as</p><script type="math/tex; mode=display">T_\infty(x)=\sum_{x=0}^\infty{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}</script><p>For $x_0 = 0$, we obtain the <em>Maclaurin series</em> as a special instance of the Taylor series. If $f(x) = T_∞(x)$, then $f$ is called <em>analytic</em>.</p></li><li><p>In general, a Taylor polynomial of degree $n$ is an approximation of a function, which does not need to be a polynomial. The Taylor poly-nomial is similar to $f$ in a neighborhood around $x_0$. However, a Taylor polynomial of degree $n$ is an exact representation of a polynomial $f$ of degree $k ⩽ n$ since all derivatives $f(i), i &gt; k$ vanish.</p></li></ul><blockquote><p>e.g. Taylor Polynomial</p><p>We consider the polynomial $f(x)=x^4$, and seek the Taylor polynomial $T_6$, evaluated at $x_0 = 1$. We start by computing the coefficients $f^{(k)}(1)$ for $k = 0, . . . , 6$:</p><script type="math/tex; mode=display">\begin{split}f(1) &= 1 \\f^{′}(1) &= 4 \\f^{′′}(1) &= 12 \\f^{(3)}(1) &= 24 \\f^{(4)}(1) &= 24 \\f^{(5)}(1) &= 0 \\f^{(6)}(1) &= 0 \\\end{split}</script><p>Therefore, the desired Taylor polynomial is</p><script type="math/tex; mode=display">\begin{split}T_6(x)&=\sum_{k=0}^6{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}\\1+4(x-1)+6(x-1)^2+4(x-1)^3+(x-1)^4+0\end{split}</script><p>Multiplying out and re-arranging yields</p><script type="math/tex; mode=display">\begin{split}T_6(x) &= (1 − 4 + 6 − 4 + 1) + x(4 − 12 + 12 − 4)\\&+ x^2(6 − 12 + 6) + x^3(4 − 4) + x^4\\&=x^4=f(x)\end{split}</script><p>e.g. Taylor Series</p><script type="math/tex; mode=display">f(x) = sin(x) + cos(x) ∈ C^∞</script><p>We seek a Taylor series expansion of f at $x_0 = 0$, which is the Maclaurin series expansion of $f$. We obtain the following derivatives</p><script type="math/tex; mode=display">\begin{split}f(0) &= \sin(0)+\cos(0)=1 \\f^{′}(0) &= \cos(0)-\sin(0)=1 \\f^{′′}(0) &= -\sin(0)-\cos(0)=-1 \\f^{(3)}(0) &= -\cos(0)+\sin(0)=-1 \\f^{(4)}(0) &= \sin(0)+\cos(0)=f(0)=1 \\\vdots\end{split}</script><p>The coefficients in our Taylor series are only $±1$ (since $sin(0) = 0$), each of which occurs twice before switching to the other one. Furthermore, $f^{(k+4)}(0) = f^{(k)}(0)$.</p><p>Therefore, the full Taylor series expansion of f at $x_0 = 0$ is given by</p><script type="math/tex; mode=display">\begin{split}T_\infty(x)&=\sum_{x=0}^\infty{\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k}\\&=1+x-\frac{1}{2!}x^2-\frac{1}{3!}x^3+\frac{1}{4!}x^4+\frac{1}{5!}x^5-\cdots\\&={\color{orange} {1-\frac{1}{2!}x^2+\frac{1}{4!}x^4\mp\cdots} }+{\color{blue} {x-\frac{1}{3!}x^3+\frac{1}{5!}x^5\mp\cdots} }\\&={\color{orange} {\sum_{k=0}^\infty{(-1)^k\frac{1}{(2k)!}x^{2k}}}}+{\color{blue} {\sum_{k=0}^\infty{(-1)^k\frac{1}{(2k+1)!}x^{2k+1}}}}\\&={\color{orange} {\cos(x)}}+{\color{blue} {\sin(x)}}\end{split}</script><p>where we used the power series representations</p><script type="math/tex; mode=display">\begin{split}\cos(x)&=\sum_{k=0}^\infty{(-1)^k\frac{1}{(2k)!}x^{2k}}\\\sin(x)&=\sum_{k=0}^\infty{(-1)^k\frac{1}{(2k+1)!}x^{2k+1}}\end{split}</script></blockquote><ul><li><p>A Taylor series is a special case of a power series</p><script type="math/tex; mode=display">f(x)=\sum_{k=0}^\infty{a_k(x-c)^k}</script><p>where $a_k$ are coefficients and $c$ is a constant.</p></li><li><p>In the following, we briefly state basic differentiation rules, where we denote the derivative of $f$ by $f^′$.</p><ul><li><strong>Product rule</strong>: ${(f(x)g(x))}^{′}=f^{′}(x)g(x)+f(x)g^{′}(x)$</li><li><strong>Quotient rule</strong>: ${\left(\frac{f(x)}{g(x)}\right)}^{′}=\frac{f^{′}(x)g(x)-f(x)g^{′}(x)}{g(x)^2}$</li><li><strong>Sum rule</strong>: ${(f(x)+g(x))}^{′}=f^{′}(x)+g^{′}(x)$</li><li><strong>Chain rule</strong>: $\left(g(f(x))\right)^′= (g◦f)^′(x) = g^′(f(x))f^′(x)$</li></ul></li></ul><h2 id="Partial-Differentiation-and-Gradients"><a href="#Partial-Differentiation-and-Gradients" class="headerlink" title="Partial Differentiation and Gradients"></a>Partial Differentiation and Gradients</h2><ul><li><p>We consider the general case where the function $f$ depends on one or more variables $x ∈ \mathbb R^n$, e.g., $f(x) = f(x_1, x_2)$. The generalization of the derivative to functions of several variables is the <strong><em>gradient</em></strong>.</p></li><li><p>We find the gradient of the function f with respect to $x$ by <em>varying one variable at a time and keeping the others constant</em>. The gradient is then the collection of these <em>partial derivatives</em>.</p></li><li><p><strong>Partial Derivative</strong>: For a function $f : \mathbb R^n → \mathbb R, x \mapsto f(x), x ∈ \mathbb R^n$ of $n$ variables $x_1, . . . , x_n$ we define the <em>partial derivatives</em> as</p><script type="math/tex; mode=display">\begin{split}\frac{\partial f}{\partial x_1}&=\underset{h\rightarrow 0}{\lim}\frac{f(x_1+h,x_2,...,x_n)-f(x)}{h}\\\vdots\\\frac{\partial f}{\partial x_n}&=\underset{h\rightarrow 0}{\lim}\frac{f(x_1,,...,x_{n-1},x_n+h)-f(x)}{h}\\\end{split}</script></li></ul><p>and collect them in the row vector</p><script type="math/tex; mode=display">\nabla_xf=grad\,f=\frac{d\,f}{d\,x}=\left[\begin{matrix}\frac{\partial f(x)}{\partial x_1}&\frac{\partial f(x)}{\partial x_2}&\cdots&\frac{\partial f(x)}{\partial x_n},\end{matrix}\right]\in \mathbb R^{1\times n}</script><p>where $n$ is the number of variables and $1$ is the dimension of the image/ range/codomain off. Here, we defined the column vector $x = [x_1, . . . , x_n]^⊤∈ \mathbb R^n$. The row vector is called the <em>gradient of $f$ or the Jacobian</em>.</p><ul><li><p>It is not uncommon in the literature to define the gradient vector as a column vector, following the convention that vectors are generally column vectors. The reason why we define the gradient vector as a row vector is twofold: First, we can consistently generalize the gradient to vector-valued functions $f : \mathbb R^n → \mathbb R^m$ (then the gradient becomes a matrix). Second, we can immediately apply the multi-variate chain rule without paying attention to the dimension of the gradient.</p></li><li><p>Basic Rules of Partial Differentiation</p><ul><li><strong>Product rule</strong>:  $\frac{\partial}{\partial_x}(f(x)g(x))=\frac{\partial f}{\partial x}g(x)+f(x)\frac{\partial g}{\partial x}$</li><li><strong>Sum rule</strong>:  $\frac{\partial}{\partial_x}(f(x)+g(x))=\frac{\partial f}{\partial x}+\frac{\partial g}{\partial x}$</li><li><strong>Chain rule</strong>:  $\frac{\partial}{\partial_x}(g◦f)(x)=\frac{\partial}{\partial x}(g(f(x)))=\frac{\partial g}{\partial f}\frac{\partial f}{\partial x}$</li></ul></li><li><p>Consider a function $f : \mathbb R^2 → \mathbb R$ of two variables $x_1, x_2$. Furthermore, $x_1(t)$ and $x_2(t)$ are themselves functions of $t$. To compute the gradient of $f$ with respect to $t$, we need to apply the chain rule  for multivariate functions as</p><script type="math/tex; mode=display">\frac{d\,f}{d\,t}=\left[\begin{matrix}\frac{\partial f}{\partial x_1}&\frac{\partial f}{\partial x_2}\end{matrix}\right]\left[\begin{matrix}\frac{\partial x_1(t)}{\partial t}\\\frac{\partial x_2(t)}{\partial t}\end{matrix}\right]=\frac{\partial f}{\partial x_1}\frac{\partial x_1}{\partial t}+\frac{\partial f}{\partial x_2}\frac{\partial x_2}{\partial t}</script><p>where $d$ denotes the gradient and $∂$ partial derivatives.</p></li><li><p>If $f(x_1, x_2)$ is a function of $x_1$ and $x_2$, where $x_1(s, t)$ and $x_2(s, t)$ are themselves functions of two variables $s$ and $t$, the chain rule yields the partial derivatives</p><script type="math/tex; mode=display">\frac{\partial f}{\partial s}=\frac{\partial f}{\partial x_1}\frac{\partial x_1}{\partial s}+\frac{\partial f}{\partial x_2}\frac{\partial x_2}{\partial s}\\\frac{\partial f}{\partial t}=\frac{\partial f}{\partial x_1}\frac{\partial x_1}{\partial t}+\frac{\partial f}{\partial x_2}\frac{\partial x_2}{\partial t}\\</script><p>and the gradient is obtained by the matrix multiplication</p><script type="math/tex; mode=display">\frac{d\,f}{d(s,t)}=\frac{\partial f}{\partial x}\frac{\partial x}{\partial (s,t)}=\underset{=\frac{\partial f}{\partial x}}{\underbrace{\left[\begin{matrix}\frac{\partial f}{\partial x_1}&\frac{\partial f}{\partial x_2}\end{matrix}\right]}}\underset{=\frac{\partial x}{\partial (s,t)}}{\underbrace{\left[\begin{matrix}\frac{\partial x_1}{\partial s}&\frac{\partial x_1}{\partial t}\\\frac{\partial x_2}{\partial s}&\frac{\partial x_2}{\partial t}\end{matrix}\right]}}</script></li><li><p>The chain rule can be written as a matrix multiplication. This compact way of writing the chain rule as a matrix multiplication only makes sense if the gradient is defined as a row vector.</p></li><li><p>The definition of the partial derivatives as the limit of the corresponding difference quotient  can be exploited when numerically checking the correctness of gradients in computer programs. When we compute gradients and implement them, we can use finite differences to numerically test our computation and implementation.</p></li></ul><h2 id="Gradients-of-Vector-Valued-Functions"><a href="#Gradients-of-Vector-Valued-Functions" class="headerlink" title="Gradients of Vector-Valued Functions"></a>Gradients of Vector-Valued Functions</h2><ul><li><p>For a function $f : \mathbb R^n → \mathbb R^m$ and a vector $x = [x_1, . . . , x_n]^⊤ ∈ \mathbb R^n$, the corresponding vector of function values is given as</p><script type="math/tex; mode=display">f(x)=\left[\begin{matrix}f_1(x)\\\vdots\\f_m(x)\end{matrix}\right]\in \mathbb R^m</script><p>Writing the vector-valued function in this way allows us to view a vector- valued function $f : \mathbb R^n → \mathbb R^m$ as a vector of functions $[f_1, . . . , f_m]^⊤$, $f_i : \mathbb R^n → \mathbb R$ that map onto $\mathbb R$.</p><p>Therefore, the partial derivative of a vector-valued function $f : \mathbb R^n → \mathbb R^m$ with respect to $x_i ∈ \mathbb R, i = 1, . . . n$, is given as the vector</p><script type="math/tex; mode=display">\frac{\partial f}{\partial x_i}=\left[\begin{matrix}\frac{\partial f_1}{\partial x_i}\\\vdots\\\frac{\partial f_m}{\partial x_i}\end{matrix}\right]=\left[\begin{matrix}\underset{h\rightarrow 0}{\lim}\frac{f_1(x_1,...,x_{i-1},x_i+h,...,x_n)-f_1(x)}{h}\\\vdots\\\underset{h\rightarrow 0}{\lim}\frac{f_m(x_1,...,x_{i-1},x_i+h,...,x_n)-f_m(x)}{h}\end{matrix}\right]\in \mathbb R^m</script><p>every partial derivative $∂f/∂x_i$ is itself a column vector. Therefore, we obtain the gradient of $f : \mathbb R^n → \mathbb R^m$ with respect to $x ∈ \mathbb R^n$ by collecting these partial derivatives:</p><script type="math/tex; mode=display">\begin{split}\frac{d\,f(x)}{d\, x}&=\left[\begin{matrix}\frac{\partial f(x))}{\partial x_1}&\cdots&\frac{\partial f(x)}{\partial x_n}\end{matrix}\right]\\&=\left[\begin{matrix}\frac{\partial f_1(x))}{\partial x_1}&\cdots&\frac{\partial f_1(x)}{\partial x_n}\\\vdots&&\vdots\\\frac{\partial f_m(x))}{\partial x_1}&\cdots&\frac{\partial f_m(x)}{\partial x_n}\end{matrix}\right]\in \mathbb R^{m\times n}\end{split}</script></li><li><p><strong>Jacobian</strong>:  The collection of all first-order partial derivatives of a vector-valued function $f : \mathbb R^n → \mathbb R^m$ is called the <strong><em>Jacobian</em></strong>. The Jacobian $J$ is an $m× n$ matrix, which we define and arrange as follows:</p><script type="math/tex; mode=display">\begin{split}J&=\nabla_xf=\frac{d\,f}{d\,x}=\left[\begin{matrix}\frac{\partial f(x)}{\partial x_1}&\cdots&\frac{\partial f(x)}{\partial x_n}\end{matrix}\right]\\&=\left[\begin{matrix}\frac{\partial f_1(x))}{\partial x_1}&\cdots&\frac{\partial f_1(x)}{\partial x_n}\\\vdots&&\vdots\\\frac{\partial f_m(x))}{\partial x_1}&\cdots&\frac{\partial f_m(x)}{\partial x_n}\end{matrix}\right],\\x&=\left[\begin{matrix}x_1\\\vdots\\x_n\end{matrix}\right],J(i,j)=\frac{\partial f_i}{\partial x_i}\end{split}</script><p>As a special case of above equation, a function $f : \mathbb R^n → \mathbb R^1$, which maps a vector x ∈ Rn onto a scalar (e.g.,$ f(x) =\sum_{i=1}^{n}{x_i}$), possesses a Jacobian that is a row vector (matrix of dimension $1 × n$).</p></li><li><p>We use the <em>numerator layout</em> of the derivative, i.e., the derivative $df/dx$ of $f ∈ \mathbb R^m$ with respect to $x ∈ \mathbb R^n$ is an $m ×n$ matrix, where the elements of $f$ define the rows and the elements of $x$ define the columns of the corresponding Jacobian. There exists also the <em>denominator layou</em>t, which is the transpose of the numerator layout.</p></li><li><p>Figure summarizes the dimensions of those derivatives. If $f : \mathbb R → \mathbb R$ the gradient is simply a scalar (top-left entry). For $f : \mathbb R^D → \mathbb R$ the gradient is a $1 × D$ row vector (top-right entry). For $f : \mathbb R → \mathbb R^E$, the gradient is an $E × 1$ column vector, and for $f : \mathbb R^D → \mathbb R^E$ the gradient is an $E ×D$ matrix.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011942507.png" alt="Dimensionality of (partial) derivatives"></p></li></ul><blockquote><p>e.g. </p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011942571.png" alt="Gradient of a Vector-Valued Function"></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011942069.png" alt="Chain Rule"></p><p><strong>Gradient of a Least-Squares Loss in a Linear Model</strong><br>Let us consider the linear model</p><script type="math/tex; mode=display">y = \varPhi\theta</script><p>where $\theta\in\mathbb R^D$ is a parameter vector, $Φ ∈ \mathbb R^{N×D}$ are input features and $y ∈ \mathbb R^N$ are the corresponding observations. We define the functions</p><script type="math/tex; mode=display">L(e):=\left\|e\right\|^2\\e(\theta):=y-\varPhi\theta</script><p>We seek $\frac{∂L}{∂θ}$ , and we will use the chain rule for this purpose. L is called <strong>aleast-squares loss function</strong>.</p><p>Before we start our calculation, we determine the dimensionality of the gradient as</p><script type="math/tex; mode=display">\frac{\partial L}{\partial \theta}\in \mathbb R ^{1\times D}</script><p>The chain rule allows us to compute the gradient as</p><script type="math/tex; mode=display">\frac{\partial L}{\partial \theta}=\frac{\partial L}{\partial e}\frac{\partial e}{\partial \theta}</script><p>where the $d$th element is given by</p><script type="math/tex; mode=display">\frac{\partial L}{\partial \theta}[1,d]=\sum_{n=1}^N{\frac{\partial L}{\partial e}[n]}\frac{\partial e}{\partial \theta}[n,d]</script><p>We know that $∥e∥^2 = e^⊤e$  and determine</p><script type="math/tex; mode=display">\frac{\partial L}{\partial e}=2e^T\in\mathbb R^{1\times N}</script><p>Furthermore, we obtain</p><script type="math/tex; mode=display">\frac{\partial e}{\partial \theta}=-\varPhi\in\mathbb R^{N\times D}</script><p>such that our desired derivative is</p><script type="math/tex; mode=display">\frac{\partial L}{\partial \theta}=-2e^T\varPhi=\underset{1\times N}{\underbrace{-2(y^T-\theta^T\varPhi^T)}}\underset{N\times D}{\underbrace{\varPhi}}\in\mathbb R^{1\times D}</script></blockquote><h2 id="Gradients-of-Matrices"><a href="#Gradients-of-Matrices" class="headerlink" title="Gradients of Matrices"></a>Gradients of Matrices</h2><ul><li><p>We will encounter situations where we need to take gradients of matrices with respect to vectors (or other matrices), which results in a multidimensional tensor. We can think of this tensor as a multidimensional array that collects partial derivatives. For example, if we compute the gradient of an $m× n$ matrix $A$ with respect to a $p × q$ matrix $B$, the resulting Jacobian would be $(m×n)×(p×q)$, i.e., a four-dimensional tensor $J$, whose entries<br>are given as $J_{ijkl} = ∂A_{ij}/∂B_{kl}$.</p></li><li><p>Since matrices represent linear mappings, we can exploit the fact that there is a vector-space isomorphism (linear, invertible mapping) between the space $\mathbb R^{m×n}$ of $m × n$ matrices and the space $\mathbb R^{mn}$ of $mn$ vectors. Therefore, we can re-shape our matrices into vectors of lengths $mn$ and $pq$, respectively. The gradient using these $mn$ vectors results in a Jacobian<br>of size $mn × pq$. Figure visualizes both approaches. In practical applications, it is often desirable to re-shape the matrix into a vector and continue working with this Jacobian matrix: The chain rule boils down to simple matrix multiplication, whereas in the case of a Jacobian tensor, we will need to pay more attention to what dimensions we need to sum out.</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943293.png" alt="Visualization of gradient computation of a matrix with respect to a vector"></p></li></ul><blockquote><p>e.g. <strong>Gradient of Vectors with Respect to Matrices</strong></p><p>Let us consider the following example, where</p><script type="math/tex; mode=display">f = Ax,\;\;f\in\mathbb R^M,\;\;A\in\mathbb R^{M\times N},\;\;x\in\mathbb R^N</script><p>and where we seek the gradient $df/dA$. Let us start again by determining the dimension of the gradient as</p><script type="math/tex; mode=display">\frac{d\,f}{d\,A}\in\mathbb R^{M\times(M\times N)}</script><p>By definition, the gradient is the collection of the partial derivatives:</p><script type="math/tex; mode=display">\frac{d\,f}{d\,A}=\left[\begin{matrix}\frac{\partial f_1}{\partial A}\\\vdots\\\frac{\partial f_M}{\partial A}\end{matrix}\right],\;\;\frac{\partial f_i}{\partial A}\in\mathbb R^{1\times(M\times N)}</script><p>To compute the partial derivatives, it will be helpful to explicitly write out the matrix vector multiplication:</p><script type="math/tex; mode=display">f_i=\sum_{j=1}^N{A_{ij}x_j},i=1,...,M</script><p>and the partial derivatives are then given as</p><script type="math/tex; mode=display">\frac{\partial f_i}{\partial A_{iq}}=x_q</script><p>This allows us to compute the partial derivatives of $f_i$ with respect to a row of $A$, which is given as</p><script type="math/tex; mode=display">\frac{\partial f_i}{\partial A_{i,:}}=x^T\in\mathbb R^{1\times1\times N}\\\frac{\partial f_i}{\partial A_{k\ne i,:}}=0^T\in\mathbb R^{1\times1\times N}\\</script><p>where we have to pay attention to the correct dimensionality. Since $f_i$ maps onto $\mathbb R$ and each row of $A$ is of size $1×N$, we obtain a $1 × 1 ×N$-sized tensor as the partial derivative of $f_i$ with respect to a row of $A$.</p><p>We stack the partial derivatives and get the desired gradientin via</p><script type="math/tex; mode=display">\frac{\partial f_i}{\partial A}=\left[\begin{matrix}0^T\\\vdots\\0^T\\x^T\\0^T\\\vdots\\0^T\end{matrix}\right]\in \mathbb R^{1\times(M\times N)}</script><p>e.g. <strong>Gradient of Matrices with Respect to Matrices</strong></p><p>Consider a matrix $R ∈\mathbb R^{M×N}$ and $f :\mathbb R^{M×N} →\mathbb R^{N×N}$ with</p><script type="math/tex; mode=display">f(R)=R^TR=:K\in\mathbb R^{N\times N}</script><p>where we seek the gradient $dK/dR$.</p><p>To solve this hard problem, let us first write down what we already know: The gradient has the dimensions</p><script type="math/tex; mode=display">\frac{d\,K}{d\,R}\in\mathbb R^{(N\times N)\times(M\times N)}</script><p>which is a tensor. Moreover,</p><script type="math/tex; mode=display">\frac{d\,K_{pq}}{d\,R}\in\mathbb R^{1\times(M\times N)}</script><p>for $p, q = 1, . . . ,N$, where $K_{pq}$ is the $(p, q)$th entry of $K = f(R)$. Denoting the $i$th column of $R$ by $r_i$, every entry of $K$ is given by the dot product of two columns of $R$, i.e.,</p><script type="math/tex; mode=display">K_{pq}=r_p^Tr_q=\sum_{m=1}^M{R_{mp}R_{mq}}</script><p>When we now compute the partial derivative $\frac{∂K_{pq}}{∂R_{ij}}$ we obtain</p><script type="math/tex; mode=display">\frac{\partial K_{pq}}{\partial R_{ij}}=\sum_{m=1}^M{\frac{\partial}{\partial R_{ij}}R_{mp}R_{mq}}=\partial_{pqij},\\\partial_{pqij}=\begin{cases}R_{iq}\;\;\;\;if\;j=p,p\ne q\\R_{ip}\;\;\;\;if\;j=q,p\ne q\\2R_{iq}\;\;\;\;if\;j=p,p = q\\0\;\;\;\;otherwise\end{cases}</script><p>we know that the desired gradient has the dimension $(N × N) × (M × N)$, and every single entry of this tensor is given by $∂_{pqij}$,where $p, q, j = 1, . . . ,N$ and $i = 1, . . . ,M$.</p></blockquote><h2 id="Useful-Identities-for-Computing-Gradients"><a href="#Useful-Identities-for-Computing-Gradients" class="headerlink" title="Useful Identities for Computing Gradients"></a>Useful Identities for Computing Gradients</h2><ul><li><p>we use $tr(·)$ as the trace , $det(·)$ as the determinant  and $f(X)^{−1}$ as the inverse of $f(X)$, assuming it exists.</p><script type="math/tex; mode=display">\begin{split}&\frac{\partial}{\partial X}f(X)^T=\left(\frac{\partial f(X)}{\partial X}\right)^T\\&\frac{\partial}{\partial X}tr(f(X))=tr\left(\frac{\partial f(X)}{\partial X}\right)\\&\frac{\partial}{\partial X}det(f(X))=det(f(X))\,tr\left(f(X)^{-1}\frac{\partial f(X)}{\partial X}\right)\\&\frac{\partial}{\partial X}f(X)^{-1}=-f(X)^{-1}\frac{\partial f(X)}{\partial X}f(X)^{-1}\\&\frac{\partial a^TX^{-1}b}{\partial X}=-(X^{-1})^Tab^T(X^{-1})^T\\&\frac{\partial x^Ta}{\partial x}=a^T\\&\frac{\partial a^Tx}{\partial x}=a^T\\&\frac{\partial a^TXb}{\partial X}=a^Tb\\&\frac{\partial x^TBx}{\partial x}=x^T(B+B^T)\\&\frac{\partial}{\partial s}(x-As)^TW(x-As)=-2(x-As)^TWA\;\;for\;symmetic\;W\end{split}</script></li><li><p>The trace of a $D×D×E×F$ tensor would be an $E×F$-dimensional matrix.</p></li><li><p>When we “transpose” a tensor, we mean swapping the first two dimensions.</p></li></ul><h2 id="Backpropagation-and-Automatic-Differentiation"><a href="#Backpropagation-and-Automatic-Differentiation" class="headerlink" title="Backpropagation and Automatic Differentiation"></a>Backpropagation and Automatic Differentiation</h2><ul><li><p>Writing out the gradient in the explicit way is often impractical since it often results in a very lengthy expression for a derivative. For training deep neural network models, the backpropagation algorithm is an efficient way to compute the gradient of an error function with respect to the parameters of the model.</p></li><li><p><strong>Gradients in a Deep Network</strong>: An area where the chain rule is used to an extreme is deep learning, where the function value $y$ is computed as a many-level function composition</p><script type="math/tex; mode=display">y=(f_K◦f_{K-1}◦\cdots◦f_1)(x)=f_K(f_{K-1}(\cdots(f_1(x))\cdots))</script><p>where $x$ are the inputs (e.g., images), $y$ are the observations (e.g., class labels), and every function $f_i, i = 1, . . . ,K$, possesses its own parameters.</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943244.png" alt="Forward pass in a multi-layer neural network"></p><p>In neural networks with multiple layers, we have functions $f_i(x_{i−1}) = σ(A_{i−1}x_{i−1} + b_{i−1})$ in the $i$th layer. Here $x_{i−1}$ is the output of layer $i − 1$ and $σ$ an activation function, such as the logistic sigmoid $\frac{1}{1+e^{-x}}$ , $tanh$ or a rectified linear unit (ReLU). In order to train these models, we require the gradient of a loss function $L$ with respect to all model parameters $A_j, b_j$ for $j = 1, . . . ,K$. This also requires us to compute the gradient of $L$ with<br>respect to the inputs of each layer. For example, if we have inputs $x$ and<br>observations $y$ and a network structure defined by</p><script type="math/tex; mode=display">\begin{split}f_0&:=x\\f_i&:=\sigma_i(A_{i-1}f_{i-1}+b_{i-1}),\;\;i=1,...,K\end{split}</script><p>see also Figure  for a visualization, we may be interested in finding $A_j, b_j$ for $j = 0, . . . ,K − 1$, such that the squared loss</p><script type="math/tex; mode=display">L(\theta)=\left\|y-f_K(\theta,x)\right\|^2</script><p>is minimized, where $θ = \{A_0, b_0, . . . ,A_{K−1}, b_{K−1}\}$.</p><p>To obtain the gradients with respect to the parameter set $θ$, we require the partial derivatives of L with respect to the parameters $θ_j = {A_j, b_j}$ of each layer $j = 0, . . . ,K− 1$. The chain rule allows us to determine the partial derivatives as</p><script type="math/tex; mode=display">\begin{split}\frac{\partial L}{\partial \theta_{K-1}}&=\frac{\partial L}{\partial f_K}{\color{blue} {\frac{\partial f_k}{\partial \theta_{K-1}}}}\\\frac{\partial L}{\partial \theta_{K-2}}&=\frac{\partial L}{\partial f_K}{\color{orange}{\frac{\partial f_k}{\partial \theta_{K-1}}}}{\color{blue}{\frac{\partial f_{k-1}}{\partial \theta_{K-2}}}}\\\frac{\partial L}{\partial \theta_{K-3}}&=\frac{\partial L}{\partial f_K}{\color{orange}{\frac{\partial f_k}{\partial \theta_{K-1}}\frac{\partial f_{k-1}}{\partial \theta_{K-2}}}}{\color{blue}{\frac{\partial f_{k-2}}{\partial \theta_{K-3}}}}\\\frac{\partial L}{\partial \theta_{i}}&=\frac{\partial L}{\partial f_K}{\color{orange}{\frac{\partial f_k}{\partial \theta_{K-1}}\cdots\frac{\partial f_{i+2}}{\partial \theta_{i+1}}}}{\color{blue}{\frac{\partial f_{i+1}}{\partial \theta_{i}}}}\\\end{split}</script><p>The ${\color{orange}{orange}}$ terms are partial derivatives of the output of a layer with respect to its inputs, whereas the ${\color{blue}{blue}}$ terms are partial derivatives of the output of a layer with respect to its parameters. Assuming, we have already computed the partial derivatives $∂L/∂θ_{i+1}$, then most of the computation can be reused to compute $∂L/∂θ_i$. The additional terms that we need to compute are indicated by the boxes. Figure visualizes that the gradients are passed backward through the network.</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943586.png" alt="Backward pass in a multi-layer neural network"></p></li><li><p><strong>Automatic Differentiation</strong>: It turns out that backpropagation is a special case of a general technique in numerical analysis called <em>automatic differentiation</em>. We can think of automatic differentation as a set of techniques to numerically (in contrast to symbolically) evaluate the exact (up to machine precision) gradient of a function by working with <em>intermediate variables</em> and applying the <em>chain rule</em>. Automatic differentiation applies to general computer programs and has forward and reverse modes.</p></li><li><p>Figure shows a simple graph representing the data flow from inputs $x$ to outputs $y$ via some intermediate variables $a, b$. If we were to compute the derivative $dy/dx$, we would apply the chain rule and obtain</p><script type="math/tex; mode=display">\frac{d\,y}{d\,x}=\frac{d\,y}{d\,b}\frac{d\,b}{d\,a}\frac{d\,a}{d\,x}</script><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943096.png" alt="the flow of data from x to y"></p><p>Intuitively, the forward and reverse mode differ in the order of multiplication. Due to the associativity of matrix multiplication, we can choose between</p><script type="math/tex; mode=display">\begin{split}\frac{d\,y}{d\,x}&=\left(\frac{d\,y}{d\,b}\frac{d\,b}{d\,a}\right)\frac{d\,a}{d\,x}  \\\frac{d\,y}{d\,x}&=\frac{d\,y}{d\,b}\left(\frac{d\,b}{d\,a}\frac{d\,a}{d\,x}\right)\end{split}</script><p>The first equation would be the <strong><em>reverse</em></strong> mode because gradients are propagated backward through the graph, i.e., reverse to the data flow. And the second equation would be the <strong><em>forward</em></strong> mode, where the gradients flow with the data from left to right through the graph.</p></li><li><p>In the context of neural networks, where the input dimensionality is often much higher than the dimensionality of the labels, the reverse mode is computationally significantly cheaper than the forward mode.</p></li></ul><blockquote><p>e.g Consider the function $f(x) =\sqrt{x^2 + \exp(x^2)} + \cos(x^2 + \exp(x^2))$</p><p>If we were to implement a function f on a computer, we would be able to save some computation by using intermediate variables</p><script type="math/tex; mode=display">\begin{split}a&=x^2\\b&=\exp(a)\\c&=a+b\\d&=\sqrt c\\e&=\cos(c)\\f&=d+e\end{split}</script><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943083.png" alt="Computation graph with inputs x, function values f"></p><p>This is the same kind of thinking process that occurs when applying the chain rule. Note that the preceding set of equations requires fewer operations than a direct implementation of the function $f(x)$ as defined. The corresponding computation graph in Figure shows the flow of data and computations required to obtain the function value $f$.</p><p>The set of equations that include intermediate variables can be thought of as a computation graph, a representation that is widely used in implementations of neural network software libraries.We can directly compute the derivatives of the intermediate variables with respect to their corresponding inputs.</p><script type="math/tex; mode=display">\begin{split}\frac{\partial a}{\partial x}&=2x\\\frac{\partial b}{\partial a}&=\exp(a)\\\frac{\partial c}{\partial a}&=1=\frac{\partial c}{\partial b}\\\frac{\partial d}{\partial c}&=\frac{1}{2\sqrt c}\\\frac{\partial e}{\partial c}&=-\sin(c)\\\frac{\partial f}{\partial d}&=1=\frac{\partial f}{\partial e}\\\end{split}</script><p>By looking at the computation graph in Figure , we can compute $∂f/∂x$ by working backward from the output and obtain</p><script type="math/tex; mode=display">\begin{split}\frac{\partial f}{\partial c}&=\frac{\partial f}{\partial d}\frac{\partial d}{\partial c}+\frac{\partial f}{\partial e}\frac{\partial e}{\partial c}\\\frac{\partial f}{\partial b}&=\frac{\partial f}{\partial c}\frac{\partial c}{\partial b}\\\frac{\partial f}{\partial a}&=\frac{\partial f}{\partial b}\frac{\partial b}{\partial a}+\frac{\partial f}{\partial c}\frac{\partial c}{\partial a}\\\frac{\partial f}{\partial x}&=\frac{\partial f}{\partial a}\frac{\partial a}{\partial x}\end{split}</script><p>Note that we implicitly applied the chain rule to obtain $∂f/∂x$. By substituting the results of the derivatives of the elementary functions, we get</p><script type="math/tex; mode=display">\begin{split}\frac{\partial f}{\partial c}&=1\cdot \frac{1}{2\sqrt c}+1\cdot(-\sin(c))\\\frac{\partial f}{\partial b}&=\frac{\partial f}{\partial c}\cdot 1\\\frac{\partial f}{\partial a}&=\frac{\partial f}{\partial b}\exp(a)+\frac{\partial f}{\partial c}\cdot 1\\\frac{\partial f}{\partial x}&=\frac{\partial f}{\partial a}\cdot 2x\end{split}</script></blockquote><ul><li>Let $x_1, . . . , x_d$be the input variables to the function, $x_{d+1}, . . . , x_{D−1}$ be the intermediate variables, and $x_D$ the output variable. Then the computation graph can be expressed as follows:<script type="math/tex; mode=display">For\;\;i = d + 1, . . . ,D : x_i = g_i(x_{Pa(x_i)}) ,</script>where the $g_i(·)$ are elementary functions and $x_{Pa(x_i)}$ are the parent nodes of the variable $x_i$​ in the graph. Given a function defined in this way, we can use the chain rule to compute the derivative of the function in a step-by-step fashion. Recall that by definition $f = x_D$ and hence<script type="math/tex; mode=display">\frac{\partial f}{\partial x_D}=1</script>For other variables $x_i$, we apply the chain rule<script type="math/tex; mode=display">\frac{\partial f}{\partial x_i}=\sum_{x_j:x_i\in Pa(x_j)}{\frac{\partial f}{\partial x_j}\frac{\partial x_j}{\partial x_i}}=\sum_{x_j:x_i\in Pa(x_j)}{\frac{\partial f}{\partial x_j}\frac{\partial g_j}{\partial x_i}}</script>where $Pa(x_j)$ is the set of parent nodes of $x_j$ in the computation graph.</li></ul><h2 id="Higher-Order-Derivatives"><a href="#Higher-Order-Derivatives" class="headerlink" title="Higher-Order Derivatives"></a>Higher-Order Derivatives</h2><ul><li><p>Consider a function $f : \mathbb R^2 → \mathbb R$ of two variables $x, y$. We use the following notation for higher-order partial derivatives (and for gradients)</p><ul><li>$\frac{\partial^2f}{\partial x^2}$is the second partial derivative of $f$ with respect to $x$.</li><li>$\frac{\partial^nf}{\partial x^n}$is the $n$th partial derivative of $f$ with respect to $x$.</li><li>$\frac{\partial^2f}{\partial y \partial x}=\frac{\partial}{\partial y}\left(\frac{\partial f}{\partial x}\right)$is the partial derivative obtained by first partial differentiating with respect to $x$ and then with respect to $y$.</li><li>$\frac{\partial^2f}{\partial x \partial y}$is the partial derivative obtained by first partial differentiating by $y$ and then $x$.</li></ul></li><li><p>The Hessian is the collection of all second-order partial derivatives. If $f(x, y)$ is a twice (continuously) differentiable function, then</p><script type="math/tex; mode=display">\frac{\partial^2f}{\partial x \partial y}=\frac{\partial^2f}{\partial y \partial x}</script><p>the order of differentiation does not matter, and the corresponding Hessian matrix</p><script type="math/tex; mode=display">H=\left[\begin{matrix}\frac{\partial^2f}{\partial x^2}& \frac{\partial^2f}{\partial x \partial y}\\\frac{\partial^2f}{\partial x \partial y}& \frac{\partial^2f}{\partial y^2}\end{matrix}\right]</script><p>is symmetric.The Hessian is denoted as $∇^2_{x,y}f(x, y)$. Generally, for $x ∈ \mathbb R^n$ and $f : \mathbb R^n → \mathbb R$, the Hessian is an $n × n$ matrix. The Hessian measures the curvature of the function locally around $(x, y)$.</p></li><li><p><strong>Hessian of a Vector Field</strong>: If $f : \mathbb R^n → \mathbb R^m$ is a vector field, the Hessian is an $(m× n × n)$-tensor</p></li></ul><h2 id="Linearization-and-Multivariate-Taylor-Series"><a href="#Linearization-and-Multivariate-Taylor-Series" class="headerlink" title="Linearization and Multivariate Taylor Series"></a>Linearization and Multivariate Taylor Series</h2><ul><li><p>The gradient $∇f$ of a function $f$ is often used for a locally linear approximation of $f$ around $x_0$:</p><script type="math/tex; mode=display">f(x)\approx f(x_0)+(\nabla_xf)(x_0)(x-x_0)</script><p>Here $(∇_xf)(x_0)$ is the gradient of f with respect to $x$, evaluated at $x_0$.</p></li><li><p><strong>Multivariate Taylor Series</strong>: We consider a function</p><script type="math/tex; mode=display">f:\mathbb R^D\rightarrow \mathbb R\\x\mapsto f(x),x\in \mathbb R^D</script><p>that is smooth at $x_0$. When we define the difference vector $δ := x − x_0$, the <em>multivariate Taylor</em> series of $f$ at $(x_0)$ is defined as</p><script type="math/tex; mode=display">f(x)=\sum_{k=0}^\infty{\frac{D^k_xf(x_0)}{k!}\delta^k}</script><p>where $D^k_xf(x_0)$ is the $k$-th (total) derivative of $f$ with respect to $x$, eval-uated at $x_0$.</p></li><li><p><strong>Taylor Polynomial</strong>: The <em>Taylor polynomial</em> of degree $n$ of $f$ at $x_0$ contains the first $n + 1$ components of the series and isdefined as</p><script type="math/tex; mode=display">T_n(x)=\sum_{k=0}^n{\frac{D^k_xf(x_0)}{k!}\delta^k}</script><p>We used the slightly sloppy notation of $δ^k$, which is not defined for vectors $x ∈ \mathbb R^D, D &gt; 1$, and $k &gt; 1$.Note that both $D^k_xf$ and $δ^k$ are $k$-th order tensors, i.e., $k$-dimensional arrays. The $k$th-order tensor $\delta^k\in\mathbb R^{\overset{k\;times}{\overbrace{D\times D\times \cdots\times D}}}$ is obtained as a $k$-fold outer product, denoted by $⊗$, of the vector $δ ∈ \mathbb R^D$. For example,</p><script type="math/tex; mode=display">\delta^2:=\delta ⊗\delta=\delta\delta^T,\;\;\;\delta^2[i,j]=\delta[i]\delta[j]\\\delta^3:=\delta ⊗\delta⊗\delta,\;\;\;\delta^3[i,j,k]=\delta[i]\delta[j]\delta[k]</script><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943286.png" alt="Outer products"></p><p>In general, we obtain the terms</p><script type="math/tex; mode=display">D^k_xf(x_0)\delta^k=\sum_{i_1=1}^D\cdots\sum_{i_k=1}^DD^k_xf(x_0)[i_1,...,i_k]\delta[i_1]\cdots\delta[i_k]</script><p>in the Taylor series, where $D^k_xf(x_0)\delta^k$ contains $k$-th order polynomials.</p></li><li><p>Now that we defined the Taylor series for vector fields, let us explicitly write down the first terms <script type="math/tex">D^k_xf(x_0)\delta^k</script> of the Taylor series expansion for $k = 0, . . . , 3$ and $δ := x − x_0$:<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943666.png" alt="the Taylor series for vector fields"></p></li></ul><p>​        Here, $H(x_0)$ is the Hessian of $f$ evaluated at $x_0$.</p><blockquote><p>e.g. <strong>Taylor Series Expansion of a Function with Two Variables</strong></p><p>Consider the function $f(x,y)=x^2+2xy+y^3$</p><p>We want to compute the Taylor series expansion of f at $(x_0, y_0) = (1, 2)$. Before we start, let us discuss what to expect: The function is a polynomial of degree $3$. We are looking for a Taylor series expansion, which itself is a linear combination of polynomials. Therefore, we do not expect the Taylor series expansion to contain terms of fourth or higher order to express a third-order polynomial. This means that it should be sufficient to determine the first four terms  for an exact alternative representation.</p><p>To determine the Taylor series expansion, we start with the constant term and the first-order derivatives, which are given by</p><script type="math/tex; mode=display">f(1,2)=13\\\frac{\partial f}{\partial x}=2x+2y\;\Rightarrow \;\frac{\partial f}{\partial x}(1,2)=6\\\frac{\partial f}{\partial y}=2x+3y^2\;\Rightarrow \;\frac{\partial f}{\partial x}(1,2)=14\\</script><p>Therefore, we obtain</p><script type="math/tex; mode=display">D^1_{x,y}f(1,2)=\nabla_{x,y}f(1,2)=\left[\begin{matrix}\frac{\partial f}{\partial x}(1,2)&\frac{\partial f}{\partial y}(1,2)\end{matrix}\right]=\left[\begin{matrix}6&14\end{matrix}\right]\in\mathbb R^{1\times 2}</script><p>such that</p><script type="math/tex; mode=display">\frac{D^1_{x,y}f(1,2)}{1!}\delta=\left[\begin{matrix}6&14\end{matrix}\right]\left[\begin{matrix}x-1\\y-2\end{matrix}\right]=6(x-1)+14(y-2)</script><p>Note that $D^1_{x,y}f(1,2)\delta$ contains only linear terms, i.e., first-order polynomials.</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943551.png" alt="The second-order partial derivatives"></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943403.png" alt="The third-order derivatives01"></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202408011943835.png" alt="the (exact) Taylor series expansion"></p><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> 笔记 </tag>
            
            <tag> VectorCalculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy学习</title>
      <link href="/2024/07/31/numpy-xue-xi/"/>
      <url>/2024/07/31/numpy-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>NumPy 是 Python 中用于科学计算的基本包。它是一个 Python 库，提供多维数组对象、各种派生对象（如屏蔽数组和矩阵）以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等等。</li><li>NumPy 包的核心是 <code>ndarray</code> 对象。它封装了同质数据类型的 n 维数组，为了提高性能，在编译代码中执行了许多操作。</li><li>NumPy 数组和标准 Python 序列之间存在几个重要差异<ul><li>NumPy 数组在创建时具有<strong>固定大小</strong>，这与 Python 列表（可以动态增长）不同。更改  <code>ndarray</code> 的大小将创建一个新数组并删除原始数组。</li><li>NumPy 数组中的元素都必须<strong>具有相同的数据类型</strong>，因此在内存中的大小相同。例外：可以有（Python，包括 NumPy）对象的数组，从而允许不同大小的元素的数组。</li><li>NumPy 数组有助于对大量数据进行高级数学运算和其他类型的运算。通常，与使用 Python 的内置序列相比，此类操作的执行效率更高，代码更少。</li></ul></li><li>当涉及  <code>ndarray</code> 时，逐个元素的操作是“默认模式”，但逐个元素的操作由<strong>预编译的 C 代码</strong>快速执行。</li><li>NumPy 的两个功能：矢量化和广播<ul><li>矢量化描述了代码中没有任何明确的循环、索引等，当然，这些事情只是在优化的、预编译的 C 代码中的“幕后”发生。</li><li>广播是用于描述操作的隐式逐元素行为的术语;一般来说，在 NumPy 中，所有运算，不仅仅是算术运算，还有逻辑、按位、函数等，都以这种隐式的逐元素方式运行，即它们广播。</li></ul></li><li>安装numpy：<strong><code>pip install numpy</code></strong></li></ul><h2 id="数组创建与操作"><a href="#数组创建与操作" class="headerlink" title="数组创建与操作"></a>数组创建与操作</h2><ul><li>通过<code>numpy</code>模块中的<code>array</code>函数实现数组的创建，如果向函数中传入一个列表或元组，将构造简单的<em>一维数组</em>；如果传入多个嵌套的列表或元组，则可以构造一个<em>二维数组</em>。构成数组的元素都是同质的，即数组中的每一个值都<strong>具有相同的数据类型</strong>。</li></ul><h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [ 3 10  5  3  1  0  9  2]</span>arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8.5</span><span class="token punctuation">,</span><span class="token number">9.6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">2.8</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[ 8.5  9.6 12.  11.  20. ] [12.  14.   3.   6.   7. ] [34.   1.2 43.   2.3 53. ] [54.  33.   2.8 24.  22. ]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上结果所示，可以将列表或元组转换为一个数组，在第二个数组中，输入的元素含有整数型和浮点型两种数据类型，但输出的数组元素全都是浮点型（原来的整型会被强制转换为浮点型，从而保证数组元素的同质性）。</p><h3 id="数组元素获取"><a href="#数组元素获取" class="headerlink" title="数组元素获取"></a>数组元素获取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一维数组元素的获取</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#二维数组元素的获取</span><span class="token comment">#第2行第3列元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#第3行所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#第2列所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#第2至4行，2至5行</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[5 3 0 2]3.0[34.   1.2 43.   2.3 53. ][ 9.6 14.   1.2 33. ][[14.   3.   6.   7. ] [ 1.2 43.   2.3 53. ] [33.   2.8 24.  22. ]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上结果是通过位置索引获取一维和二维数组中的元素，在一维数组中，列表的所有索引方法都可以使用在数组上，而且还可以将任意位置的索引组装为列表，用作对应元素的获取；在二维数组中，位置索引必须写成<code>[rows,cols]</code>的形式，方括号的前半部分用于控制二维数组的行索引，后半部分用于控制数组的列索引。如果需要获取所有的行或列元素，那么，对应的行索引或列索引需要用英文状态的冒号表示。</p><p>从数组中取出某几行和某几列: <strong>使用ix_函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#第一行、最后一行和第二列、第四列构成的数组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ix_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#第一行、最后一行和第一列、第三列、第四列构成的数组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ix_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[ 9.6 11. ] [33.  24. ]] [[ 9.6 12.  11. ] [33.   2.8 24. ]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的常用属性"><a href="#数组的常用属性" class="headerlink" title="数组的常用属性"></a>数组的常用属性</h3><ul><li><p>在numpy模块中，可以通过<code>genfromtxt</code>函数读取外部文本文件的数据，这里的文本文件主要为<code>csv</code>文件和<code>txt</code>文件。</p><ul><li><strong><code>np.genfromtxt(fname, dtype=&lt;class 'float’&gt;, comments=’#’, delimiter=None, skip_header=0,skip_footer=0, converters=None, missing_values=None,filling_values=None, usecols=None,names=None,)</code></strong></li><li><strong>fname</strong>：指定需要读入数据的文件路径。</li><li><strong>dtype</strong>：指定读入数据的数据类型，默认为浮点型，如果原数据集中含有字符型数据，必须指定数据类型为“str”。</li><li><strong>comments</strong>：指定注释符，默认为“#”，如果原数据的行首有“#”,将忽略这些行的读入。</li><li><strong>delimiter</strong>：指定数据集的列分割符。</li><li><strong>skip_header</strong>：是否跳过数据集的首行，默认不跳过。</li><li><strong>skip_footer</strong>：是否跳过数据集的脚注，默认不跳过。</li><li><strong>converters</strong>：将指定列的数据转换成其他数值。</li><li><strong>miss_values</strong>：指定缺失值的标记，如果原数据集含指定的标记，读入后这样的数据就为缺失值。</li><li><strong>filling_values</strong>：指定缺失值的填充值。</li><li><strong>usecols</strong>：指定需要读入哪些列。</li><li><strong>names</strong>：为读入数据的列设置列名称。</li></ul></li><li><p>获取数组属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#读入数据</span>stu_score <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>fname <span class="token operator">=</span> <span class="token string">r'C:\Users \Administrator\Desktopistu_socre.txt'</span><span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>skip_header<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#查看数据结构</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#查看数据维数</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment">#查看数据行列数</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#查看数组元素的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">#查看数组元素个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">.</span>size<span class="token punctuation">)</span>out<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'numpy.ndarray'</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">1380</span>，<span class="token number">5</span><span class="token punctuation">)</span><span class="token builtin">float</span><span class="token number">646900</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组的形状处理"><a href="#数组的形状处理" class="headerlink" title="数组的形状处理"></a>数组的形状处理</h3><ul><li><p>数组形状处理的手段主要有<code>reshape</code>、<code>resize</code>、<code>ravel</code>、<code>flatten</code>、<code>vstack</code>、<code>hstack</code>、<code>row_stack</code>和<code>colum_stack</code></p></li><li><p><code>reshape</code>与<code>resize</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#数组的行列数</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#使用reshape方法更改数组的形状</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#打印数组arr3的行列数</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">#使用resize方法更改数组的形状</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#打印数组arr3的行列数</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>out<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">57</span> <span class="token number">3612</span> <span class="token number">48</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">8</span> <span class="token number">91</span> <span class="token number">5</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">9</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然reshape和resize都是用来改变数组形状的“方法”，但是<strong>reshape方法只是返回改变形状后的预览，但并未真正改变数组arr3的形状；而resize方法则不会返回预览，而是会直接改变数组arr3的形状</strong></p></li><li><p>利用<code>ravel</code>、<code>flatten</code>和<code>reshape</code>三种方法将多维数组降为一维数组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#构造3×3的二维矩阵</span>arr4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原数组:\n'</span><span class="token punctuation">,</span>arr4<span class="token punctuation">)</span><span class="token comment">#默认排序降维</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数组降维:\n'</span><span class="token punctuation">,</span>arr4<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#改变排序模式的降维</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>order <span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span>原数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">10</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span>数组降维<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">10</span> <span class="token number">100</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">10</span> <span class="token number">100</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">10</span> <span class="token number">100</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">100</span> <span class="token number">200</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">100</span> <span class="token number">200</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">100</span> <span class="token number">200</span> <span class="token number">300</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在默认情况下，优先按照数组的<strong>行顺序</strong>，逐个将元素降至一维（见数组降维的前三行打印结果）；如果按原始数组的<strong>列顺序</strong>，将数组降为一维的话，需要设置<strong>order参数为“F”</strong>。</p></li><li><p>元素修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#更改预览值</span>arr4<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'flatten方法:\n'</span><span class="token punctuation">,</span> arr4<span class="token punctuation">)</span>arr4<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1000</span><span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'ravel方法:\n'</span><span class="token punctuation">,</span>arr4<span class="token punctuation">)</span>arr4<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'reshape方法:\n'</span><span class="token punctuation">,</span>arr4<span class="token punctuation">)</span>out<span class="token punctuation">:</span>flatten方法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">10</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span>ravel方法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span>reshape方法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过flatten方法实现的降维返回的是<strong>复制</strong>，因为对降维后的元素做修改，并没有影响到原数组arr4的结果；相反，ravel方法与reshape方法返回的则是<strong>视图</strong>，通过对视图的改变，是会影响到原数组arr4的</p></li></ul></li><li><p><code>vstack</code>用于垂直方向（纵向）的数组堆叠，其功能与<code>row_stack</code>函数一致，而<code>hstack</code>则用于水平方向（横向）的数组合并，其功能与<code>colum_stack</code>函数一致</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr5 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'vstack纵向堆叠数组:\n '</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>arr4<span class="token punctuation">,</span>arr5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'row_stack纵向堆叠数组:\n'</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>row_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>arr4<span class="token punctuation">,</span>arr5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr6 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'hstack横向合并数组:\n'</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">[</span>arr4<span class="token punctuation">,</span>arr6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'column_stack横向合并数组: \n '</span> <span class="token punctuation">,</span>np<span class="token punctuation">.</span>column_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>arr4<span class="token punctuation">,</span>arr6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span>vstack纵向堆叠数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>row_stack纵向堆叠数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>hstack横向合并数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span>column_stack横向合并数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span> <span class="token number">15</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是多个数组的<strong>纵向堆叠</strong>，必须保证每个数组的<strong>列数相同</strong>；如果将多个数组按<strong>横向合并</strong>的话，则必须保证每个数组的<strong>行数相同</strong>。</p></li></ul><h2 id="数组的基本运算符"><a href="#数组的基本运算符" class="headerlink" title="数组的基本运算符"></a>数组的基本运算符</h2><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><ul><li><p>在numpy模块中，实现四则运算的计算既可以使用<strong>运算符号</strong>，也可以使用<strong>函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#加法运算</span>math <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">)</span>english <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span>chinese <span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tot_symbol <span class="token operator">=</span> math<span class="token operator">+</span>english<span class="token operator">+</span>chinesetot_fun <span class="token operator">=</span> np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>math<span class="token punctuation">,</span> english<span class="token punctuation">)</span> <span class="token punctuation">,</span> chinese<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'符号加法:\n'</span><span class="token punctuation">,</span>tot_symbol<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数加法:\n'</span><span class="token punctuation">,</span>tot_fun<span class="token punctuation">)</span><span class="token comment">#除法运算</span>height <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">177</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">169</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">)</span>weight <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span>BMI_symbol <span class="token operator">=</span> weight<span class="token operator">/</span><span class="token punctuation">(</span>height<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>BMI_fun <span class="token operator">=</span> np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>weight<span class="token punctuation">,</span>np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>height<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'符号除法:n '</span> <span class="token punctuation">,</span>BMT_symbol<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数除法:n '</span><span class="token punctuation">,</span> BMI_fun<span class="token punctuation">)</span>out<span class="token punctuation">:</span>符号加法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">258</span> <span class="token number">240</span> <span class="token number">228</span> <span class="token number">259</span> <span class="token number">229</span> <span class="token number">248</span><span class="token punctuation">]</span>函数加法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">258</span> <span class="token number">240</span> <span class="token number">228</span> <span class="token number">259</span> <span class="token number">229</span> <span class="token number">248</span><span class="token punctuation">]</span>符号除法<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token number">22.77318641</span> <span class="token number">23.30109483</span> <span class="token number">23.63403301</span> <span class="token number">25.20920136</span> <span class="token number">26.7299275</span> <span class="token punctuation">]</span>函数除法<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token number">22.77318641</span> <span class="token number">23.30109483</span> <span class="token number">23.63403301</span> <span class="token number">25.20920136</span> <span class="token number">26.7299275</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四则运算中的符号分别是“<code>+-*/</code>”，对应的numpy模块函数分别是<code>np.add</code>、<code>np. subtract</code>、<code>np.multiply</code>和<code>np.divide</code>。需要注意的是，函数只能接受<strong>两个对象</strong>的运算，如果需要多个对象的运算，就得使用<strong>嵌套</strong>方法。不管是符号方法还是函数方法，都必须<strong>保证操作的数组具有相同的形状</strong>，除了数组与标量之间的运算。</p></li><li><p>余数、整除和指数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr7 <span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr8 <span class="token operator">=</span>np<span class="token punctuation">.</span>array <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数组arr7:\n'</span><span class="token punctuation">,</span>arr7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数组arr8:\n'</span><span class="token punctuation">,</span>arr8<span class="token punctuation">)</span><span class="token comment">#求余数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算余数:\n'</span><span class="token punctuation">,</span>arr7 <span class="token operator">%</span> arr8<span class="token punctuation">)</span><span class="token comment">#求整除</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算整除:\n'</span><span class="token punctuation">,</span> arr7 <span class="token operator">//</span> arr8<span class="token punctuation">)</span><span class="token comment">#求指数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算指数:\n'</span><span class="token punctuation">,</span>arr7 <span class="token operator">**</span> arr8<span class="token punctuation">)</span>out<span class="token punctuation">:</span>数组arr7<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">8</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>数组arr8<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">4</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>计算余数<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>计算整除<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>计算指数<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1000</span> <span class="token number">512</span> <span class="token number">27</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2401</span> <span class="token number">1296</span> <span class="token number">625</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用“%、//、**”计算数组元素之间商的余数、整除部分以及数组元素之间的指数。对应的函数为<code>np.fmod</code>、<code>np.modf</code>和<code>np.power</code>。整除的函数需要写成<code>np.modf(arr7/arr8)[1]</code>，因为modf可以返回数值的小数部分和整数部分，而整数部分就是要取的整除值。</p></li></ul><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><ul><li>比较运算符及其含义</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>函数</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td><code>np.greater(arr1,arr2)</code></td><td>判断arr1的元素是否大于arr2的元素</td></tr><tr><td>&gt;=</td><td><code>np.greater_equal(arr1,arr2)</code></td><td>判断arr1的元素是否大于等于arr2的元素</td></tr><tr><td>&lt;</td><td><code>np.less(arr1,arr2)</code></td><td>判断arr1的元素是否小于arr2的元素</td></tr><tr><td>&lt;=</td><td><code>np.less_equal(arr1,arr2)</code></td><td>判断arr1的元素是否小于等于arr2的元素</td></tr><tr><td>==</td><td><code>np.equal(arr1,arr2)</code></td><td>判断arr1的元素是否等于arr2的元素</td></tr><tr><td>!=</td><td><code>np.not_equal(arr1,arr2)</code></td><td>判断arr1的元素是否不等于arr2的元素</td></tr></tbody></table></div><ul><li><p>运用比较运算符可以返回bool类型的值，即<code>True</code>和<code>False</code>。</p></li><li><p>普遍使用到比较运算符的两种情况：一个是从数组中查询满足条件的元素，另一个是根据判断的结果执行不同的操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#取子集</span><span class="token comment">#从arr7中取出arr7大于arr8的所有元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'满足条件的二维数组元素获取:、n'</span><span class="token punctuation">,</span>arr7<span class="token punctuation">[</span>arr7<span class="token operator">&gt;</span>arr8<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#从arr9中取出大于10的元素</span>arr9 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'满足条件的一维数组元素获取:\n'</span><span class="token punctuation">,</span>arr9<span class="token punctuation">[</span>arr9<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#判断操作</span><span class="token comment">#将arr7中大于7的元素改成5，其余的不变</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'二维数组的条件操作:\n'</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>arr7<span class="token operator">&gt;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>arr7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将arr9中大于10的元素改为1，否则改为0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'一维数组的条件操作:\n '</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>arr9<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">8</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>满足条件的二维数组元素获取<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">10</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span><span class="token punctuation">]</span>满足条件的一维数组元素获取<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">23</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">22</span> <span class="token number">15</span><span class="token punctuation">]</span>二维数组的条件操作<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">5</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>一维数组的条件操作<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运用bool索引，将满足条件的元素从数组中挑选出来，但不管是一维数组还是多维数组，通过bool索引返回的都是<strong>一维数组</strong>；<code>np.where</code>函数与Excel中的if函数一样，就是<strong>根据判定条件执行不同的分支语句</strong>。</p></li></ul><h3 id="广播运算"><a href="#广播运算" class="headerlink" title="广播运算"></a>广播运算</h3><ul><li><p>当数组<strong>形状不同</strong>时，也能够进行数学运算的功能称为数组的广播。</p></li><li><p>数组的广播功能需满足规则</p><ul><li>各输入数组的维度可以不相等，但必须确保从右到左的对应维度值相等。</li><li>如果对应维度值不相等，就必须保证其中一个为1。</li><li>各输入数组都向其shape最长的数组看齐，shape中不足的部分都通过在前面加1补齐。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#各输入数组维度一致，对应维度值相等</span>arr10 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>arr11 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3X4的二维矩阵运算: \n'</span> <span class="token punctuation">,</span>arr10 <span class="token operator">+</span> arr11<span class="token punctuation">)</span><span class="token comment">#各输入数组维度不一致，对应维度值相等</span>arr12 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>arr10 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维数不-一致，但末尾的维度值一致: \n'</span> <span class="token punctuation">,</span>arr12 <span class="token operator">+</span> arr10<span class="token punctuation">)</span><span class="token comment">#各输入数组维度不一致，对应维度值不相等，但其中有一个为1</span>arr12 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>arr13 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维数不一致，维度值也不一致，但维度值至少一个为1: \n'</span><span class="token punctuation">,</span>arr12 <span class="token operator">+</span> arr13<span class="token punctuation">)</span><span class="token comment">#加1补齐</span>arr14 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'arr14的维度自动补齐为(1,3): \n'</span> <span class="token punctuation">,</span>arr10 <span class="token operator">+</span> arr14<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407311158154.png" alt="广播运算结果"></p></li></ul><p>​    如上结果所示，第一个打印结果其实并没有用到数组的广播，因为这两个数组具有同形状；第二个打印结果是三维数组和两维数组的和，虽然维数不一样，但末尾的两个维度值是一样的，都是4和3，最终得到5×4×3的数组；第三个打印中的两个数组维数和维度值均不一样，但末尾的两个维度值中必须含一个1，且另一个必须相同，都为4，相加之后得到5×4×3的数组；第四个打印结果反映的是4×3的二维数组和(3,)的一维数组的和，两个数组维度不一致，为了能够运算，广播功能会自动将(3,)的一维数组补齐为(1,3)的二维数组，进而得到4×3的数组。</p><h2 id="常用的数学和统计函数"><a href="#常用的数学和统计函数" class="headerlink" title="常用的数学和统计函数"></a>常用的数学和统计函数</h2><ul><li><p>数学函数与统计函数<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407311158856.png" alt="数学函数与统计函数"></p></li><li><p>统计函数都有<code>axis</code>参数，该参数的目的就是在统计数组元素时需要按照不同的轴方向计算，如果<code>axis=1</code>，则表示按<strong>水平</strong>方向计算统计值，即计算每一行的统计值；如果<code>axis=0</code>，则表示按<strong>垂直</strong>方向计算统计值，即计算每一列的统计值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'垂直方向计算数组的和: \n '</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'水平方向计算数组的和:\n'</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token number">1000</span> <span class="token number">3000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token number">20</span> <span class="token number">200</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">30</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span>垂直方向计算数组的和<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">1050</span> <span class="token number">3500</span><span class="token punctuation">]</span>水平方向计算数组的和<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4001</span> <span class="token number">222</span> <span class="token number">333</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="线性代数的相关计算"><a href="#线性代数的相关计算" class="headerlink" title="线性代数的相关计算"></a>线性代数的相关计算</h2><ul><li><strong>numpy</strong>模块中有关线性代数的重要函数<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407311158135.png" alt="numpy模块中有关线性代数的重要函数"></li></ul><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一维数组的点积</span>vector_dot <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'一维数组的点积:ln'</span> <span class="token punctuation">,</span> vector_dot<span class="token punctuation">)</span><span class="token comment">#二维数组的乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'两个二维数组:'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr10<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>arr11<span class="token punctuation">)</span>arr2d <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>arr10<span class="token punctuation">,</span> arr11<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'二维数组的乘法:\n'</span><span class="token punctuation">,</span>arr2d<span class="token punctuation">)</span>out<span class="token punctuation">:</span>一维数组的点积<span class="token punctuation">:</span><span class="token number">32</span>两个二维数组<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">101</span> <span class="token number">102</span> <span class="token number">103</span> <span class="token number">104</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">105</span> <span class="token number">106</span> <span class="token number">107</span> <span class="token number">108</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">109</span> <span class="token number">110</span> <span class="token number">111</span> <span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">]</span>二维数组的乘法<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">323</span> <span class="token number">326</span> <span class="token number">329</span> <span class="token number">332</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">1268</span> <span class="token number">1280</span> <span class="token number">1292</span> <span class="token number">1304</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">2213</span> <span class="token number">2234</span> <span class="token number">2255</span> <span class="token number">2276</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">3158</span> <span class="token number">3188</span> <span class="token number">3218</span> <span class="token number">3248</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点积函数dot，使用在两个一维数组中，实际上是计算两个向量的乘积，返回一个标量；使用在两个二维数组中，即矩阵的乘法，矩阵乘法要求第一个矩阵的列数等于第二个矩阵的行数，否则会报错。</p><h3 id="diag函数的使用"><a href="#diag函数的使用" class="headerlink" title="diag函数的使用"></a><strong>diag</strong>函数的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr15 <span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'4×4的矩阵:\n'</span><span class="token punctuation">,</span>arr15<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取出矩阵的主对角线元素:\n'</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>arr15<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'由一维数组构造的方阵:\n '</span> <span class="token punctuation">,</span>np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span><span class="token number">4</span>×<span class="token number">4</span>的矩阵<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>O <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>取出矩阵的主对角线元素<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span>由一维数组构造的方阵<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">15</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上结果所示，如果给diag函数传入的是二维数组，则返回由<strong>主对角元素构成的一维数组</strong>；如果向diag函数传入一个一维数组，则返回<strong>方阵</strong>，且方阵的<strong>主对角线就是一维数组的值</strong>，方阵的非主对角元素均为0。</p><h3 id="特征根与特征向量"><a href="#特征根与特征向量" class="headerlink" title="特征根与特征向量"></a>特征根与特征向量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算方阵的特征向量和特征根</span>arr16 <span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计算3×3方阵的特征根和特征向量:ln'</span> <span class="token punctuation">,</span> arr16<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'求解结果为:\n'</span> <span class="token punctuation">,</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>arr16<span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">:</span>计算<span class="token number">3</span>×<span class="token number">3</span>方阵的特征根和特征向量<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">7</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>求解结果为<span class="token punctuation">:</span><span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">16.75112093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.12317544</span><span class="token punctuation">,</span> <span class="token number">0.37205451</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.30758888</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.90292521</span><span class="token punctuation">,</span><span class="token number">0.76324346</span><span class="token punctuation">]</span>，      <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.62178217</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.09138877</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.62723398</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.72026108</span><span class="token punctuation">,</span><span class="token number">0.41996923</span><span class="token punctuation">,</span><span class="token number">0.15503853</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特征根和特征向量的结果存储在元组中，元组的第一个元素就是特征根，每个特征根对应的特征向量存储在元组的第二个元素中。</p><h3 id="多元线性回归模型的解"><a href="#多元线性回归模型的解" class="headerlink" title="多元线性回归模型的解"></a>多元线性回归模型的解</h3><p>多元线性回归模型一般用来预测连续的因变量，如根据天气状况预测游客数量、根据网站的活动页面预测支付转化率、根据城市人口的收入、教育水平、寿命等预测犯罪率等。该模型可以写成$Y=Xβ+ε$，其中$Y$为因变量，$X$为自变量，$ε$为误差项。要想根据已知的$X$来预测$Y$的话，必须得知道偏回归系数$β$的值。$β=(X^TX)^{-1}X^TY)$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算偏回归系数</span>X<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>，<span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>，<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>，<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">,</span><span class="token number">3.8</span><span class="token punctuation">,</span><span class="token number">3.7</span><span class="token punctuation">,</span><span class="token number">4.3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">5.2</span><span class="token punctuation">,</span><span class="token number">6.7</span><span class="token punctuation">,</span><span class="token number">4.8</span><span class="token punctuation">,</span><span class="token number">4.2</span><span class="token punctuation">,</span><span class="token number">5.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x_trans_X_inverse <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>beta <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_trans_x_inverse<span class="token punctuation">,</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偏回归系数为: \n'</span> <span class="token punctuation">,</span> beta<span class="token punctuation">)</span>out<span class="token punctuation">:</span>偏回归系数为<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1.78052227</span> <span class="token number">0.24720413</span> <span class="token number">0.15841148</span> <span class="token number">0.13339845</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>X数组中，第一列全都是1，代表了这是线性回归模型中的截距项，剩下的三列代表自变量，根据$β$的求解公式，得到模型的偏回归系数，从而可以将多元线性回归模型表示为</p><p>$Y=1.781+0.247x_1+0.158x_2+0.133x_3$</p><h3 id="多元一次方程组的求解"><a href="#多元一次方程组的求解" class="headerlink" title="多元一次方程组的求解"></a>多元一次方程组的求解</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>A<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'三元一次方程组的解:\n '</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>out <span class="token punctuation">:</span>三元一次方程组的解<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">9.25</span> <span class="token number">4.25</span> <span class="token number">2.75</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="范数的计算"><a href="#范数的计算" class="headerlink" title="范数的计算"></a>范数的计算</h3><p>范数常常用来度量某个向量空间（或矩阵）中的每个向量的长度或大小，它具有三方面的约束条件，分别是<strong>非负性、齐次性和三角不等性</strong>。最常用的范数就是p范数，其公式可以表示成$\left|x\right|_p=(|x_1|^p+|x_2|^p+\cdots+|x_n|^p)^{1/p}$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#范数的计算</span>arr17 <span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#一范数</span>res1 <span class="token operator">=</span> np<span class="token punctuation">.</span> linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>arr17<span class="token punctuation">,</span><span class="token builtin">ord</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'向量的一范数:\n'</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span><span class="token comment">#二范数</span>res2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>arr17<span class="token punctuation">,</span><span class="token builtin">ord</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'向量的二范数:\n'</span> <span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span class="token comment">#无穷范数</span>res3 <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>arr17<span class="token punctuation">,</span><span class="token builtin">ord</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'向量的无穷范数:\n'</span><span class="token punctuation">,</span>res3<span class="token punctuation">)</span>out<span class="token punctuation">:</span>向量的一范数<span class="token punctuation">:</span><span class="token number">47.0</span>向量的二范数<span class="token punctuation">:</span><span class="token number">20.2237484162</span>向量的无穷范数<span class="token punctuation">:</span><span class="token number">12.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪随机数的生成"><a href="#伪随机数的生成" class="headerlink" title="伪随机数的生成"></a>伪随机数的生成</h2><p>numpy模块中的子模块random的常见随机数生成函数<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407311158252.png" alt="常见随机数生成函数"></p><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://numpy.org/doc/stable/user/whatisnumpy.html">https://numpy.org/doc/stable/user/whatisnumpy.html</a></li><li>从零开始学Python数据分析与挖掘／刘顺祥著．北京：清华大学出版社，2018</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy运行实践</title>
      <link href="/2024/07/30/scrapy-pa-chong-xi-lie-zhi-scrapy-yun-xing-shi-jian/"/>
      <url>/2024/07/30/scrapy-pa-chong-xi-lie-zhi-scrapy-yun-xing-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy运行实践"><a href="#Scrapy运行实践" class="headerlink" title="Scrapy运行实践"></a>Scrapy运行实践</h1><h2 id="脚本运行Scrapy"><a href="#脚本运行Scrapy" class="headerlink" title="脚本运行Scrapy"></a>脚本运行Scrapy</h2><ul><li><p>Scrapy 是建立在 <code>Twisted</code> 异步网络库之上的，因此需要在 Twisted 反应器内运行它。</p></li><li><p><strong><code>scrapy.crawler.CrawlerProcess</code></strong>:启动一个 Twisted 反应器，配置日志记录并设置关闭处理程序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerProcess<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>process <span class="token operator">=</span> CrawlerProcess<span class="token punctuation">(</span>    settings<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"FEEDS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"items.json"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider<span class="token punctuation">)</span>process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until the crawling is finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>get_project_settings</code> 获取具有项目设置的 <code>Settings</code> 实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerProcess<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settingsprocess <span class="token operator">=</span> CrawlerProcess<span class="token punctuation">(</span>get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'followall' is the name of one of the spiders of the project.</span>process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span><span class="token string">"followall"</span><span class="token punctuation">,</span> domain<span class="token operator">=</span><span class="token string">"scrapy.org"</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until the crawling is finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>scrapy.crawler.CrawlerRunner</code></strong>: 此类是一个薄包装器，它封装了一些简单的帮助程序以运行多个爬虫，但它不会以任何方式启动或干扰现有的反应器。</p><ul><li><p>使用此类，应在调度爬虫后显式运行反应器。如果您的应用程序已经在使用 Twisted 并且您想在同一反应器中运行 Scrapy，建议使用 <code>CrawlerRunner</code> 。</p></li><li><p>在Spider完成后，还必须自己关闭<code>Twisted</code>反应器。这可以通过向 <code>CrawlerRunner.crawl</code> 方法返回的延迟添加回调来实现。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> reactor<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerRunner<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>log <span class="token keyword">import</span> configure_logging<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>configure_logging<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"LOG_FORMAT"</span><span class="token punctuation">:</span> <span class="token string">"%(levelname)s: %(message)s"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>runner <span class="token operator">=</span> CrawlerRunner<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> runner<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider<span class="token punctuation">)</span>d<span class="token punctuation">.</span>addBoth<span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token keyword">_</span><span class="token punctuation">:</span> reactor<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>reactor<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until the crawling is finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="在同一进程中运行多个Spider"><a href="#在同一进程中运行多个Spider" class="headerlink" title="在同一进程中运行多个Spider"></a>在同一进程中运行多个Spider</h2><ul><li>默认情况下，当运行 <code>scrapy crawl</code> 时，Scrapy 会为每个进程运行一个蜘蛛。但是，Scrapy 支持使用内部 API 为每个进程运行多个蜘蛛。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerProcess<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settings<span class="token keyword">class</span> <span class="token class-name">MySpider1</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your first spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">MySpider2</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your second spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span>process <span class="token operator">=</span> CrawlerProcess<span class="token punctuation">(</span>settings<span class="token punctuation">)</span>process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider1<span class="token punctuation">)</span>process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider2<span class="token punctuation">)</span>process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until all crawling jobs are finished</span><span class="token comment">#===================================</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> reactor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerRunner<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>log <span class="token keyword">import</span> configure_logging<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settingsconfigure_logging<span class="token punctuation">(</span><span class="token punctuation">)</span>settings <span class="token operator">=</span> get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span>runner <span class="token operator">=</span> CrawlerRunner<span class="token punctuation">(</span>settings<span class="token punctuation">)</span>runner<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider1<span class="token punctuation">)</span>runner<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider2<span class="token punctuation">)</span>d <span class="token operator">=</span> runner<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>addBoth<span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token keyword">_</span><span class="token punctuation">:</span> reactor<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>reactor<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until all crawling jobs are finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过链接延迟来按顺序运行Spider</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> reactor<span class="token punctuation">,</span> defer<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerRunner<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>log <span class="token keyword">import</span> configure_logging<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settings<span class="token keyword">class</span> <span class="token class-name">MySpider1</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your first spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">MySpider2</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your second spider definition</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span>configure_logging<span class="token punctuation">(</span>settings<span class="token punctuation">)</span>runner <span class="token operator">=</span> CrawlerRunner<span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@defer<span class="token punctuation">.</span>inlineCallbacks</span><span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> runner<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider1<span class="token punctuation">)</span>    <span class="token keyword">yield</span> runner<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>MySpider2<span class="token punctuation">)</span>    reactor<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>crawl<span class="token punctuation">(</span><span class="token punctuation">)</span>reactor<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># the script will block here until the last crawl call is finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="多进程运行Spider"><a href="#多进程运行Spider" class="headerlink" title="多进程运行Spider"></a>多进程运行Spider</h2><ul><li><p>利用<code>multiprocessing</code>多进程运行Spider</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> CrawlerProcess<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settings<span class="token keyword">from</span> utils<span class="token punctuation">.</span>propertyutil <span class="token keyword">import</span> readpy<span class="token keyword">from</span> crawlsoftware<span class="token punctuation">.</span>spiders<span class="token punctuation">.</span>crawl_spider <span class="token keyword">import</span> CustomSpider<span class="token keyword">class</span> <span class="token class-name">RunSpider</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spidername<span class="token punctuation">)</span><span class="token punctuation">:</span>        multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>spidername <span class="token operator">=</span> spidername    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建一个新的CrawlerProcess实例</span>        process <span class="token operator">=</span> CrawlerProcess<span class="token punctuation">(</span>get_project_settings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>CustomSpider<span class="token punctuation">,</span> name<span class="token operator">=</span>self<span class="token punctuation">.</span>spidername<span class="token punctuation">)</span>        process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''多进程'''</span><span class="token comment"># 自定义方法获取待运行的Spider配置信息</span>crawl_settings <span class="token operator">=</span> readpy<span class="token punctuation">(</span><span class="token string">'./custom_settings/crawl_settings.py'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pool_crawl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> spider <span class="token keyword">in</span> crawl_settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'CRAWL_MODULES'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        process <span class="token operator">=</span> RunSpider<span class="token punctuation">(</span>spider<span class="token punctuation">)</span>        process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>process<span class="token punctuation">)</span>    <span class="token comment"># 等待所有的Spider实例完成</span>    <span class="token keyword">for</span> process <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spider_crawl</span><span class="token punctuation">(</span>spider_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"爬虫启动：</span><span class="token interpolation"><span class="token punctuation">{</span>spider_name<span class="token punctuation">}</span></span><span class="token string">，当前时间：</span><span class="token interpolation"><span class="token punctuation">{</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    process <span class="token operator">=</span> RunSpider<span class="token punctuation">(</span>spider_name<span class="token punctuation">)</span>    process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool_crawl<span class="token punctuation">(</span><span class="token punctuation">)</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'耗时{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://docs.scrapy.org/en/latest/topics/practices.html">https://docs.scrapy.org/en/latest/topics/practices.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Decompositions02</title>
      <link href="/2024/07/30/matrixdecompositions02/"/>
      <url>/2024/07/30/matrixdecompositions02/</url>
      
        <content type="html"><![CDATA[<h1 id="Matrix-Decompositions02"><a href="#Matrix-Decompositions02" class="headerlink" title="Matrix Decompositions02"></a>Matrix Decompositions02</h1><h2 id="Singular-Value-Decomposition-SVD"><a href="#Singular-Value-Decomposition-SVD" class="headerlink" title="Singular Value Decomposition(SVD)"></a>Singular Value Decomposition(SVD)</h2><ul><li><p><strong>SVD Theorem</strong>:  Let $A ∈ \mathbb R^{m×n}$ be a rectangular matrix of rank $r ∈ [0, min(m,n)]$. The SVD of $A$ is a decomposition of the form<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407301732879.png" alt="SVD"><br>with an orthogonal matrix $U ∈ \mathbb R^{m×m}$ with column vectors $u_i, i = 1, . . . ,m$, and an orthogonal matrix $V ∈ \mathbb R^{n×n}$ with column vectors $v_j, j = 1, . . . , n$. Moreover, $Σ$ is an $m× n$ matrix with $Σ_{ii} = σ_i ⩾ 0$ and $Σ_{ij} = 0, i \ne j$.</p><ul><li><p>The diagonal entries $σ_i, i = 1, . . . , r$, of $Σ$ are called the <strong><em>singular values</em></strong>, $u_i$ are called the <em>left-singular vectors</em>, and $v_j$ are called the <em>right-singular vectors</em> . By convention, the singular values are ordered, i.e., $σ_1 ⩾ σ_2 ⩾ σ_r ⩾ 0$.</p></li><li><p>The <em>singular value matrix</em> Σ is unique, but it requires some attention. Observe that the $Σ ∈ \mathbb R^{m×n}$ is rectangular. In particular, $Σ$ is of the same size as $A$ .This means that $Σ$ has a diagonal submatrix that contains the singular values and needs additional zero padding. Specifically, if $m &gt; n$, then the matrix $Σ$ has diagonal structure up to row $n $and then consists of $0^⊤$ row vectors from $n + 1$ to $m$ below so that</p><script type="math/tex; mode=display">\varSigma = \left[\begin{matrix}\sigma_1& 0& 0\\0& \ddots& 0\\0& 0& \sigma_n\\0& \cdots& 0\\\vdots& & \vdots\\0& \cdots& 0\end{matrix}\right]</script><p>If $m &lt; n$, the matrix $Σ$ has a diagonal structure up to column m and columns that consist of $0$ from $m+ 1$ to $n$:</p><script type="math/tex; mode=display">\varSigma = \left[\begin{matrix}\sigma_1& 0& 0& 0& \cdots& 0\\0& \ddots& 0& \vdots& & \vdots\\0& 0& \sigma_m& 0& \cdots& 0\end{matrix}\right]</script></li></ul></li><li><p>The SVD exists for any matrix $A ∈ \mathbb R^{m×n}$.</p></li><li><p>The SVD of a matrix can be interpreted as a decomposition of a corresponding linear mapping $Φ : \mathbb R^n → \mathbb R^m$ into three operations;Assume we are given a transformation matrix of a linear mapping $Φ : \mathbb R^n → \mathbb R^m$ with respect to the standard bases $B$ and $C$ of $\mathbb R^n$ and $\mathbb R^m$, respectively. Moreover, assume a second basis $\tilde B$ of $\mathbb R^n$ and $\tilde C$ of $\mathbb R^m$. Then</p><ol><li>The matrix $V$ performs a basis change in the domain $\mathbb R^n$ from $\tilde B$ (represented by the red and orange vectors $v_1$ and $v_2$ in the top-left of Figure) to the standard basis $B$. $V^⊤ = V^{−1}$ performs a basis change from $B$ to $\tilde B$. The red and orange vectors are now aligned with the canonical basis in the bottom-left of Figure.</li><li>Having changed the coordinate system to $\tilde B$, $Σ$ scales the new coordinates by the singular values $σ_i$ (and adds or deletes dimensions), i.e., $Σ$ is the transformation matrix of $Φ$ with respect to $\tilde B$ and $\tilde C$, represented by the red and orange vectors being stretched and lying in the $e_1$-$e_2$ plane, which is now embedded in a third dimension in the bottom-right of Figure.</li><li>$U$ performs a basis change in the codomain $\mathbb R^m$ from $\tilde C$ into the canonical basis of $\mathbb R^m$, represented by a rotation of the red and orange vectors out of the $e_1$-$e_2$ plane. This is shown in the top-right of Figure.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407301732634.png" alt="SVD is interpreted as linear mapping"></p></li><li><p>Compare the eigendecomposition of an SPD matrix</p><script type="math/tex; mode=display">S=S^T=PDP^T</script><p>with the corresponding SVD</p><script type="math/tex; mode=display">S=U\varSigma V^T</script><p>If we set</p><script type="math/tex; mode=display">U = P = V , D = Σ,</script><p>we see that the SVD of SPD matrices is their eigendecomposition.</p></li></ul><blockquote><p>e.g. <strong>Computing the SVD</strong></p><script type="math/tex; mode=display">A=\left[\begin{matrix}1& 0& 1\\-2& 1& 0\end{matrix}\right]</script><p>The SVD requires us to compute the right-singular vectors $v_j$, the singular values $σ_k$, and the left-singular vectors $u_i$.</p><p><strong>Step 1: Right-singular vectors as the eigenbasis of $A^⊤A$.</strong></p><p>We start by computing</p><script type="math/tex; mode=display">A^TA=\left[\begin{matrix}1& -2\\0& 1\\1& 0\end{matrix}\right]\left[\begin{matrix}1& 0& 1\\-2& 1& 0\end{matrix}\right]=\left[\begin{matrix}5& -2& 1\\-2& 1& 0\\1& 0& 1\end{matrix}\right]</script><p>We compute the singular values and right-singular vectors $v_j$ through the <strong>eigenvalue decomposition</strong> of $A^⊤A$, which is given as</p><script type="math/tex; mode=display">A^TA=\left[\begin{matrix}\frac{5}{\sqrt{30}}& 0& \frac{-1}{\sqrt{6}}\\\frac{-2}{\sqrt{30}}& \frac{1}{\sqrt{5}}& \frac{-2}{\sqrt{6}}\\\frac{1}{\sqrt{30}}& \frac{2}{\sqrt{5}}& \frac{1}{\sqrt{6}}\end{matrix}\right]\left[\begin{matrix}6& 0& 0\\0& 1& 0\\0& 0& 0\end{matrix}\right]\left[\begin{matrix}\frac{5}{\sqrt{30}}& \frac{-2}{\sqrt{30}}& \frac{1}{\sqrt{30}}\\0& \frac{1}{\sqrt{5}}& \frac{2}{\sqrt{5}}\\\frac{-1}{\sqrt{6}}& \frac{-2}{\sqrt{6}}& \frac{1}{\sqrt{6}}\end{matrix}\right]=PDP^T</script><p>and we obtain the right-singular vectors as the columns of $P$ so that</p><script type="math/tex; mode=display">V=P=\left[\begin{matrix}\frac{5}{\sqrt{30}}& 0& \frac{-1}{\sqrt{6}}\\\frac{-2}{\sqrt{30}}& \frac{1}{\sqrt{5}}& \frac{-2}{\sqrt{6}}\\\frac{1}{\sqrt{30}}& \frac{2}{\sqrt{5}}& \frac{1}{\sqrt{6}}\end{matrix}\right]</script><p><strong>Step 2: Singular-value matrix.</strong></p><p>As the singular values $σ_i$ are the square roots of the eigenvalues of $A^⊤A$ we obtain them straight from $D$. Since $rk(A) = 2$, there are only two nonzero singular values: $σ1 = \sqrt6$and $σ_2 = 1$. The singular value matrix must be the same size as $A$, and we obtain</p><script type="math/tex; mode=display">\varSigma = \left[\begin{matrix}\sqrt 6& 0& 0\\0& 1& 0\end{matrix}\right]</script><p><strong>Step 3: Left-singular vectors as the normalized image of the right-singular vectors.</strong></p><p>We find the left-singular vectors by computing the image of the right-singular vectors under $A$ and normalizing them by dividing them by their corresponding singular value. We obtain</p><script type="math/tex; mode=display">\begin{split}u_1&=\frac{1}{\sigma_1}Av_1=\frac{1}{\sqrt 6}\left[\begin{matrix}1& 0& 1\\-2& 1& 0\end{matrix}\right]\left[\begin{matrix}\frac{5}{\sqrt{30}}\\\frac{-2}{\sqrt{30}}\\\frac{1}{\sqrt{30}}\\\end{matrix}\right]=\left[\begin{matrix}\frac{1}{\sqrt{5}}\\\frac{-2}{\sqrt{5}}\end{matrix}\right]\\u_2&=\frac{1}{\sigma_2}Av_2=\frac{1}{1}\left[\begin{matrix}1& 0& 1\\-2& 1& 0\end{matrix}\right]\left[\begin{matrix}0\\\frac{1}{\sqrt{5}}\\\frac{2}{\sqrt{5}}\\\end{matrix}\right]=\left[\begin{matrix}\frac{2}{\sqrt{5}}\\\frac{1}{\sqrt{5}}\end{matrix}\right]\\U&=[u_1,u_2]=\frac{1}{\sqrt 5}\left[\begin{matrix}1& 2\\-2& 1\end{matrix}\right]\end{split}</script><p>Note that on a computer the approach illustrated here has poor numerical behavior, and the SVD of $A$ is normally computed without resorting to the eigenvalue decomposition of $A^⊤A$.</p></blockquote><ul><li><p><strong>Eigenvalue Decomposition vs. Singular Value Decomposition</strong></p><ul><li>the eigendecomposition $A = PDP^{−1}$ and the SVD $A = UΣV^⊤$</li><li>The SVD always exists for any matrix $\mathbb R^{m×n}$. The eigendecomposition is only defined for square matrices $\mathbb R^{n×n}$ and only exists if we can find a basis of eigenvectors of $\mathbb R^n$.</li><li>The vectors in the eigendecomposition matrix $P$ are not necessarily orthogonal, i.e., the change of basis is not a simple rotation and scaling. On the other hand, the vectors in the matrices $U$ and $V$ in the SVD are orthonormal, so they do represent rotations.</li><li>Both the eigendecomposition and the SVD are compositions of three linear mappings:<ul><li>Change of basis in the domain</li><li>Independent scaling of each new basis vector and mapping from domain to codomain</li><li>Change of basis in the codomain</li></ul></li><li>A key difference between the eigendecomposition and the SVD is that in the SVD, domain and codomain can be vector spaces of different dimensions.</li><li>In the SVD, the left- and right-singular vector matrices $U$ and $V$ are generally not inverse of each other (they perform basis changes in different vector spaces). In the eigendecomposition, the basis change matrices $P$ and $P^{−1}$ are inverses of each other.</li><li>In the SVD, the entries in the diagonal matrix $Σ$ are all real and non-negative, which is not generally true for the diagonal matrix in the eigendecomposition.</li><li>The SVD and the eigendecomposition are closely related through their projections<ul><li>The left-singular vectors of $A$ are eigenvectors of $AA^⊤$</li><li>The right-singular vectors of $A$ are eigenvectors of $A^⊤A$.</li><li>The nonzero singular values of $A$ are the square roots of the nonzero eigenvalues of both $AA^⊤$ and $A^⊤A$.</li></ul></li><li>For symmetric matrices $A ∈ \mathbb R^{n×n}$, the eigenvalue decomposition and the SVD are one and the same, which follows from the spectral theorem.</li></ul></li><li><p>Different versions of SVD in the literature</p><ul><li><p><strong><em>the full SVD</em></strong>: having two square left- and right-singular vector matrices, but a non-square singular value matrix.</p></li><li><p><strong><em>the reduced SVD</em></strong>:  Some authors define the SVD a bit differently and focus on square singular matrices. Then, for $A ∈ \mathbb R^{m×n}$ and $m ⩾ n$,</p><script type="math/tex; mode=display">\underset{m\times n}{A}=\underset{m\times n}{U}\;\underset{n\times n}{\varSigma}\;\underset{n\times n}{V^T}</script></li><li><p><strong><em>the truncated SVD</em></strong>: matrix approximation techniques using the SVD</p></li></ul></li></ul><h2 id="Matrix-Approximation"><a href="#Matrix-Approximation" class="headerlink" title="Matrix Approximation"></a>Matrix Approximation</h2><ul><li><p>We construct a rank-$1$ matrix $A_i ∈ \mathbb R^{m×n}$ as </p><script type="math/tex; mode=display">A_i:=u_iv_i^T</script><p>which is formed by the outer product of the $i$th orthogonal column vector of $U$ and $V$.</p><p>A matrix $A ∈ \mathbb R^{m×n}$ of rank $r$ can be written as a sum of rank-$1$ matrices $A_i$ so that</p><script type="math/tex; mode=display">A=\sum_{i=1}^r{\sigma_iu_iv_i^T}=\sum_{i=1}^r{\sigma_iA_i}</script><p>where the outer-product matrices $A_i$ are weighted by the ith singular value $σ_i$.</p><p>We summed up the $r$ individual rank-$1$ matrices to obtain a rank-$r$ matrix $A$; If the<br>sum does not run over all matrices $A_i, i = 1, . . . , r$, but only up to an intermediate value $k &lt; r$, we obtain a <strong><em>rank-$k$ approximation</em></strong></p><script type="math/tex; mode=display">\hat A(k)=\sum_{i=1}^k{\sigma_iu_iv_i^T}=\sum_{i=1}^k{\sigma_iA_i}</script><p>of $A$ with $rk(\hat A(k)) = k$</p><p>To measure the difference (error) between $A$ and its rank-$k$ approximation $\hat A(k)$, we need the notion of a norm.</p></li><li><p>Figure shows low-rank approximations $\hat A(k)$ of an original image $A$ of Stonehenge. The shape of the rocks becomes increasingly visible and clearly recognizable in the rank-$5 $approximation. While the original image requires $1, 432 · 1, 910 = 2, 735, 120$ numbers,<br>the rank-$5$ approximation requires us only to store the five singular values and the five left- and right-singular vectors ($1, 432$ and $1, 910$-dimensional each) for a total of $5 · (1, 432+1, 910+1) = 16, 715$ numbers – just above $0.6%$ of the original.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407301732935.png" alt="low-rank approximations of image"></p></li><li><p><strong>Spectral Norm of a Matrix</strong>: For $x ∈ \mathbb R^n\backslash\{0\}$, the <em>spectral norm</em> of a matrix $A ∈ \mathbb R^{m×n}$ is defined as</p><script type="math/tex; mode=display">\left\|A\right\|_2=\underset{x}{max}\frac{\left\|Ax\right\|_2}{\left\|x\right\|_2}</script><p>The spectral norm determines how long any vector $x$ can at most become when multiplied by $A$.</p></li><li><p>The spectral norm of $A$ is its <em>largest singular value</em> $σ_1$.</p></li><li><p><strong>Eckart-Young Theorem</strong>: Consider a matrix $A ∈ \mathbb R^{m×n}$ of rank $r$ and let $B ∈ \mathbb R^{m×n}$ be a matrix of rank $k$. For any $k ⩽ r$ with $\hat A(k)=\sum_{i=1}^k{\sigma_iu_iv_i^T}$ it holds that</p><script type="math/tex; mode=display">\hat A(k)=argmin_{rk(B)=k}\left\|A-B\right\|_2,\\\left\|A-\hat A(k)\right\|_2=\sigma_{k+1}</script><p>The Eckart-Young theorem states explicitly how much error we introduce by approximating $A$ using a rank-$k$ approximation. We can interpret the rank-$k$ approximation obtained with the SVD as a projection of the full-rank matrix $A$ onto a lower-dimensional space of rank-at-most-$k$ matrices. Of all possible projections, the SVD minimizes the error (with respect to the spectral norm) between $A$ and any rank-$k$ approximation.</p></li></ul><blockquote><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> AnalyticGeometry </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之模拟登录</title>
      <link href="/2024/07/30/scrapy-pa-chong-xi-lie-zhi-mo-ni-deng-lu/"/>
      <url>/2024/07/30/scrapy-pa-chong-xi-lie-zhi-mo-ni-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h1><ul><li>在实际的爬虫作业中，由于一些网站的授权机制，某些内容只能登录后查看，或对非登录限制访问，因此模拟登录在爬虫中经常用到。在使用Scrapy 处理这种情况时，我们既可以<strong>使用表单进行模拟登录</strong>，又可以<strong>直接使用Cookie进行验证</strong>。</li></ul><h2 id="模拟提交表单"><a href="#模拟提交表单" class="headerlink" title="模拟提交表单"></a>模拟提交表单</h2><ul><li><p>在Scrapy 中，模拟提交表单需要用到 Request 的 <code>FormRequest</code>子类，与 Request 相比，FormRequest 多了一个<code>formdata</code> 参数，此项参数为要填充的HTML表单，是一个字典类型数据，或者可迭代的(key,value)型元组数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>items <span class="token keyword">import</span> ExampleItem<span class="token keyword">class</span> <span class="token class-name">ExampleSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"example.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.example.com'</span> <span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment">#先登录</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            scrapy<span class="token punctuation">.</span>FormRequest <span class="token punctuation">(</span>                <span class="token string">"http://www.example.com/login"</span><span class="token punctuation">,</span>                <span class="token comment">#传递表单数据</span>                formdata<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'user'</span> <span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span> <span class="token punctuation">:</span> <span class="token string">'secret'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">#回调函数</span>                callback<span class="token operator">=</span>self<span class="token punctuation">.</span>login_check<span class="token punctuation">)</span>         <span class="token punctuation">]</span>    <span class="token comment">#检查是否登录成功</span>    <span class="token keyword">def</span> <span class="token function">login_check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token comment">#如果登录成功，则从start_url生成Request，调用parse_page进行解析</span>        <span class="token keyword">if</span> <span class="token string">"Login failed"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>body <span class="token punctuation">:</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>    <span class="token comment">#解析页面</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        item <span class="token operator">=</span> ExampleItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">".name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>某些网站的登录页面中会有一些含有默认值的隐藏的表单字段包含在<code>&lt;.input type="hidden"&gt;</code>元素中，如会话数据、认证信息等。我们在抓取数据时，并不需要了解这些默认数据的生成方法，只需关注需要手动录入数据的字段，如用户名、密码等。这时可以使用from_response()方法。</p><ul><li><p><code>classmethod from_response(response[, formname=None，formid=None,formnumber=0，formdata=None，formxpath=None，formcss=None，clickdata=None,dont_click=False, ...])</code></p></li><li><p><strong>response</strong>:包含待填充数据的HTML表单。</p></li><li><p><strong>formname</strong>:如果指定了formname值，那么将使用name属性为此值的表单。</p></li><li><p><strong>formid</strong>:如果指定了formid值，那么将使用id属性为此值的表单。</p></li><li><p><strong>formnumer</strong>:如果指定了formmumber值，那么将使用序号为此值的表单，第一个表单序号为0。</p></li><li><p><strong>formxpath</strong>:如果指定了formxpath，就使用该XPath表达式匹配的第一个form表单。</p></li><li><p><strong>formcss</strong>:如果指定了formcss，就使用该CSS表达式匹配的第一个form表单。</p></li><li><p><strong>formdata</strong>:表单填充数据，如果某个字段在Response 中已经存在值，那么将会被覆盖;如果某个字段传递的是None，那么该字段不会包含在生成的Request中。</p></li><li><p><strong>clickdata</strong>:指定表单中的单击事件，如果没有指定，就会通过模拟单击表单中第一个可单击元素进行表单数据提交。</p></li><li><p><strong>dont_click</strong>:如果指定为True，该表单就不会通过单击任何元素来操作而直接提交。</p></li><li><p>from_response()是通过模拟自动单击表单中的可单击元素(如<code>&lt;input type="submit"&gt;</code>)来进行表单数据提交的，生成一个Request。虽然很方便，但仍存在一些问题，例如，如果表单数据是通过JavaScript来进行交互操作的，那么from_response()的默认提交操作就不合适了。这时就可以设置don’t_click=True来禁用自动单击提交功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">LoginSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example.com'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"http://www.example.com/users/login.php"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response <span class="token punctuation">(</span>                response<span class="token punctuation">,</span>                <span class="token comment">#传递表单数据</span>                formdata<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'user'</span> <span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span> <span class="token punctuation">:</span> <span class="token string">'secret'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">#回调函数</span>                callback<span class="token operator">=</span>self<span class="token punctuation">.</span>after_login<span class="token punctuation">)</span>             <span class="token comment">#检查是否登录成功</span>    <span class="token keyword">def</span> <span class="token function">after_login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"authentication failed"</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>body <span class="token punctuation">:</span>            self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"Login failed"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token comment"># 执行登陆成功后的操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="用Cookie模拟登录状态"><a href="#用Cookie模拟登录状态" class="headerlink" title="用Cookie模拟登录状态"></a>用Cookie模拟登录状态</h2><ul><li>使用Cookie实现登录其实就是把已登录的信息（用户名、密码及其他验证信息）一起发给服务器做验证。优点是不需要知道登录URL和表单字段，也不需要了解登录过程和其他细节，即可实现必须登录后查看的目标网页的数据采集。不足之处是Cookie有有效期限制，有效期过后，需要重新获取Cookie 的值。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>items <span class="token keyword">import</span> ExampleItem<span class="token keyword">class</span> <span class="token class-name">ExampleSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example'</span>    allowed_domains <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"example.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.example.com'</span> <span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment">#先登录</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#Cookies数据</span>        cookies <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'uid'</span> <span class="token punctuation">:</span> <span class="token string">'"1083428ut78j8"'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'30'</span><span class="token punctuation">}</span>        <span class="token comment">#头信息</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Connection '</span> <span class="token punctuation">:</span> <span class="token string">'keep-alive '</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; win64; x64) ApplewebKit/537.36 22 (KHTML,like Gecko)Chrome/72.0.3626.121 safari/537.36'</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>            scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span><span class="token string">"http://www.example.com/articles"</span><span class="token punctuation">,</span>                               <span class="token comment">#使用Cookies</span>                               cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>                               <span class="token comment">#指定头信息</span>                               headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>                               <span class="token comment">#指定回调函数</span>                               callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span> <span class="token punctuation">]</span>     <span class="token comment">#解析页面</span>     <span class="token keyword">def</span> <span class="token function">parse_page</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        item <span class="token operator">=</span> ExampleItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">".name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Decompositions01</title>
      <link href="/2024/07/29/matrixdecompositions01/"/>
      <url>/2024/07/29/matrixdecompositions01/</url>
      
        <content type="html"><![CDATA[<h1 id="Matrix-Decompositions01"><a href="#Matrix-Decompositions01" class="headerlink" title="Matrix Decompositions01"></a>Matrix Decompositions01</h1><h2 id="Determinant-and-Trace"><a href="#Determinant-and-Trace" class="headerlink" title="Determinant and Trace"></a>Determinant and Trace</h2><ul><li><p><strong>Determinants</strong> $det(A)$ are only defined for square matrices $A ∈ \mathbb R^{n×n}$.</p></li><li><p>For any square matrix $A ∈ \mathbb R^{n×n}$ it holds that $A$ is invertible if and only if $det(A) \ne 0$.</p></li><li><p>Determinants</p><ul><li>For $n=1$,    $det(A)=det(a_{11})=a_{11}$</li><li>For $n=2$,    $det(A)=\left|\begin{matrix}a_{11}&amp;a_{12}\\a_{21}&amp;a_{22}\end{matrix}\right|=a_{11}a_{22}-a_{12}a_{21}$</li><li>For $n=3$,   $\left|\begin{matrix}a_{11}&amp;a_{12}&amp;a_{13}\\a_{21}&amp;a_{22}&amp;a_{23}\\a_{31}&amp;a_{32}&amp;a_{33}\end{matrix}\right|=a_{11}a_{22}a_{33}+a_{21}a_{32}a_{13}+a_{31}a_{12}a_{23}-a_{31}a_{22}a_{13}-a_{11}a_{32}a_{23}-a_{21}a_{12}a_{33}$</li></ul></li><li><p>We call a square matrix $T$ an <em>upper-triangular</em> matrix if $T_{ij} = 0$ for $i &gt; j$, i.e., the matrix is zero below its diagonal. Analogously, we define a <em>lower-triangular</em> matrix as a matrix with zeros above its diagonal. <strong>For a triangular matrix $T ∈ \mathbb R^{n×n}$, the determinant is the product of the diagonal elements</strong>, i.e.,</p><script type="math/tex; mode=display">det(T)=\prod_{i=1}^{n}{T_{ii}}</script></li><li><p><strong>Laplace Expansion</strong>: Consider a matrix $A ∈ \mathbb R^{n×n}$. Then, for all $j = 1, . . . , n$:</p><ol><li><p>Expansion along column $j$</p><script type="math/tex; mode=display">det(A)=\sum_{k=1}^{n}{(-1)^{k+j}a_{kj}det(A_{k,j})}</script></li><li><p>Expansion along row $j$</p><script type="math/tex; mode=display">det(A)=\sum_{k=1}^{n}{(-1)^{k+j}a_{jk}det(A_{j,k})}</script></li></ol><p>Here $A_{k,j} ∈ \mathbb R^{(n−1)×(n−1)}$ is the submatrix of $A$ that we obtain when deleting row $k$ and column $j$.  ($det(A_{k,j})$ is called a <em>minor</em> and $(−1)^{k+j} det(A_{k,j})$ a <em>cofactor</em>.)</p><blockquote><p>e.g. </p><script type="math/tex; mode=display">A=\left[\begin{matrix}1& 2& 3\\3& 1& 2\\0& 0& 1\end{matrix}\right]</script><script type="math/tex; mode=display">\begin{split}det(A)&=\left|\begin{matrix}1& 2& 3\\3& 1& 2\\0& 0& 1\end{matrix}\right| \\&= (-1)^{1+1} \cdot1\left|\begin{matrix}1& 2\\0& 1\end{matrix}\right| + (-1)^{1+2} \cdot2\left|\begin{matrix}3& 2\\0& 1\end{matrix}\right| +(-1)^{1+3} \cdot3\left|\begin{matrix}3& 1\\0& 0\end{matrix}\right| \\&= 1(1-0)-2(3-0)+3(0-0)=-5\end{split}</script></blockquote></li><li><p>For $A ∈ \mathbb R^{n×n}$ the determinant exhibits the following properties:</p><ul><li>The determinant of a matrix product is the product of the corresponding determinants, $det(AB) = det(A)det(B)$.</li><li>Determinants are invariant to transposition, i.e., $det(A) = det(A^⊤)$.</li><li>If $A$ is regular (invertible), then $det(A^{−1}) =\frac{1}{det(A)}$ .</li><li>Similar matrices possess the same determinant. Therefore, for a linear mapping $Φ : V → V$ all transformation matrices $A_Φ$ of $Φ$ have the same determinant. Thus, the determinant is invariant to the choice of basis of a linear mapping.</li><li>Adding a multiple of a column/row to another one does not change $det(A)$.</li><li>Multiplication of a column/row with $λ ∈ \mathbb R$ scales $det(A)$ by $λ$. In particular, $det(λA) = λ^n det(A)$.</li><li>Swapping two rows/columns changes the sign of $det(A)$.</li></ul></li><li><p>We can use Gaussian elimination to compute $det(A)$ by bringing $A$ into row-echelon form.<br>We can stop Gaussian elimination when we have $A$ in a triangular form where the elements below the diagonal are all $0$.</p></li><li><p>A square matrix $A ∈ \mathbb R^{n×n}$ has $det(A) \ne 0$ if and only if $rk(A) = n$. In other words, $A$ is invertible if and only if it is full rank.</p></li><li><p>The <strong>trace</strong> of a square matrix $A ∈ \mathbb R^{n×n}$ is defined as </p><script type="math/tex; mode=display">tr(A):=\sum_{i=1}^{n}{a_ii}</script><p>i.e. , the trace is the sum of the diagonal elements of $A$.</p></li><li><p>The trace satisfies the following properties:</p><ul><li>$tr(A+B)=tr(A)+tr(B)\;for\;A,B\in\mathbb R^{n\times n}$</li><li>$tr(\alpha A)=\alpha tr(A),\;\alpha\in\mathbb R\;for\;A\in \mathbb R^{n\times n}$</li><li>$tr(I_n)=n$</li><li>$tr(AB)=tr(BA)\;for\;A\in\mathbb R^{n\times k},B\in\mathbb R^{k\times n}$</li></ul></li><li><p>The trace is invariant under cyclic permutations</p><script type="math/tex; mode=display">tr(AKL)=tr(KLA),for\;A ∈ \mathbb R^{a×k},K ∈ \mathbb R^{k×l}, L ∈ \mathbb R^{l×a}.</script><p>This property generalizes to products of an arbitrary number of matrices.</p><p>As a special case , it follows that for two vectors $x, y ∈ \mathbb R^n$</p><script type="math/tex; mode=display">tr(xy^T)=tr(y^Tx)=y^Tx\in \mathbb R</script></li><li><p><strong>Matrix representations of linear mappings are basis dependent the trace of a linear mapping $Φ$ is independent of the basis.</strong> For a given basis of $V$, we can describe $Φ$ by means of the transformation matrix $A$. Then the trace of $Φ$ is the trace of $A$. For a different basis of $V$, it holds that the corresponding transformation matrix $B$ of $Φ$ can be obtained by a basis change of the form $S^{−1}AS$ for suitable $S$ . For the corresponding trace of $Φ$, this means</p><script type="math/tex; mode=display">tr(B)=tr(S^{-1}AS)=tr(ASS^{-1})=tr(A)</script></li><li><p><strong>Characteristic Polynomial</strong>:  For $λ ∈ \mathbb R$ and a square matrix $A ∈ \mathbb R^{n×n}$</p><script type="math/tex; mode=display">\begin{split}p_A(\lambda)&:=det(A-\lambda I)\\&=c_0+c_1\lambda+c_2\lambda^2+\cdots+c_{n-1}\lambda^{n-1}+(-1)^n\lambda^n\end{split}</script><p>$c_0, . . . , c_{n−1} ∈ \mathbb R$, is the <em>characteristic polynomial</em> of $A$. In particular,</p><script type="math/tex; mode=display">c_0=det(A),\\c_{n-1}=(-1)^{n-1}tr(A)</script></li></ul><h2 id="Eigenvalues-and-Eigenvectors"><a href="#Eigenvalues-and-Eigenvectors" class="headerlink" title="Eigenvalues and Eigenvectors"></a>Eigenvalues and Eigenvectors</h2><ul><li><p>Let $A ∈ \mathbb R^{n×n}$ be a square matrix. Then $λ ∈ \mathbb R$ is an <strong><em>eigenvalue</em></strong> of $A$ and $x ∈ \mathbb R^n\backslash\{0\}$ is the corresponding <strong><em>eigenvector</em></strong> of $A$ if</p><script type="math/tex; mode=display">Ax=\lambda x</script></li><li><p>The following statements are equivalent</p><ul><li>$λ$ is an eigenvalue of $A ∈ \mathbb R^{n×n}$.</li><li>There exists an $x ∈ \mathbb R^n\backslash\{0\}$ with $Ax = λx$, or equivalently, $(A −λI_n)x = 0$ can be solved non-trivially, i.e., $x \ne 0$.</li><li>$rk(A-\lambda I_n) &lt; n$</li><li>$det(A-\lambda I_n)=0$</li></ul></li><li><p><strong>Collinearity and Codirection</strong>: Two vectors that point in <strong>the same direction</strong> are called <strong><em>codirected</em></strong>. Two vectors are <strong><em>collinear</em></strong> if they point in the same or the opposite direction.</p></li><li><p><strong>Non-uniqueness of eigenvectors</strong>:  If $x$ is an eigenvector of $A$ associated with eigenvalue $λ$, then for any $c ∈ \mathbb R\backslash\{0\}$ it holds that $cx$ is an eigenvector of $A$ with the same eigenvalue since</p><script type="math/tex; mode=display">A(cx)=cAx=c\lambda x=\lambda(cx)</script><p>Thus, all vectors that are <em>collinear</em> to $x$ are also eigenvectors of $A$.</p></li><li><p>$λ ∈ \mathbb R$ is an eigenvalue of $A ∈ \mathbb R^{n×n}$ if and only if $λ$ is a root of the characteristic polynomial $p_A(λ)$ of $A$.</p></li><li><p>Let a square matrix $A$ have an eigenvalue $λ_i$. The algebraic multiplicity of $λ_i$ is the number of times the root appears in the characteristic polynomial.</p></li><li><p><strong>Eigenspace and Eigenspectrum</strong>: For $A ∈ \mathbb R^{n×n}$, the set of all eigenvectors of $A $ associated with an eigenvalue $λ$ spans a subspace of $\mathbb R^n$, which is called the <strong>eigenspace</strong> of $A$ with respect to $λ$ and is denoted by $E_λ$. The set of all eigenvalues of $A$ is called the <strong>eigenspectrum</strong>, or just <strong>spectrum</strong>, of $A$.<br>If $λ$ is an eigenvalue of $A ∈ \mathbb R^{n×n}$, then the corresponding eigenspace $E_λ$ is the solution space of the homogeneous system of linear equations $(A−λI)x = 0$.</p></li><li><p>The identity matrix $I ∈ \mathbb R^{n×n}$ has characteristic polynomial $p_I(λ) = det(I−λI) = (1−λ)^n = 0$, which has only one eigenvalue $λ = 1$ that occurs $n $times. Moreover, $Ix = λx = 1x$ holds for all vectors $x ∈ \mathbb R^n\backslash\{0\}$.Because of this, the sole eigenspace $E_1$ of the identity matrix spans $n$ dimensions, and all $n$ standard basis vectors of $\mathbb R^n$ are eigenvectors of $I$.</p></li><li><p>Useful properties regarding eigenvalues and eigenvectors include the following:</p><ul><li><p>A matrix $A$ and its transpose $A^⊤$ possess <strong>the same eigenvalues</strong>, but not necessarily the same eigenvectors.</p></li><li><p>The eigenspace $E_λ$ is the null space of $A− λI$ since</p><script type="math/tex; mode=display">Ax=\lambda x \Leftrightarrow Ax-\lambda x = 0\Leftrightarrow (A-\lambda I)x=0\Leftrightarrow x\in ker(A-\lambda I)</script></li><li><p>Similar matrices possess the same eigenvalues.Therefore, a linear mapping $Φ$ has eigenvalues that are independent of the choice of basis of its transformation matrix. <strong>This makes eigenvalues, together with the determinant and the trace, key characteristic parameters of a linear mapping as they are all invariant under basis change.</strong></p></li><li><p>Symmetric, positive definite matrices always have positive, real eigenvalues.</p></li></ul></li></ul><blockquote><p>e.g. Computing Eigenvalues, Eigenvectors, and Eigenspaces</p><p>the $2 × 2$ matrix $A=\left[\begin{matrix}4&amp; 2\\1&amp;3\end{matrix}\right]$</p><p><strong>Step 1: Characteristic Polynomial.</strong>From our definition of the eigenvector $x \ne 0$ and eigenvalue $λ$ of $A$, there will be a vector such that $Ax = λx$, i.e., $(A−λI)x = 0$. Since $x \ne 0$, this requires that the kernel (null space) of $A − λI$ contains more elements than just $0$. This means that $A− λI$ is not invertible and therefore $det(A− λI) = 0$. Hence, we<br>need to compute the roots of the characteristic polynomial  to find the eigenvalues.</p><p><strong>Step 2: Eigenvalues.</strong> The characteristic polynomial is</p><script type="math/tex; mode=display">\begin{split}p_A(\lambda)&=det(A-\lambda I)\\&=det(\left[\begin{matrix}4& 2\\1&3\end{matrix}\right]-\left[\begin{matrix}\lambda& 0\\0&\lambda\end{matrix}\right])=\left|\begin{matrix}4-\lambda& 2\\1&3-\lambda\end{matrix}\right|\\&=(4-\lambda)(3-\lambda)-2\end{split}</script><p>We factorize the characteristic polynomial and obtain</p><script type="math/tex; mode=display">p(λ) = (4 − λ)(3 − λ) − 2 · 1 = 10 − 7λ + λ^2 = (2 − λ)(5 − λ)</script><p>giving the roots $λ_1 = 2$ and $λ_2 = 5$.</p><p><strong>Step 3: Eigenvectors and Eigenspaces.</strong> We find the eigenvectors that correspond to these eigenvalues by looking at vectors $x$ such that</p><script type="math/tex; mode=display">\left[\begin{matrix}4-\lambda& 2\\1&3-\lambda\end{matrix}\right]x=0</script><p>For $λ = 5$ we obtain</p><script type="math/tex; mode=display">\left[\begin{matrix}4-5& 2\\1&3-5\end{matrix}\right]\left[\begin{matrix}x_1\\x_2\end{matrix}\right]=\left[\begin{matrix}-1& 2\\1&-2\end{matrix}\right]\left[\begin{matrix}x_1\\x_2\end{matrix}\right]=0</script><p>We solve this homogeneous system and obtain a solution space</p><script type="math/tex; mode=display">E_5=span[\left[\begin{matrix}2\\1\end{matrix}\right]]</script><p>This eigenspace is one-dimensional as it possesses a single basis vector.</p><p>Analogously, we find the eigenvector for $λ = 2$ by solving the homogeneous system of equations</p><script type="math/tex; mode=display">\left[\begin{matrix}4-2& 2\\1&3-2\end{matrix}\right]\left[\begin{matrix}x_1\\x_2\end{matrix}\right]=\left[\begin{matrix}2& 2\\1&1\end{matrix}\right]\left[\begin{matrix}x_1\\x_2\end{matrix}\right]=0</script><p>This means any vector $x =\left[\begin{matrix}x_1\\x_2\end{matrix}\right]$， where $x2 = −x1$, such as $\left[\begin{matrix}-1\\1\end{matrix}\right]$ is an eigenvector with eigenvalue $2$. The corresponding eigenspace is given as</p><script type="math/tex; mode=display">E_2=span[\left[\begin{matrix}1\\-1\end{matrix}\right]]</script></blockquote><ul><li><p>Let $λ_i$ be an eigenvalue of a square matrix $A$. Then the <em>geometric multiplicity</em> of $λ_i$ is the number of linearly independent eigenvectors associated with $λ_i$. In other words, it is the dimensionality of the eigenspace spanned by the eigenvectors associated with $λ_i$.</p></li><li><p>A specific eigenvalue’s geometric multiplicity must be at least one because every eigenvalue has at least one associated eigenvector. An eigenvalue’s geometric multiplicity cannot exceed its algebraic multiplicity, but it may be lower.</p></li><li><p>The eigenvectors $x_1, . . . , x_n$ of a matrix $A ∈ \mathbb R^{n×n}$ with $n$ distinct eigenvalues $λ_1, . . . , λ_n$ are linearly independent. This theorem states that eigenvectors of a matrix with $n$ distinct eigenvalues form a basis of $\mathbb R^n$.</p></li><li><p>A square matrix $A ∈ \mathbb R^{n×n}$ is <strong><em>defective</em></strong> if it possesses fewer than $n$ linearly independent eigenvectors. Specifically, a defective matrix has at least one eigenvalue $λ_i$ with an algebraic multiplicity $m &gt; 1$ and a geometric multiplicity of less than $m$.</p></li><li><p>Given a matrix $A ∈ \mathbb R^{m×n}$, we can always obtain <em>a symmetric, positive semidefinite matrix</em> $S ∈ \mathbb R^{n×n}$ by defining</p><script type="math/tex; mode=display">S:=A^TA</script><p>If $rk(A) = n$, then $S := A^⊤A$ is symmetric, positive definite.</p></li><li><p><strong>Spectral Theorem</strong>: If $A ∈ \mathbb R^{n×n}$ is symmetric, there exists an orthonormal basis of the corresponding vector space $V$ consisting of eigenvectors of $A$, and each eigenvalue is real.</p></li><li><p>The determinant of a matrix $A ∈ \mathbb R^{n×n}$ is the product of its eigenvalues, i.e.,</p><script type="math/tex; mode=display">det(A)=\prod_{i=1}^n{\lambda_i}</script><p>where $λ_i ∈ \mathbb C$ are (possibly repeated) eigenvalues of $A$.</p></li><li><p>The trace of a matrix $A ∈ \mathbb R^{n×n}$ is the sum of its eigenvalues, i.e.,</p><script type="math/tex; mode=display">tr(A)=\sum_{i=1}^n{\lambda_i}</script><p>where $λ_i ∈ \mathbb C$ are (possibly repeated) eigenvalues of $A$.</p></li><li><p>Google uses the eigenvector corresponding to the maximal eigenvalue of a matrix $A$ to determine the rank of a page for search.</p></li></ul><h2 id="Cholesky-Decomposition"><a href="#Cholesky-Decomposition" class="headerlink" title="Cholesky Decomposition"></a>Cholesky Decomposition</h2><ul><li><strong>Cholesky Decomposition</strong>： A symmetric, positive definite matrix $A$ can be factorized into a product $A = LL^⊤$, where $L$ is a <em>lower-triangular</em> matrix with <em>positive diagonal elements</em>:<script type="math/tex; mode=display">\left[\begin{matrix}a_{11}&\cdots&a_{1n}\\\vdots&\ddots&\vdots\\a_{n1}&\cdots&a_{nn}\end{matrix}\right] = \left[\begin{matrix}l_{11}&\cdots&0\\\vdots&\ddots&\vdots\\l_{n1}&\cdots&l_{nn}\end{matrix}\right]\left[\begin{matrix}l_{11}&\cdots&l_{n1}\\\vdots&\ddots&\vdots\\0&\cdots&l_{nn}\end{matrix}\right]</script>$L$ is called the <em>Cholesky factor</em> of $A$, and $L$ is unique.</li></ul><blockquote><p>e.g. <strong>Cholesky Factorization</strong></p><p>Consider a symmetric, positive definite matrix $A ∈ \mathbb R^{3×3}$. We are interested in finding its Cholesky factorization $A = LL^⊤$, i.e.,</p><script type="math/tex; mode=display">A=\left[\begin{matrix}a_{11}&a_{21}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\\\end{matrix}\right] = LL^T =\left[\begin{matrix}l_{11}&0&0\\l_{21}&l_{22}&0\\l_{31}&l_{32}&l_{33}\\\end{matrix}\right]\left[\begin{matrix}l_{11}&l_{21}&l_{31}\\0&l_{22}&l_{32}\\0&0&l_{33}\\\end{matrix}\right]</script><script type="math/tex; mode=display">A=\left[\begin{matrix}l_{11}^2&l_{21}l_{11}&l_{31}l_{11}\\l_{21}l_{11}&l_{21}^2+l_{22}^2&l_{31}l_{21}+l_{32}l_{22}\\l_{31}l_{11}&l_{31}l_{21}+l_{32}l_{22}&l_{31}^2+l_{32}^2+l_{33}^2\\\end{matrix}\right]</script><p>Comparing the left-hand side and the right-hand side shows that there is a simple pattern in the diagonal elements $l_{ii}$:</p><script type="math/tex; mode=display">l_{11}=\sqrt{a_{11}},\;l_{22}=\sqrt{a_{22}-l_{22}^2},\;l_{33}=\sqrt{a_{33}-(l_{31}^2+l_{32}^2)}</script><p>Similarly for the elements below the diagonal ($l_{ij}$, where $i &gt; j$), there is also a repeating pattern:</p><script type="math/tex; mode=display">l_{21}=\frac{1}{l_{11}}a_{21},\;l_{31}=\frac{1}{l_{11}}a_{31},\;l_{32}=\frac{1}{l_{22}}(a_{32}-l_{31}l_{21})</script></blockquote><ul><li>Given the Cholesky decomposition $A = LL^⊤$, we know that $det(A) = det(L) det(L^⊤) = det(L)^2$. Since $L$ is a triangular matrix, the determinant is simply the product of its diagonal entries so that $det(A) =\prod_i{l_{ii}^2}$</li></ul><h2 id="Eigendecomposition-and-Diagonalization"><a href="#Eigendecomposition-and-Diagonalization" class="headerlink" title="Eigendecomposition and Diagonalization"></a>Eigendecomposition and Diagonalization</h2><ul><li><p>A <em>diagonal matrix</em> is a matrix that has value zero on all off-diagonal elements, i.e., they are of the form</p><script type="math/tex; mode=display">D=\left[\begin{matrix}c_1&\cdots&0\\\vdots&\ddots&\vdots\\0&\cdots&c_n\end{matrix}\right]</script><p>They allow fast computation of determinants, powers, and inverses. The determinant is the product of its diagonal entries, a matrix power $D^k$ is given by each diagonal element raised to the power $k$, and the inverse $D^{−1}$ is the reciprocal of its diagonal elements if all of them are nonzero.</p></li><li><p><strong>Diagonalizable</strong>: A matrix $A ∈ \mathbb R^{n×n}$ is <em>diagonalizable</em> if it is similar to a diagonal matrix, i.e., if there exists an invertible matrix $P ∈ \mathbb R^{n×n}$ such that $D = P^{−1}AP$.</p></li><li><p>Let $A ∈ \mathbb R^{n×n}$, let $λ_1, . . . , λ_n$ be a set of scalars, and let $p_1, . . . , p_n$ be a set of vectors in $\mathbb R^{n×n}$. We define $P := [p_1, . . . , p_n]$ and let $D ∈ \mathbb R^{n×n}$ be a diagonal matrix with diagonal entries $λ_1, . . . , λ_n$. Then we can show that</p><script type="math/tex; mode=display">AP=PD</script><p>if and only if $λ_1, . . . , λ_n$ are the eigenvalues of $A$ and $p_1, . . . , p_n$ are corresponding eigenvectors of $A$.<br>Our definition of diagonalization requires that $P ∈ \mathbb R^{n×n}$ is invertible, i.e., $P$ has full rank . This requires us to have $n$ linearly independent eigenvectors $p_1, . . . , p_n$, i.e., the $p_i$ form a basis of $\mathbb R^{n×n}$.</p></li><li><p><strong>Eigendecomposition</strong>: A square matrix $A ∈ \mathbb R^{n×n}$ can be factored into</p><script type="math/tex; mode=display">A=PDP^{-1}</script><p>where $P ∈ \mathbb R^{n×n}$ and $D$ is a <em>diagonal matrix</em> whose diagonal entries are <em>the eigenvalues</em> of $A$, if and only if the eigenvectors of $A$ form a basis of $\mathbb R^{n×n}$.<br>It implies that only <em>non-defective</em> matrices can be diagonalized and that the columns of $P $are the $n$ eigenvectors of $A$.</p><blockquote><p>e.g. $A=\frac{1}{2}\left[\begin{matrix}<br>5&amp;-2\\<br>-2&amp;5<br>\end{matrix}\right]$</p><p><strong>Step 1: Compute eigenvalues and eigenvectors.</strong> The characteristic polynomial of $A$ is</p><script type="math/tex; mode=display">\begin{split}det(A− λI) &= det(\left[\begin{matrix}\frac{5}{2}-\lambda&-1\\-1&\frac{5}{2}-\lambda\end{matrix}\right]) \\&=(\frac{5}{2}-\lambda)^2-1=\lambda^2-5\lambda+\frac{21}{4}=(\lambda-\frac{7}{2})(\lambda-\frac{3}{2})\end{split}</script><p>Therefore, the eigenvalues of $A$ are $\lambda_1=\frac{7}{2}$and $\lambda_2=\frac{3}{2}$  (the roots of the characteristic polynomial), and the associated (normalized) eigenvectors are obtained via</p><script type="math/tex; mode=display">Ap_1=\frac{7}{2}p_1,\;Ap_2=\frac{3}{2}p_2</script><p>This yields</p><script type="math/tex; mode=display">p_1=\frac{1}{\sqrt{2}}\left[\begin{matrix}1\\-1\end{matrix}\right],\;\;p_2=\frac{1}{\sqrt{2}}\left[\begin{matrix}1\\1\end{matrix}\right]</script><p><strong>Step 2: Check for existence.</strong> The eigenvectors $p_1, p_2$ form a basis of $\mathbb R^2$. Therefore, $A$ can be diagonalized.</p><p><strong>Step 3: Construct the matrix $P$ to diagonalize $A$</strong>. We collect the eigenvectors of $A$ in $P$ so that</p><script type="math/tex; mode=display">P=[p_1,p_2]=\frac{1}{\sqrt{2}}\left[\begin{matrix}1&1\\-1&1\end{matrix}\right]</script><p>We then obtain</p><script type="math/tex; mode=display">P^{-1}AP=\left[\begin{matrix}\frac{7}{2}&0\\0&\frac{3}{2}\end{matrix}\right]</script></blockquote></li><li><p><strong>A symmetric matrix $S ∈ \mathbb R^{n×n}$ can always be diagonalized.</strong></p></li><li><p>Diagonal matrices $D$ can efficiently be raised to a power. Therefore, we can find a matrix power for a matrix $A ∈ \mathbb R^{n×n}$ via the eigenvalue decomposition (if it exists) so that</p><script type="math/tex; mode=display">A^k=(PDP^{-1})^k=PD^kP^{-1}</script></li><li><p>Assume that the eigendecomposition $A = PDP^{−1}$ exists. Then,</p><script type="math/tex; mode=display">\begin{split}det(A) &= det(PDP^{−1}) = det(P) det(D) det(P^{−1})\\&=det(D)=\prod_i{d_{ii}}\end{split}</script></li></ul><blockquote><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> AnalyticGeometry </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy配置与内置服务</title>
      <link href="/2024/07/28/scrapy-pa-chong-xi-lie-zhi-scrapy-pei-zhi-yu-nei-zhi-fu-wu/"/>
      <url>/2024/07/28/scrapy-pa-chong-xi-lie-zhi-scrapy-pei-zhi-yu-nei-zhi-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy配置与内置服务"><a href="#Scrapy配置与内置服务" class="headerlink" title="Scrapy配置与内置服务"></a>Scrapy配置与内置服务</h1><p>Scrapy框架中可以通过一系列的配置来定制组件，包括<strong>核心(Core)、插件（Extension)、管道(Pipeline）及 Spider组件</strong>。同时不同的内置服务也需要在配置中进行设定，如邮件服务等。进行合理的配置才能使Scrapy正常工作。</p><h2 id="Scrapy配置简介"><a href="#Scrapy配置简介" class="headerlink" title="Scrapy配置简介"></a>Scrapy配置简介</h2><ul><li><p>配置的基础结构提供了键值映射方式的全局命名空间，也就是说可以从任何位置访问这些属性。通过代码可以从中提取配置值。可以通过不同的机制来设定配置信息。</p></li><li><p><strong>命令行选项（优先级最高）</strong></p><ul><li>执行命令行命令时，如果在项目内执行，默认就使用<strong>项目内配置</strong>，即settings.py 中的配置信息，如果在项目外执行，就使用<strong>默认的命令行配置</strong>。不过在任何地方执行命令行命令，都可以使用命令行参数<code>-s</code> (或<code>--set</code>）来覆盖一个(或更多)配置信息，因为命令行的参数配置具有<strong>最高的优先级</strong></li><li><strong><code>scrapy crawl myspider -s LOG_FILE=scrapy.log</code></strong></li></ul></li><li><p><strong>每个爬虫内配置</strong></p><ul><li><p>项目内每一个编写的爬虫默认使用的都是项目配置，即 settings.py中的配置。但我们仍然可以为每一个爬虫设定不同的配置，比如有些爬虫需要调用某些中间件，而有些爬虫则不需要，只需要设定<code>custom_settings</code>即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span> <span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'myspider'</span>    custom_settings <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'SOME_SETTING'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>项目设置模块</strong></p><ul><li><p>通过scrapy startproject命令创建项目之后，都会生成一个settings.py文件，该文件就是该项目的配置文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Scrapy settings for crawlsoftware project</span><span class="token comment">#</span><span class="token comment"># For simplicity, this file contains only settings considered important or</span><span class="token comment"># commonly used. You can find more settings consulting the documentation:</span><span class="token comment">#</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/settings.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span><span class="token comment">#     https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span><span class="token comment"># Scrapy项目名字</span>BOT_NAME <span class="token operator">=</span> <span class="token string">"crawlsoftware"</span><span class="token comment"># Scrapy搜索spider的模块列表</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"crawlsoftware.spiders"</span><span class="token punctuation">]</span><span class="token comment"># 使用爬虫创建命令genspider创建爬虫时生成的模块</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">"crawlsoftware.spiders"</span><span class="token comment">#默认的USER_AGENT，使用BOT_NAME配置生成，建议覆盖</span><span class="token comment"># USER_AGENT = "crawlsoftware (+http://www.yourdomain.com)"</span><span class="token comment"># 如果启用，scrapy则会遵守网站Rebots.txt协议，建议设置为False</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 配置scrapy最大并发数，默认为32，一般需要增大设置</span>CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">32</span><span class="token comment"># 为同一个站点设置下载延迟</span><span class="token comment"># Configure a delay for requests for the same website (default: 0)</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay</span><span class="token comment"># See also autothrottle settings and docs</span><span class="token comment"># DOWNLOAD_DELAY = 3</span><span class="token comment"># 下载延迟的设置只会根据以下两个中的一个生效</span><span class="token comment"># 对单个网站设置最大的请求并发数</span><span class="token comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment"># 对单个IP设置最大的请求并发数</span><span class="token comment"># CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment"># 禁用Cookie，默认True启用，建议为False </span><span class="token comment"># COOKIES_ENABLED = False</span><span class="token comment"># Disable Telnet Console (enabled by default)</span><span class="token comment"># TELNETCONSOLE_ENABLED = False</span><span class="token comment"># 默认的请求头，根据爬取网站覆盖</span><span class="token comment"># DEFAULT_REQUEST_HEADERS = {</span><span class="token comment">#    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</span><span class="token comment">#    "Accept-Language": "en",</span><span class="token comment"># }</span><span class="token comment"># 启用Spider爬虫中间件</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span>SPIDER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment"># "crawlsoftware.middlewares.CrawlsoftwareSpiderMiddleware": 543,</span><span class="token punctuation">}</span><span class="token comment"># 启用Downloader下载器中间件</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'crawlsoftware.middlewares.CrawlsoftwareUserAgentMiddleware'</span><span class="token punctuation">:</span> <span class="token number">541</span><span class="token punctuation">,</span>    <span class="token string">'crawlsoftware.middlewares.CrawlsoftwareHttpProxyMiddleware'</span><span class="token punctuation">:</span> <span class="token number">542</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.middlewares.CrawlsoftwareDownloaderMiddleware"</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span>    <span class="token string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># 启用扩展</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/extensions.html</span>EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"scrapy.extensions.corestats.CoreStats"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.custom_core_stats.CustomCoreStats"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>  <span class="token comment"># 自定义信号收集器</span>    <span class="token string">'scrapy.extensions.closespider.CloseSpider'</span><span class="token punctuation">:</span> <span class="token number">501</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># 配置管道信息</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"crawlsoftware.pipelines.DefaultItemValuePipeline"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.pipelines.CrawlsoftwareMkdirPipeline"</span><span class="token punctuation">:</span> <span class="token number">397</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.pipelines.CrawlsoftwareFilePipeline"</span><span class="token punctuation">:</span> <span class="token number">398</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.pipelines.CrawlsoftwareImgPipeline"</span><span class="token punctuation">:</span> <span class="token number">399</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.pipelines.CrawlsoftwarePipeline"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    <span class="token string">"crawlsoftware.pipelines.CrawlsoftwareDBPipeline"</span><span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment"># 启用配置AutoThrottle扩展，默认禁用，建议启用</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/autothrottle.html</span><span class="token comment"># AUTOTHROTTLE_ENABLED = True</span><span class="token comment"># 初始化下载延迟</span><span class="token comment"># AUTOTHROTTLE_START_DELAY = 5</span><span class="token comment"># 高延迟下最大的下载延迟</span><span class="token comment"># AUTOTHROTTLE_MAX_DELAY = 60</span><span class="token comment"># scrapy请求应该并行发送每个远程服务器的平均数量</span><span class="token comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><span class="token comment"># 启用调试模式，统计每一个响应状态数据</span><span class="token comment"># AUTOTHROTTLE_DEBUG = False</span><span class="token comment"># 启用和配置HTTP缓存</span><span class="token comment"># See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><span class="token comment"># HTTPCACHE_ENABLED = True</span><span class="token comment"># HTTP缓存过期时间</span><span class="token comment"># HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment"># HTTP缓存目录</span><span class="token comment"># HTTPCACHE_DIR = "httpcache"</span><span class="token comment"># HTTP缓存忽略的响应状态码</span><span class="token comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment"># HTTP缓存存储目录</span><span class="token comment"># HTTPCACHE_STORAGE = "scrapy.extensions.httpcache.FilesystemCacheStorage"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>默认的命令行配置</strong></p><ul><li><p>在项目内使用命令行时，默认的配置为项目配置，在项目外使用命令行时，默认使用Scrapy全局配置。</p></li><li><p>在项目中使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span>scrapy settings <span class="token parameter variable">--get</span> BOT_NAMEscrapybot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在项目外使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token operator">&gt;</span>scrapy settings <span class="token operator">-</span><span class="token operator">-</span>get BOT_NAMEscrapybot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>默认全局配置（优先级最低)</strong></p><ul><li>Scrapy 默认全局配置是所有配置信息的基础，每种配置都是在此基础上进行覆盖的。可以通过<code>scrapy.settings.default_settings</code>访问全局配置。(https:/ldocs.scrapy.org/en/latest/topics/settings.html)。</li></ul></li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li><p>日志是查看程序运行状态的主要方法，特别是程序运行出错时，主要根据日志来检查错误，进行修正。Scrapy使用 Python 内置的日志系统记录事件日志，在使用日志功能之前需要先进行一些配置。</p><ul><li><code>LOG_FILE</code>:指定日志文件，如果为None，就使用标准错误输出。</li><li><code>LOG_ENABLED</code>:是否启用日志，为True时启用日志，为False时不启用。</li><li><code>LOG_ENCODING</code>:使用指定的编码方式输出日志，默认为UTF-8。</li><li><code>LOG_LEVEL</code>:日志记录的最低级别。可选的级别有CRITICAL、ERROR、WARNING、INFO、DEBUG。默认为DEBUG，打印所有记录。</li><li><code>LOG_FORMAT</code>:日志输出格式，默认为”%(asctime)s [%(name)s] %(levelname)s:%(message)s’。</li><li><code>LOG_DATEFORMAT</code>:日志日期记录格式，默认格式为%Y-%m-%d %H:%M:%S’。</li><li><code>LOG_STDOUT</code>:默认为False，如果为True，那么表示进程所有的标准输出（及错误）将被重定向到log中。例如执行print ‘hello’，其将会在Scrapy log中显示。</li></ul></li><li><p>Log使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">import</span> logginglogger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'LogTest'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning <span class="token punctuation">(</span><span class="token string">'warning message '</span><span class="token punctuation">)</span><span class="token comment"># WARNING: LogTest : warning message</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在每一个Scrapy爬虫实例中都提供了一个可以直接使用的logger</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'myspider'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://quotes.toscrape.com'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">'Parse function called on %s'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认的logger使用的是爬虫名称，也可以自己指定名称</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> scrapylogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'custom_logger'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'myspider'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://quotes.toscrape.com'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">'Parse function called on %s'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><ul><li><p>利用Scrapy提供的统计数据收集功能，以<code>key/value</code>方式，可以方便地统计一些特殊信息，包括指定数据的统计，比如特定的关键词、404页面等。Scrapy 提供的这种收集数据机制叫作<code>StatsCollection</code>。</p></li><li><p>数据收集器对每个Spider 保持一个<strong>状态表</strong>。当Spider启动时，该表自动打开;当Spider关闭时，该表自动关闭。</p></li><li><p>通过<code>stats</code>属性来使用数据收集器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ExtensionThatAccessstats</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stats <span class="token operator">=</span> stats    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span>crawler<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">return</span> cls<span class="token punctuation">(</span>crawler<span class="token punctuation">.</span>stats<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>stats属性有以下属性值可以配置</p><ul><li>设置数据：<code>stats.set_value('hostname',socket.gethostname)</code></li><li>增加数据值：<code>stats.inc_value('pages_crawled')</code></li><li>当新的值比原来的值大时设置数据：<code>stats.max_value('max_items_scraped',value)</code></li><li>当新的值比原来的值小时设置数据：<code>stats.min_value('min_free_memory_percent',value)</code></li><li>获取数据：<code>stats.get_value('pages_crawled')</code></li><li>获取所有数据：<code>stats.get_stats()</code> 返回字典</li></ul></li><li><p>spider中使用stats</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TagsSpider</span><span class="token punctuation">(</span>spider<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        self<span class="token punctuation">.</span>crawled<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>inc_value<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Scrapy内置可用的数据收集器除了基本的<code>StatsCollector</code>外，还有基于StatsCollector的其他数据收集器，可以通过<code>STATS_CLASS</code> 设置来选择。</p></li><li><p>Scrapy默认使用的是<code>MemoryStatsCollector</code></p><ul><li><code>class scrapy.statscollectors.MemoryStatsCollector</code></li><li>其在Spider运行完毕后将数据保存在内存中。数据可以通过<code>spider_stats</code>属性访问，该属性以字典类型保存了每个Spider最近一次爬取的状态的数据。</li></ul></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy中间件</title>
      <link href="/2024/07/28/scrapy-pa-chong-xi-lie-zhi-scrapy-zhong-jian-jian/"/>
      <url>/2024/07/28/scrapy-pa-chong-xi-lie-zhi-scrapy-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy中间件"><a href="#Scrapy中间件" class="headerlink" title="Scrapy中间件"></a>Scrapy中间件</h1><h2 id="自定义Spider中间件"><a href="#自定义Spider中间件" class="headerlink" title="自定义Spider中间件"></a>自定义Spider中间件</h2><ul><li><p>Spider中间件(Middleware)是介于Scrapy引擎与Spider中间的处理机制的钩子框架,可以添加代码来处理发送给Spiders的Response及Spider产生的Item和 Request。</p></li><li><p>启用Spider中间件时,需要将其加入<code>SPIDER_MIDDLEWARES</code>设置中。该设置位于settings.py文件中，是<strong>字典</strong>类型的，其中键为中间件的路径，值为中间件的顺序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">SPIDER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'myproject.middlewares.MySpiderMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">510</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自定义在settings.py中的中间件设置会与Scrapy内置的SPIDER_MIDDWARES_BASE 设置<strong>合并</strong>(但不是覆盖），然后根据顺序（order）进行排序，最后得到启用中间件的有序列表:<strong>第一个中间件是最靠近引擎的，最后一个中间件是最靠近Spider的。</strong></p></li><li><p>注意，关于如何分配中间件的顺序，请查看下面的<code>SPIDER_MIDDLEWARES_BASE</code>设置，而后根据要放置中间件的位置选择一个值。由于每个中间件执行不同的动作，自定义的中间件可能会依赖于之前(或者之后)执行的中间件，因此顺序是很重要的，如果不能确定自己的自定义中间件应该靠近哪个方向，就在<strong>500-700</strong>之间选择最为妥当。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Scrapy内置SPIDER_MIDDWARES_BASE:</span><span class="token string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token string">'scrapy.spidermiddlewares.offsite.offsiteMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span><span class="token string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span><span class="token string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想禁止内置的中间件，就必须在项目的SPIDER_MIDDLEWARES 设置中定义该中间件，并将其值赋为<strong><code>None</code></strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 关闭off-site 中间件</span>SPIDER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'myproject.middlewares.MySpiderMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">510</span><span class="token punctuation">,</span><span class="token string">'scrapy.contrib.spidermiddleware.offsite.offsiteMiddleware'</span> <span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Spider中间件与管道类似，每个中间件组件都实现了以下一个或多个方法的 Python类。</p><ul><li><strong><code>process_spider_input(response,spider)</code></strong><ul><li>当参数response通过参数spider中间件时，该方法被调用，处理该response，即在下载器中间件处理完成后，马上要<strong>进入某个回调函数parse_xx()前被调用</strong>。</li><li><strong>response</strong> ( Response对象):被处理的Response。</li><li><strong>spider</strong> ( Spider对象):该Response对应的Spider。</li><li>该方法应该返回<strong>None</strong>或者<strong>抛出一个异常</strong>。如果其返回None，Scrapy将会<strong>继续处理</strong>该Response，调用所有其他的中间件直到Spider处理该Response。如果其抛出一个异常(exception) ,Scrapy将<strong>不会调用</strong>任何其他中间件的 process_spider_iuput()方法，而是调用Request的<strong>errback</strong>。erback 的输出将会从另一个方向被<strong>重新输入中间件链</strong>中，使用<strong>process _spider_output()</strong>方法来处理，当其抛出异常时调用<strong>process_spider_exception()</strong>。</li></ul></li><li><strong><code>process_spider_output(response,result,spider)</code></strong><ul><li>当Spider处理完毕Response返回result时,即在爬虫运行<strong>yield item</strong>或者<strong>yield scrapy.Request()</strong>的时候调用该方法。</li><li><strong>response</strong> ( Response对象):生成该输出的Response。</li><li><strong>result</strong>(包含Request或Item对象的可迭代对象):Spider 返回的result。</li><li><strong>spider</strong> ( Spider对象):结果被处理的Spider。</li><li>该方法必须返回包含<strong>Request或Item对象的可迭代对象</strong>。如果是Item，就会被交给<strong>Pipeline</strong>;如果是Request，就会被交给<strong>调度器</strong>，然后下载器中间件才会开始运行。</li></ul></li><li><strong><code>process_spider_exception(response,exception,spider)</code></strong><ul><li>当spider或(其他spider 中间件的)process_spider_input()抛出异常时，该方法被调用。</li><li><strong>response</strong> ( Response对象):异常抛出时处理的Response。</li><li><strong>exception</strong> ( Exception对象):抛出的异常。</li><li><strong>spider</strong> ( Spider对象):抛出异常的Spider。</li><li>该方法必须返回<strong>None</strong>或者一个<strong>包含Response或 Item对象</strong>的可迭代对象(iterable)。如果返回 None ，Scrapy将<strong>继续处理该异常</strong>，调用中间件链中的其他中间件的process_spider_exception()方法，直到所有中间件都被调用，该异常到达引擎（异常将被记录并被忽略）。如果其返回一个可迭代对象，那么中间件链的 <strong>process_spider_output()</strong>方法将被调用，其他的中间件的 process_spider_exception()将不会被调用。</li></ul></li><li><strong><code>process_start_requests(start_requests, spider)</code></strong><ul><li>该方法以Spider 启动的Request为参数被调用。</li><li><strong>start_requests</strong> (包含Request的可迭代对象): start requests 列表。</li><li><strong>spider</strong> ( Spider对象):启动start requests 的Spider。</li><li>该方法接收的是一个<strong>可迭代对象(start_requests参数)</strong>，而且必须返回一个<strong>包含Request对象的可迭代对象。</strong></li></ul></li></ul></li></ul><h2 id="Spider内置中间件"><a href="#Spider内置中间件" class="headerlink" title="Spider内置中间件"></a>Spider内置中间件</h2><ul><li><p><strong>DepthMiddleware 爬取深度中间件</strong></p><ul><li><strong><code>class scrapy.contrib.spidermiddleware.depth.DepthMiddleware</code></strong></li><li>DepthMiddleware是一个用于追踪被爬取网站中每个 Request 的<strong>爬取深度</strong>的中间件。深度是<strong>start_urls中定义URL的相对值,也就是相对URL的深度</strong>。例如定义URL为<a href="http://www.example.com/article/，设置DEPTH_LIMIT=1，那么限制爬取的只能是此URL下一级的网页。">http://www.example.com/article/，设置DEPTH_LIMIT=1，那么限制爬取的只能是此URL下一级的网页。</a></li><li>它可用于<strong>限制爬取的最大深度，并根据深度控制请求优先级</strong>等。</li><li>DepthMiddleware可以通过下列设置进行配置:<ul><li><code>DEPTH_LIMIT</code>: 爬取所允许的最大深度，如果为0，就没有限制。</li><li><code>DEPTH_STATS</code>: 是否收集爬取深度统计数据。</li><li><code>DEPTH_PRIORITY</code>: 是否根据Request深度对其安排优先级。</li></ul></li></ul></li><li><p><strong>HttpErrorMiddleware 失败请求处理中间件</strong></p><ul><li><p><strong><code>class scrapy.contrib.spidermiddleware.httperror.HttpErrorMiddleware</code></strong></p></li><li><p>过滤出所有失败（错误）的 HTTP Response，爬虫不需要消耗更多的资源，设置更为复杂的逻辑来处理这些异常Request。根据HTTP标准，返回值在200~300的为成功的 Response。</p></li><li><p>如果想处理在这个范围之外的 Response，可以通过Spider 的 handle_httpstatus_list属性或HTTPERROR_ALLOWED_CODES设置来指定Spider能处理的Response返回值。</p></li><li><p>如果想要处理返回值为404的Response</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>handle_httpstatus_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">404</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Request.meta 中的 handle_httpstatus_list键也可以用来指定每个请求所允许的响应码。也可以设置handle_httpstatus_all键值为True来处理任何响应状态码的请求。</p></li><li><p>HttpErrorMiddleware部分设置项:</p><ul><li><code>HTTPERROR_ALLOWED_CODES</code>: 默认为[]，传递该列表中所有非200状态码的Response。</li><li><code>HTTPERROR_ALLOW_ALL</code>: 默认为False，传递所有Response，无论其状态码为何值。</li></ul></li></ul></li><li><p><strong>OffsiteMiddleware过滤请求中间件</strong></p><ul><li><p><strong><code>class scrapy.contrib.spidermiddleware.offsite.OffsiteMiddleware</code></strong></p></li><li><p>过滤掉所有Spider 所覆盖主机域名外的URL请求。</p></li><li><p>该中间件过滤掉所有主机名不在Spider 的allowed_domains属性值中的Request。此属性中域名的子域名是被允许的，如果allow_domains中包含 www.example.com ，那么允许child.www.example.com，但不论是www1.example.com还是example.com都不允许。</p></li><li><p>当Spider返回一个主机名不在该Spider覆盖范围内的 Request 时，该中间件将会做一个类似于下面的日志记录:</p><pre class="line-numbers language-none"><code class="language-none">DEBUG: Filtered offsite request to 'www.othersite.com': &lt;GET http://www.othersite.com/some/page.html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为了避免在日志中记录太多无用信息，只会对每个新过滤的域名记录一次。例如，如果过滤出另一个www.othersite.com请求，就不会有新的记录。但如果过滤出 someothersite.com请求，就会增加一条记录信息（第一次过滤时增加记录）。</p></li><li><p>如果Spider中没有定义allowed_domains 属性，或该属性为空，此offsite中间件将不会过滤任何Request。</p></li><li><p>如果Request设置了dont_filter属性,即使该Request的域名不在allow_domain属性值中, offsite中间件也会允许该Request。</p></li></ul></li><li><p><strong>RefererMiddleware参考位置中间件</strong></p><ul><li><strong><code>class scrapy.contrib.spidermiddleware.referer.RefererMiddleware</code></strong></li><li>根据生成的Response 的URL来填充Request Referer信息。</li><li>RefererMiddleware有一个关键的设置项:<code>REFERER_ENABLED</code>，默认为True，表示是否启用referer 中间件。</li></ul></li><li><p><strong>UrlLengthMiddleware 网址长度限制中间件</strong></p><ul><li><strong><code>class scrapy.contrib.spidermiddleware.urllength.UrlLengthMiddleware</code></strong></li><li>过滤URL长度比URLLENGTH_LIMIT的值大的Request。</li><li>UrILengthMiddleware有一个关键配置<code>URLLENGTH_LIMIT</code>,表示允许爬取URL最长的长度。</li></ul></li></ul><h2 id="自定义下载器中间件"><a href="#自定义下载器中间件" class="headerlink" title="自定义下载器中间件"></a>自定义下载器中间件</h2><ul><li><p>下载器中间件是介于Scrapy 的Request 与 Response中间的、用于处理请求与响应的钩子框架，它是一个轻量级的底层系统，用于全局修改Scrapy的请求与响应。</p></li><li><p>与激活Spider 中间件一样，激活下载器中间件需要将其加入<code>DOWNLOADER_MIDDLEWARES</code>设置中，该设置位于settings.py文件中，是一个字典类型。其中，键为中间件的路径，值为中间件的执行顺序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'myproject.middlewares.CustomDownloaderMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自定义在setting.py中的下载器中间件会与Scrapy 中定义<code>DOWNLOADER_MIDDLEWARES_BASE</code>设置相合并(并不会覆盖)﹐然后根据顺序进行排序，最终得到一个启用的中间件有序列表。第一个中间件靠近Scrapy引擎，最后一个中间件靠近下载器。</p></li><li><p>下载器中间件的顺序同样很重要，由于每个中间件执行不同的动作，因此自定义的中间件可能会依赖于之前(或者之后）执行的中间件。参考以下DOWNLOADER_MIDDLEWARES_BASE顺序来设置自定义中间件的顺序:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span><span class="token punctuation">:</span> <span class="token number">350</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span><span class="token punctuation">:</span> <span class="token number">550</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware'</span><span class="token punctuation">:</span> <span class="token number">560</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'</span><span class="token punctuation">:</span> <span class="token number">580</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">590</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span><span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.stats.Downloaderstats'</span><span class="token punctuation">:</span> <span class="token number">850</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想关闭在DOWNLOADER_MIDDLEWARES_BASE中定义的默认启用的中间件，就必须在项目的DOWNLOADER_MIDDLEWARES中设置该中间件的顺序值为 None。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 禁用user-agent中间件</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'myproject.middlewares.CustomDownloaderMiddleware'</span> <span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span>    <span class="token string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span> <span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写下载器中间件与Spider中间件一样，都是实现以下一个或几个方法的Python类:</p><ul><li><strong><code>process_request(request, spider)</code></strong><ul><li>当Request经过下载器中间件时调用该方法。</li><li><strong>request</strong> ( Request对象):处理的Request。</li><li><strong>spider</strong> ( Spider对象):该Request对应的Spider。</li><li>该方法必须返回<strong>None、Response对象、Request对象或IgnoreRequest 异常</strong>其中之一。<ul><li>如果其返回None，Scrapy将执行其他中间件相应的方法<strong>继续处理</strong>该Request，直到合适的下载器处理函数被调用，该Request被执行处理（对应的 Response被下载）。</li><li>如果返回Response对象，Scrapy将不再调用其他中间件的process_request()或process_exception()方法，或相应地下载函数，并将<strong>返回该Response</strong>。已启用的中间件的process_response()方法会在每个Response返回时被调用。</li><li>如果返回 Request对象，Scrapy 会停止调用process_request()方法，并<strong>重新调度处理</strong>返回的Request。当新返回的Request被执行后，将会根据下载的Response调用相应的中间件处理。</li><li>如果其抛出一个 IgnoreRequest 异常，已启用下载中间件的process_exception()方法会被调用。如果没有任何一个中间件处理该异常，Request.errback会被调用。如果没有代码处理抛出的异常，那么该异常被忽略且不记录到日志中。</li></ul></li></ul></li><li><strong><code>process_response(request,response,spider)</code></strong><ul><li>当Response经过下载器中间件时调用该方法。</li><li><strong>request</strong> ( Request对象): Response所对应的Request。</li><li><strong>response</strong> ( Response对象):被处理的Response。</li><li><strong>spider</strong> ( Spider对象): Response所对应的Spider。</li><li>该方法必须返回<strong>Response对象、Request对象或IgnoreRequest异常</strong>其中之一。<ul><li>如果其返回一个 Response(可以与处理的 Response 相同，也可以是全新的对象)，那么该Response会被其他中间件的 process_response(方法处理。</li><li>如果其返回一个Request对象，那么中间件停止处理，返回的Request 会被重新调度下载。该处理类似于process_request()处理返回的 Request的步骤。</li><li>如果其抛出一个IgnoreRequest 异常，那就调用Request.erback。如果没有代码处理抛出的异常，那么该异常被忽略且不记录在日志中。</li></ul></li></ul></li><li><strong><code>process_exception(request, exception, spider)</code></strong><ul><li>当下载处理器( download handler）或process_request()(下载中间件）抛出异常（包括IgnoreRequest异常）时，Scrapy调用process_exception()。</li><li><strong>request</strong> ( Request对象):产生异常的Request。</li><li><strong>exception</strong> ( Exception对象)抛出的异常。</li><li><strong>spider</strong> ( Spider对象): Request对应的Spider。</li><li>该方法必须返回<strong>None、Response对象或Request对象</strong>其中之一。<ul><li>如果其返回 None，Scrapy 将会继续处理该异常，接着调用已启用的其他中间件的process_exception()方法，直到所有中间件都被调用完毕，并且默认异常处理执行。</li><li>如果其返回一个 Response对象，就调用已启用中间件的 process_response()方法。Scrapy将不会调用任何其他中间件的process_exception)方法。</li><li>如果其返回一个Request对象，就返回的Request将会被重新调用下载。这将停止执行中间件的process_exception()方法。</li></ul></li></ul></li></ul></li></ul><h2 id="下载器内置中间件"><a href="#下载器内置中间件" class="headerlink" title="下载器内置中间件"></a>下载器内置中间件</h2><ul><li><p><strong>CookiesMiddleware</strong></p><ul><li><p><strong><code>class scrapy.contrib.downloadermiddleware.cookies.CookiesMiddleware</code></strong></p></li><li><p>该中间件可以使用Cookie爬取网站数据。记录了向Web Server ‘发送的Cookie，并在之后的Request请求中发送回去，就像操作浏览器一样。</p></li><li><p>CookiesMiddleware设置项:</p><ul><li><code>COOKIES_ENABLE</code>:默认为True，该配置指定是否启用cookies 中间件，如果指定为False,就不会使用cookies。需要注意的是，如果Request.meta参数<strong>dont merge_cookies</strong> 指定为True,那么无论COOKIES_ENABLE指定为何值，Request都不会向服务器传递任何cookies，Response接收到的cookies也不会做任何处理。</li><li><code>COOKIES_DEBUG</code>:默认为False，如果该参数指定为True，那么将会记录所有的请求发送的cookies和响应接收到的cookies。</li></ul></li><li><p>每个蜘蛛爬虫可以<strong>保存多个cookies</strong>，只需要为Request.meta 指定<code>cookiejar</code>值。如下所示，通过传递不同的标识符使用不同的Cookie:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> url <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>        url<span class="token punctuation">,</span>        meta<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'cookiejar'</span> <span class="token punctuation">:</span> i <span class="token punctuation">}</span> <span class="token punctuation">,</span>        callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse page<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''需要注意的是，在 Request.meta 中 cookiejar是没有黏性的。上例中，在调用parse_page 时，需要将上次请求的cookiejar传递过来才能继续使用:'''</span><span class="token keyword">def</span> <span class="token function">parse_page</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment"># do some processing</span>    <span class="token keyword">return</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>        <span class="token string">"http://www.example.com/otherpage"</span><span class="token punctuation">,</span>        meta<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'cookiejar'</span> <span class="token punctuation">:</span> response<span class="token punctuation">.</span>meta <span class="token punctuation">[</span><span class="token string">'cookiejar'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_other_page<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>HttpProxyMiddleware</strong></p><ul><li><strong><code>class scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware</code></strong></li><li>此中间件可以通过在Request.meta中添加<code>proxy</code>属性值为该请求设置HTTP代理,默认获取代理的方法是通过以下环境变量来获取代理地址:<ul><li>http_proxy</li><li>https_proxy</li><li>no_proxy</li></ul></li><li>在settings.py中的设置:<ul><li><code>HTTPPROXY_ENABLED</code>: 默认为False，表示是否激活HttpProxyMiddleware。. </li><li><code>HTTPPROXY_AUTH_ENCODING</code>: 代理有验证时的账户信息编码方式。</li></ul></li></ul></li></ul><blockquote><p>为爬虫添加中间件，主要是middlers.py文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">import</span> scrapy<span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">LianjiaSpiderMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">""" 利用Scrapy数据收集功能，记录相同小区的数量 """</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>stats <span class="token operator">=</span> stats <span class="token decorator annotation punctuation">@classmethod</span> <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> cls<span class="token punctuation">(</span>stats<span class="token operator">=</span>crawler<span class="token punctuation">.</span>stats<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""     从item中获取小区名称，在数据收集其中记录相同小区数量     :param response:     :param result:     :param spider:     :return:     """</span>     <span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment"># 从result中的item获取小区名称</span>             community_name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'community_name'</span><span class="token punctuation">]</span>             <span class="token comment"># 在数据统计中为相同的小区增加数量值</span>             self<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>inc_value<span class="token punctuation">(</span>community_name<span class="token punctuation">)</span>         <span class="token keyword">yield</span> item<span class="token keyword">class</span> <span class="token class-name">LianjiaDownloaderMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">""" 为请求添加代理 """</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>proxy_list<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>proxy_list <span class="token operator">=</span> proxy_list <span class="token decorator annotation punctuation">@classmethod</span> <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 从settings.py中获取代理列表</span>     <span class="token keyword">return</span> cls<span class="token punctuation">(</span>         proxy_list<span class="token operator">=</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PROXY_LIST'</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 从代理列表中随机选取一个添加至请求</span>     proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>proxy_list<span class="token punctuation">)</span>     request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxy <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>     spider<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Spider opened: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Request与Response</title>
      <link href="/2024/07/27/scrapy-pa-chong-xi-lie-zhi-request-yu-response/"/>
      <url>/2024/07/27/scrapy-pa-chong-xi-lie-zhi-request-yu-response/</url>
      
        <content type="html"><![CDATA[<h1 id="Request与Response"><a href="#Request与Response" class="headerlink" title="Request与Response"></a>Request与Response</h1><ul><li>Scrapy框架中，有两个主要的对象Request 与 Response，它们贯穿在爬虫的始终，最终爬虫通过它们将数据串联起来。</li><li>Request对象在Spider中生成，包含HTTP请求信息，在框架中经过一系列传递、处理，最终到达 Downloader下载器，下载器执行 Request 中的请求进行数据抓取，将生成的响应包装成一个Response对象，再经过传递、处理，最终返回发送Request 的 Spider，整个流程如图所示。<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407271201765.png" alt="传递Request与Response"></li></ul><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><ul><li><p>Request对象由Spider 生成，包含指定的HTTP请求信息，最终传递到Downloader下载器进行数据下载。</p></li><li><p>Request类原型：<strong><code>class scrapy.http.Request(url[, callback, method='GET', headers, body, cookies, meta, encoding='utf-8', priority=0, dont_filter=False, errback, flags] )</code></strong></p><ul><li><p><strong>url(string)</strong>:请求URL。</p></li><li><p><strong>callback(callable)</strong>:调用指定的方法处理请求生成的响应，如果不指定，就默认使用parse()方法处理响应。需要注意的是，一旦发生错误，errback 指定的异常处理方法将会代替该方法被调用。</p></li><li><p><strong>method(string)</strong>: HTTP请求方法，默认为GET。</p></li><li><p><strong>meta(dict)</strong>: Request.meta属性的初始值。</p></li><li><p><strong>body(str or unicode)</strong>:请求body。如果值为Unicode，那么将会用encoding 指定的编码方式转化为str类型。如果body 不指定，就会存储为空字符串，因此，无论 body指定为何种类型，最终都是存储为一个字符串。</p></li><li><p><strong>headers(dict)</strong>:请求头。如果指定为None，将不会发送请求头。</p></li><li><p><strong>cookies(dict or list)</strong>:请求cookies，可以用以下两种方式发送:</p><ol><li><p>使用字典发送</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">request_with_cookies <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://www.example.com"</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'currency'</span> <span class="token punctuation">:</span> <span class="token string">'USD'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'UY'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用字典列表发送</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">request_with_cookies <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>http <span class="token punctuation">:</span> <span class="token operator">/</span> <span class="token operator">/</span> www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>         <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'currency '</span><span class="token punctuation">,</span>        <span class="token string">'value'</span> <span class="token punctuation">:</span> <span class="token string">'USD'</span><span class="token punctuation">,</span>        <span class="token string">'domain'</span> <span class="token punctuation">:</span> <span class="token string">'example.com'</span> <span class="token punctuation">,</span>        <span class="token string">'path'</span> <span class="token punctuation">:</span> <span class="token string">'/currency'</span>     <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>第⒉种形式支持自定义cookies 中的domain与 path，这种情形通常是为了把 cookie保存到之后的请求中，在接下来的请求中发送出去。</p></li><li><p>当一些网站返回cookies 时，这些cookies将会存储在相对应的cookies域中，这是一个典型的浏览器行为。当我们不想将接收到的cookies 与现有的cookies合并时，我们可以指定Request.meta 中的<code>dont_merge_cookies</code>字段值为True.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">request_with_cookies <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://www.example.com"</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'currency'</span> <span class="token punctuation">:</span> <span class="token string">'USD'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'UY'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'dont_merge_cookies'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>encoding(string)</strong>:请求的编码，默认为UTF-8。使用该指定的编码值对URL和body进行编码。</p></li><li><p><strong>priority(int)</strong>:请求的优先级，默认为0。调度器依据优先级来处理请求的顺序。</p></li><li><p><strong>dont_filter(boolean)</strong>:表明调度器不需过滤该请求，默认为False。当需要多次执行相同的请求时，可以指定为Tnue。在使用此参数时必须小心处理，否则会陷入死循环。</p></li><li><p><strong>errback(callable)</strong>:当处理请求抛出异常时调用该参数指定的方法。</p></li><li><p><strong>flags(list)</strong>:发送到请求的标志，可用于日志记录或类似目的。</p></li></ul></li><li><p>Request属性方法</p></li></ul><div class="table-container"><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>请求的URL，注意这个属性值包含转义过的URL，可以与原始URL不同，可用replaceO方法替换</td></tr><tr><td>method</td><td>HTTP请求方式，如GET、POST、PUT等</td></tr><tr><td>headers</td><td>一个字典形式的请求头信息</td></tr><tr><td>body</td><td>包含请求body的字符串，可用replace()方法替换</td></tr><tr><td>meta</td><td>包含在请求中的字典形式元数据。可以向其中添加在请求中会经常用到的属性</td></tr><tr><td>copy()</td><td>根据原Request复制一个新的Request</td></tr><tr><td>replace([url,  method,  headers,  body,  cookies,  meta,  encoding,  dont_filter, callback, errback])</td><td>通过关键字替换相对应的参数，返回一个与原Request具有相同成员的Request对象</td></tr></tbody></table></div><ul><li>新生成的 Request 的 meta 属性值为空，通常情况下根据启用的Scrapy 组件进行填充。Request.meta 属性除了可以填充自定义数据外，还包含一些Scrapy和内置扩展可识别的特定键值，这些特定键值对Request起到特殊的限制作用。</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>dont_redirect</td><td>True或False，若设定为Tnue，则禁止重定向</td></tr><tr><td>dont_retry</td><td>True或False，若设定为True，则禁止重新抓取失败的网页</td></tr><tr><td>handle_httpstatus_list</td><td>列表，指定处理更多的HTTP返回状态码，默认处理2xx的状态码</td></tr><tr><td>handle_httpstatus_all</td><td>True或False，若指定为True，则处理所有的HTTP返回码</td></tr><tr><td>dont_merge_cookies</td><td>True或False，若设定为True，则新的cookies不与现有的cookies合并</td></tr><tr><td>cookiejar</td><td>用来管理cookies</td></tr><tr><td>dont_cache</td><td>True或False，若设定为True，则禁止HTTP缓存</td></tr><tr><td>redirect_urls</td><td>list，允许重定向的URL</td></tr><tr><td>bindaddress</td><td>执行外部请求时的IP</td></tr><tr><td>dont_obey_robotstxt</td><td>True或False，设定为True时忽略网站Robots协议</td></tr><tr><td>download_timeout</td><td>设置下载超时，单位为秒</td></tr><tr><td>download_maxsize</td><td>设置可下载的最大数据</td></tr><tr><td>download_latency</td><td>只读属性值，记录了发送请求到获得响应的时间</td></tr><tr><td>proxy</td><td>设定代理URL</td></tr><tr><td>max_retry_times</td><td>设定最大失败重试次数</td></tr></tbody></table></div><ul><li><p>Request回调函数与错误处理</p><ul><li><p>当下载器处理完毕Request并生成Response 时，调用回调函数，也就是callback 指定的处理方法，调用的回调函数以该Response 作为第1个参数。</p></li><li><p>许多情况下，我们需要在不同的回调函数间传递参数，这时就可以使用<strong><code>Request.meta</code></strong>来处理参数的传递。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_page1</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>    item <span class="token operator">=</span> MyItem<span class="token punctuation">(</span><span class="token punctuation">)</span>    item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.name::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>    request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">"http://www.example.com/some_page.html"</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page2<span class="token punctuation">)</span>    <span class="token comment"># 通过meta传递数据</span>    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span> <span class="token operator">=</span> item    <span class="token keyword">yield</span> request    <span class="token keyword">def</span> <span class="token function">parse_page2</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>    item <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.age::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当下载器处理Request 抛出异常时，可以调用errback指定的异常处理方法</p></li><li><p>errback指定的异常处理方法接收一个Twisted Failure 实例作为第1个参数，可用于追踪连接超时、DNS错误等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spidermiddlewares<span class="token punctuation">.</span>httperror <span class="token keyword">import</span> HttpError<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>error <span class="token keyword">import</span> DNSLookupError<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>error <span class="token keyword">import</span> TimeoutError，TCPTimedOutError<span class="token keyword">class</span> <span class="token class-name">ErrbackSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"errback_example"</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://www.httpbin.org/"</span> <span class="token punctuation">,</span> <span class="token comment">#正常HTTP 200返回</span>        <span class="token string">"http://www.httpbin.org/status/404"</span><span class="token punctuation">,</span> <span class="token comment">#404 Not found error</span>        <span class="token string">"http://www.httpbin.org/status/500"</span><span class="token punctuation">,</span> <span class="token comment"># 500服务器错误</span>        <span class="token string">"http://www.httpbin.org:12345/"</span><span class="token punctuation">,</span> <span class="token comment">#超时无响应错误</span>        <span class="token string">"http://www.httphttpbinbin.org/"</span> <span class="token punctuation">,</span><span class="token comment">#DNS 错误</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> u <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>            u<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_httpbin<span class="token punctuation">,</span>             errback<span class="token operator">=</span>self<span class="token punctuation">.</span>errback_httpbin<span class="token punctuation">,</span>            dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_httpbin</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Got successful response from {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#其他处理</span>    <span class="token keyword">def</span> <span class="token function">errback_httpbin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> failure<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token comment">#日志记录所有的异常信息</span>        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">#假设我们需要对指定的异常类型做处理，</span>        <span class="token comment">#我们需要判断异常的类型</span>        <span class="token comment"># failure.check 查该异常类型是否在指定的参数列表中</span>        <span class="token keyword">if</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>HttpError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># HttpError由HttpErrorMiddleware中间件抛出</span>           <span class="token comment">#可以接收到非200状态码的 Response</span>        response <span class="token operator">=</span> failure<span class="token punctuation">.</span>value<span class="token punctuation">.</span>response        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'HttpError on %s'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">elif</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>DNSLookupError<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#此异常由请求Request抛出</span>             request <span class="token operator">=</span> failure<span class="token punctuation">.</span>requestself<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'DNSLookupError on %s'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">elif</span> failure<span class="token punctuation">.</span>check<span class="token punctuation">(</span>TimeoutError<span class="token punctuation">,</span> TCPTimedoutError<span class="token punctuation">)</span><span class="token punctuation">:</span>            request <span class="token operator">=</span> failure<span class="token punctuation">.</span>request            self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'TimeoutError on %s '</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ul><li>Response表示一个HTTP响应,通常由Downloader下载器生成,最终传递给Spider进行处理。Spider接收 Response之后，从中提取出数据，可以根据不同类型的数据选择相应的Response子类进行处理。</li><li><p>Response类原型：<strong><code>class scrapy.http.Response(url [, status=200,headers=None，body=b''，flags=None, request=None] )</code></strong></p><ul><li><strong>url(string)</strong>:响应的URL。</li><li><strong>status(integer)</strong>: HTTP响应码，默认为200。</li><li><strong>headers(dict)</strong>:响应的头信息。</li><li><strong>body(bytes)</strong>:响应body，可以使用response.txt转化为string类型进行访问。</li><li><strong>flags(list)</strong>:用来初始化 Response.flags。</li><li><strong>request(Request object)</strong>:初始化Response.request，表示生成该Response的Request。</li></ul></li><li><p>Response属性方法</p></li></ul><div class="table-container"><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>该响应的url</td></tr><tr><td>status</td><td>响应码，如200、404</td></tr><tr><td>headers</td><td>响应头信息，可以使用getO获取指定头信息，如<code>response.headers.get('User-Agent')</code>，或使用<code>getlist('name')</code>获取指定名称的全部头信息</td></tr><tr><td>body</td><td>响应body</td></tr><tr><td>request</td><td>生成response的Request对象。该属性是在所有请求和响应通过Downloader 中间件时由Scrapy引擎指定。这意味着:<br>(1)HTTP重定向原始的请求指向重定向之后的响应。<br>(2) Response.request.url并不总是等于Response.url。<br>(3）此属性仅在spider 代码及Spider 中间件中可用</td></tr><tr><td>meta</td><td>这个值与Response.request 的 meta 属性值一致。Response.meta具有传播性，无论是重定向还是重试，都可以得到原始的Request.meta属性值</td></tr><tr><td>flags</td><td>包含response标志的列表，flags就是用于调试的标志</td></tr><tr><td>copy()</td><td>从当前Response复制一个新的Response</td></tr><tr><td>replace([url , status,headers，body，flags, request,cls])</td><td>返回一个修改了指定参数的Response对象</td></tr><tr><td>urljoin(url)</td><td>使用Response.url与相对url（相对地址）构成一个绝对url（全地址)</td></tr></tbody></table></div><ul><li><p>Response子类</p><ul><li><p><strong><code>TextResponse</code></strong></p><ul><li><p><strong><code>class scrapy.http.TextResponse(url[, encoding[, ...]])</code></strong></p></li><li><p>TextResponse子类在Response基类的基础上添加了<strong>编码能力</strong>,因此适合用来<strong>处理二进制数据</strong>，如图像、音频、视频等媒体文件。</p></li><li><p>TextResponse相比于Response添加了一个构造参数encoding，其余参数与Response一致。</p></li><li><p><strong>encoding(string)</strong>:一个包含用于处理此响应的编码类型的字符串。如果你创建一个带有unicode数据的TextResponse对象,此对象将使用这个指定的编码类型进行编码处理(注意响应的body属性是一个字符串)。如果encoding 是None（默认值)，就在响应头信息和响应正文中查找编码类型进行使用。</p></li><li><p>还支持的属性和方法</p></li></ul></li></ul></li></ul><div class="table-container"><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>响应体，unicode类型数据。与<code>response.body.decode(response.encoding)</code>结果一致，会在内存中保存第一次的处理结果，无须每次转化，因此可以随时使用response.text</td></tr><tr><td>encoding</td><td>一个表示该响应编码类型的字符串。该值通过以下方法顺序获取:<br>(1)构造参数encoding 指定的编码类型<br>(2)在响应头信息中Content-Type HTTP参数中指定的编码类型<br>(3)在response 响应体中声明的编码类型<br>(4)通过response 响应体推断编码类型<br></td></tr><tr><td>selector</td><td>与response 中 selector的使用方法一致，也支持xpath与css选择使用</td></tr><tr><td>follow(url, callback=None, method=’GET’,headers=None, body=None, cookies=None,meta=None, encoding=None, priority=0,dont_filter=False, errback=None)</td><td>根据url返回一个Request对象，用法与Request一致</td></tr><tr><td>body_as_unicode</td><td>与response.text效果相同的一个方法</td></tr></tbody></table></div><ul><li><p><strong><code>HtmlResponse</code></strong></p><ul><li><strong><code>class scrapy.http.HtmlResponse(url[, ...])</code></strong></li><li>HtmIResponse是TextResponse的子类，只不过是添加了一个通过查看HTML meta <code>http-equiv</code>属性来自动添加编码的功能。</li></ul></li><li><p><strong><code>XMLResponse</code></strong></p><ul><li><strong><code>class scrapy.http.XMLResponse(url[, ...])</code></strong></li><li>XmIResponse也是TextResponse 的一个子类，该类的自动添加编码功能来源于对XML声明行的检查。</li></ul></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy管道</title>
      <link href="/2024/07/27/scrapy-pa-chong-xi-lie-zhi-scrapy-guan-dao/"/>
      <url>/2024/07/27/scrapy-pa-chong-xi-lie-zhi-scrapy-guan-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy管道"><a href="#Scrapy管道" class="headerlink" title="Scrapy管道"></a>Scrapy管道</h1><ul><li>管道（Item Pipeline)的主要作用是处理抓取的数据。当爬虫抓取到数据并转化为Item之后，会传递给Item Pipeline做进一步处理，包括:<ul><li>清洗数据</li><li>检查抓取的数据是否有效</li><li>去重</li><li>保存数据</li></ul></li><li>一个项目可以包含多个管道,通过爬虫收集到的Item 会依次按指定顺序传递给管道进行处理。每一个管道都是实现一些指定方法的Python类。这些方法接收Item作为参数，判断此ltem是否进行下一步处理，还是丢弃。</li></ul><h2 id="自定义管道"><a href="#自定义管道" class="headerlink" title="自定义管道"></a>自定义管道</h2><ul><li>重写方法<ul><li><strong><code>process_item(self, item, spider)</code></strong>: process_item()是每个管道都必须实现的方法。数据处理工作都在此方法中进行，该方法返回一个有数据的dict、Item(或者继承类)，返回Twisted Deferred或抛出DropItem异常，丢弃的数据不会再传递到其他管道进行处理。其中，参数item对象是被爬取的Item，参数spider 代表爬取该Item的 Spider。</li><li><strong><code>open_spider(self,spider)</code></strong>:当爬虫开启的时候执行此方法，一般做一些初始化工作，比如连接数据库。</li><li><strong><code>close_spider(self, spider)</code></strong>:当爬虫关闭的时候执行此方法，可以做一些收尾工作、关闭数据库等。</li><li><strong><code>from_crawl(cls, crawler)</code></strong>:该方法是一个类方法。调用此方法会通过初始化crawler对象返回一个Pipeline实例。通过crawler对象可以返回Scrapy的所有核心组件，如全局配置信息。</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">JobboleArticlePipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#当启动爬虫时，打开items.json文件，准备写入数据</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'items.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token comment">#当爬虫执行结束时，关闭打开的文件</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#将抓取到的数据做json序列化存储</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>        line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>        self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>编写完管道之后，需要启用管道，不然不会生效。只需要将管道添加到<strong><code>settings.py</code></strong>文件的ITEM_PIPELINES变量中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'jobbole_article.pipelines.JobboleArticlePipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="下载文件和图片"><a href="#下载文件和图片" class="headerlink" title="下载文件和图片"></a>下载文件和图片</h2><ul><li><p>Scrapy提供了一些可重用的 Item Pipeline。这些管道有一些共同的方法和结构，通常叫作 MediaPipelines，而我们最常用的就是<strong><code>FilesPipeline</code></strong>和<strong><code>ImagesPipeline</code></strong>，分别用于下载文件和图片。这两种管道都包含以下特性:</p><ul><li><strong>避免重复下载最近下载过的数据</strong>。</li><li>指定存储的位置，可使用本地文件系统或者云端存储。</li></ul></li><li><p>ImagesPipeline还有一些额外特性:</p><ul><li>将下载的图片转换成通用的JPG格式和RGB模式。</li><li>为下载的图片生成缩略图。</li><li>检查图片的宽/高，确保能够满足最小要求。</li></ul></li><li><p>管道同时会为计划中下载的文件URL保存一个内部队列,与包含同样文件的Response相关联，从而<strong>避免重复下载几个Item共用的图片</strong>。</p></li><li><p>在爬虫项目中，使用<strong>文件管道</strong>的工作流程如下</p><ol><li>在爬虫中，抓取到Item并把期望的URL放入<code>file_urls</code> 内。</li><li>从爬虫内返回的Item进入 Item Pipeline 内。</li><li>当Item进入 FilesPipeline 时，<code>file_urls</code>内的URL将被Scrapy内置的调度器和下载器安排下载，调度器和下载器中间件是可以重复使用的。如果是更高的优先级，那么这些URL 会在抓取其他页面之前被处理。在这个管道内的Item 会保持锁定状态，直到文件下载完成或因其他原因下载失败。</li><li>当文件下载完成之后，下载的结果将会填充到<code>files</code>字段中。这个字段是由dict类型数据组成的列表，包含<em>下载路径、源地址(从file_urls中获取)、图片校验码(checksum)</em>。files字段中文件的顺序与file_urls文件 URL顺序保持一致。如果下载失败，就会记录错误信息，文件并不会出现在files字段中。</li></ol><blockquote><p><strong>示例代码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># items.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DownloadfileItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 文件名称</span>    file_name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 发布时间</span>    release_date <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 文件URL</span>    file_urls <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 文件结果信息</span>    files <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># settings.py</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'scrapy.pipelines.files.FilesPipeline'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>FILES_STORE <span class="token operator">=</span> <span class="token string">'D:\\scrapy \downloadfiles'</span>FILES_URLS_FIELD <span class="token operator">=</span> <span class="token string">'file_urls'</span>FILES_RESULT_FIELD <span class="token operator">=</span> <span class="token string">'files'</span><span class="token comment"># spiders/getfile.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> downloadfile<span class="token punctuation">.</span>items <span class="token keyword">import</span> DownloadfileItem<span class="token keyword">class</span> <span class="token class-name">Getfilespider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'getfile'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'szhrss.gov.cn'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'http://hrss.sz.gov.cn/wsbs/xzzx/rcyj/'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">parse</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">:</span>    files_list <span class="token operator">=</span> response<span class="token punctuation">.</span>css <span class="token punctuation">(</span><span class="token string">'.conRight_text_ull li'</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files_list<span class="token punctuation">:</span>        item <span class="token operator">=</span> DownloadfileItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token punctuation">[</span><span class="token string">'file_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'a::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        item <span class="token punctuation">[</span> <span class="token string">'release_date '</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'span::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#由于获取到的url类似"./201501/P020170328745500534334.doc"</span>        <span class="token comment">#因此需要手动调整为完成的url格式</span>        url <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'a: :attr (href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#file_urls必须是list形式</span>        item<span class="token punctuation">[</span><span class="token string">'file_urls'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>url <span class="token operator">+</span> url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 D:\Scrapyldownloadfiles文件夹中会自动创建full文件夹,其中下载文件如图所示，文件名是根据文件URL自动生成的SHA1哈希值。<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407271200827.png" alt="文件下载结果"></p><p><strong>自定义文件下载管道</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#pipelines.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>files <span class="token keyword">import</span> FilesPipeline <span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request<span class="token keyword">class</span> <span class="token class-name">DownloadfilePipeline</span><span class="token punctuation">(</span>FilesPipeline<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#修改file_path方法，使用提取的文件名保存文件</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token comment">#获取到Request中的item</span>        item <span class="token operator">=</span> request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        <span class="token comment">#文件UR工路径的最后部分是文件格式</span>        file_type <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split <span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment">#修改使用item中保存的文件名作为下载文件的文件名，文件格式使用提取到的</span>        <span class="token comment">#格式</span>        file_name <span class="token operator">=</span> <span class="token string">u'full/{0}.{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item <span class="token punctuation">[</span><span class="token string">'file_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>file_type<span class="token punctuation">)</span>        <span class="token keyword">return</span> file_name    <span class="token keyword">def</span> <span class="token function">get_media_requests</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">for</span> file_url <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">'file_urls'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment">#为request带上meta参数，把item传递过去</span>        <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>file_url<span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'item'</span><span class="token punctuation">:</span>item<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407271200311.png" alt="修改下载文件名"></p></blockquote></li><li><p>图片管道与文件管道的工作流程一致，不同的是资源URL存储由file_urls变更为<code>image_urls</code>,结果存储字段由files变为<code>images</code>，具体流程如下:</p><ol><li>在爬虫中，抓取到Item并把期望的URL放入<code>image_urls</code> 内。</li><li>从爬虫内返回的Item进入 Item Pipeline 内。</li><li>当Item进入FilesPipeline 时，<code>image_urls</code> 内的URL将被Scrapy 内置的调度器和下载器安排下载，调度器和下载器中间件是可以重复使用的。如果是更高的优先级，那么这些URL会在抓取其他页面之前被处理。在这个管道内的Item会保持锁定状态，直到文件下载完成或因其他原因下载失败。</li><li>当文件下载完成之后，下载的结果将会填充到<code>images</code>字段中。这个字段是由 dict类型数据组成的列表，包含下载路径、源地址（从image_urls 中获取)、图片校验码(checksum)。images字段中文件的顺序与image_urls文件 URL顺序保持一致。如果下载失败，就会记录错误信息，文件并不会出现在images字段中。</li></ol><blockquote><p>示例代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># items.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ImgpipelineItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token comment">#小说名称</span>title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#小说作者</span>author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#小说类型</span><span class="token builtin">type</span> <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#图片URL</span>image_urls <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#图片结果信息</span>images <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># settings.py</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'imgpipeline.pipelines.ImgpipelinePipeline'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment"># 自定义管道</span>    <span class="token string">'scrapy.pipeline.images.ImagesPipeline'</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 默认管道</span><span class="token punctuation">}</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'D:\\scrapy\\imgdownload'</span>IMAGES_URLS_FIELD <span class="token operator">=</span> <span class="token string">'image_urls'</span>IMAGES_RESULT_FIELD <span class="token operator">=</span> <span class="token string">'images'</span><span class="token comment"># 图片缩略图</span>IMAGES_THUMBS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'small'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    <span class="token string">'big'</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment"># 自定义管道 pipelines.py</span><span class="token keyword">class</span> <span class="token class-name">DownloadimagePipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#将小说信息保存为json文件</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">'qidian.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#写入文件</span>    line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"\n"</span>    self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>write <span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> item<span class="token comment"># spiders/getimg.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> imgpipeline<span class="token punctuation">.</span>items <span class="token keyword">import</span> ImgpipelineItem<span class="token keyword">class</span> <span class="token class-name">GetimgSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'getimg'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'qidian.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'https://www.qidian.com/finish'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">for</span> novel <span class="token keyword">in</span> response<span class="token punctuation">.</span>css <span class="token punctuation">(</span><span class="token string">".all-img-list &gt; li"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> ImgpipelineItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> novel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//h4/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> novel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.name::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> novel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'em+a::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'image_urls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https:'</span> <span class="token operator">+</span> novel<span class="token punctuation">.</span>xpath <span class="token punctuation">(</span><span class="token string">'.//img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h2 id="存储数据库"><a href="#存储数据库" class="headerlink" title="存储数据库"></a>存储数据库</h2><ul><li>将爬取的数据存储到数据库中，主要新增数据存储管道</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pipelines.py</span><span class="token keyword">import</span> pymongo<span class="token keyword">class</span> <span class="token class-name">LianjiaPipeline</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#设置存储文档名称</span>    collection_name <span class="token operator">=</span> <span class="token string">'secondhandhouse'</span>        <span class="token keyword">def</span> <span class="token function">_init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mongo_uri<span class="token punctuation">,</span> mongo_db<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mongo_uri <span class="token operator">=</span> mongo_uri        self<span class="token punctuation">.</span>mongo_db <span class="token operator">=</span> mongo_db            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span>crawler<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> cls <span class="token punctuation">(</span>            <span class="token comment">#通过crawler获取settings文件，获取其中的MongoDB配置信息</span>            mongo_uri<span class="token operator">=</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'MONGO_URI'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            mongo_db<span class="token operator">=</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'MONGO_DATABASE'</span><span class="token punctuation">,</span> <span class="token string">'lianjia'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">open_spider</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token comment">#当爬虫打开时连接MongoDB数据库</span>        <span class="token comment">#先连接server，再连接指定数据库</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mongo_uri<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mongo_db<span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">close_spider</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#爬虫结束时关闭数据库连接</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> process item <span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment">#将item插入数据库</span>    self<span class="token punctuation">.</span>db<span class="token punctuation">[</span>self<span class="token punctuation">.</span>collection_name<span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> item<span class="token comment"># 在settings.py 激活pipeline</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'lianjia.pipelines.LianjiaPipeline'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token comment">#MongoDB配置信息</span>MONGO_URI <span class="token operator">=</span> <span class="token string">'localhost:27017'</span>MONGO_DATABASE <span class="token operator">=</span> <span class="token string">'lianjia'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy爬虫</title>
      <link href="/2024/07/27/scrapy-pa-chong-xi-lie-zhi-scrapy-pa-chong/"/>
      <url>/2024/07/27/scrapy-pa-chong-xi-lie-zhi-scrapy-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy爬虫"><a href="#Scrapy爬虫" class="headerlink" title="Scrapy爬虫"></a>Scrapy爬虫</h1><h2 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h2><ul><li><p>Scrapy主要通过<strong><code>Spider</code></strong>类来实现爬虫的相关功能。Spider类定义了爬取某个或某些网站的规则，包括爬取数据与提取数据。</p></li><li><p>Spider循环爬取步骤如下</p><ol><li>通过<code>start_requests()</code>以 start_urls 中的URL<strong>初始化Request</strong>，下载完毕后返回Response,<strong>作为参数传给回调函数parse</strong>。</li><li>使用<code>parse</code>函数分析Response，可以<strong>返回Item对象、dict、Request</strong>或一个包含三者的可迭代容器。其中，Request可以经过Scrapy继续下载内容，调用设置的回调函数。</li><li>在parse函数内，使用<code>Selector</code>分析Response，<strong>提取相应数据</strong>。</li></ol></li><li><p>编写的爬虫Spider是通过继承<code>scrapy.Spider</code>类来实现的。Spider类是最简单的爬虫类。每个其他的Spider必须继承自该类。Spider类提供了start_requests()的默认实现，读取并请求Spider 属性中的start_urls，并根据返回的结果(Resulting Responses）调用Spider 的 parse方法。</p></li><li><p>Spider类常用的属性</p><ul><li><strong><code>name</code></strong>： name属性是<strong>必须且唯一</strong>的,其定义了Spider 的名字,而Scrapy通过Spider的名字来定位并且初始化 Spider。</li><li><strong><code>allowed_domains</code></strong>：该属性可选，其包含允许Spider爬取的域名列表。当中间件OffsiteMiddleWare启用时，将不会跟进不在列表中的域名。</li><li><strong><code>start_urls</code></strong>：URL列表。当没有指定特定URL 时, Spider将从该列表中开始获取页面数据，后续的URL将从获取的数据中提取。</li><li><strong><code>custom_settings</code></strong>：该属性可选，是一个<strong>dict</strong>。当Spider 启动时，会覆盖项目的设置，由于设置必须在初始化前被更新，因此<strong>必须设定为class属性</strong>。</li></ul></li><li><p><strong><code>start_requests()</code>方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"http://www.example1.com"</span><span class="token punctuation">,</span><span class="token string">"http://www.example2.com"</span><span class="token punctuation">,</span><span class="token string">"http://www.example3.com"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在爬虫启动时，Scrapy会调用start_requests()方法，从urls表中依次获取 url，为此 url生成Request，然后调用回调方法parse 处理生成的Request。此方法只会调用一次，因此可以将此方法写成一个生成器。</p></li><li><p><strong><code>parse(response)</code>方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> media <span class="token keyword">in</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"li.media"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token punctuation">{</span>            <span class="token string">"title"</span><span class="token punctuation">:</span> media<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"h3.p-tit a::text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"publish-data"</span><span class="token punctuation">:</span> media<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"p.p-metaspan::text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parse(response)是Scrapy 的默认回调方法。在生成的Request没有指定回调方法时，默认调用parse(方法。<br>parse()方法主要负责处理Response，返回抓取的数据，或者需要跟进的URL。不只是parse()方法，其他所有Request 的回调方法都必须实现这些功能。<br>此方法以及任何其他Request回调方法必须返回可迭代的Request、dicts或 Item对象。</p></li><li><p><strong>Selector选择器</strong></p><ul><li><p>Scrapy通过实现一套构建于 lxml库上名为选择器(Selector)的机制来提取数据,主要通过特定的Xpath或者CSS表达式来选择HTML文件中的某个指定部分。</p></li><li><p>Selector常用的方法主要有4个</p><ul><li><strong><code>xpath()</code></strong>:传入Xpath表达式，返回表达式对应节点的<strong>选择器列表</strong>。</li><li><strong><code>css()</code></strong>:传入CSS表达式，返回表达式对应节点的<strong>选择器列表</strong>。</li><li><strong><code>extract()</code></strong>:以列表形式返回被选择元素的Unicode<strong>字符串</strong>。</li><li><strong><code>re()</code></strong>:返回通过正则表达式提取的Unicode<strong>字符串列表</strong>。</li></ul></li><li><p>使用xpath方法获取title节点数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//title/text()'</span><span class="token punctuation">)</span><span class="token comment"># response.css('title')</span><span class="token comment"># [&lt;Selector (text) xpath=//title/text()&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过extract()方法提取数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token string">'Test web site'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用xpath 方法获取image节点数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@class="image"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取第一条数据</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@class="image"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># '&lt;a href='/img/1' class='image '&gt; image1 &lt;b /&gt; &lt;img src='imagel.jpg'/&gt;&lt;/a&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在使用xpath方法时，要特别注意<strong>相对路径</strong>的问题。在HTML示例文件中，div标签外有一个p标签，div内部也有一个p标签，如果以<strong>‘/‘</strong>开始的XPath语法定位标签，就说明与当前的Sclector无关，而是从整个文档开始定位，正确的使用方法是以<strong>‘.’</strong>开始:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">div_tag <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'#images'</span><span class="token punctuation">)</span>div_tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># '&lt;p&gt;line1&lt;/p&gt;'</span>div_tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># '&lt;p&gt;line2&lt;/p&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h2><ul><li><p><strong>CrawlSpider</strong></p><ul><li>CrawlSpider是抓取网站常用的Spider，它提供了一个通过制定一些规则来达到跟进链接的方便机制。对一般网站的爬取来说，可以通过修改CrawlSpider来完成任务。</li><li>CrawlSpider中最常用也是最重要的就是<strong>rules</strong>属性。rules是一个或一组Rule对象，必须写成<strong>tuple</strong>形式。</li><li>每一个Rule对象定义了对目标网站的爬取行为，如果有多个Rule对象匹配了同一个链接，就只有第一个Rule会生效。</li><li><strong><code>class scrapy.spiders.Rule</code></strong><br><strong><code>(link_extractor,callback=None,cb_kwargs=None,follow=None,process_links=None,process_request=None)</code></strong><ul><li>link_extrator是一个Link Extrator对象，定义了需要从已爬取的页面中提取哪些需要继续跟进的链接，通过<strong>匹配正则表达式</strong>来达到这一目的。</li><li>callback是一个回调函数或者字符串。传递字符串时，通过字符串查找本类中对应的函数名调用该函数。回调函数接收Response作为第一参数，同时返回一个包含Item或者Request对象的列表。<em>(Rule对象中不能使用parse作为回调函数，原因是CrawlSpider 默认使用parse来实现爬虫逻辑，如果复写了parse，那么CrawlSpider将不能继续正确执行。)</em></li><li>cb_kwargs是一个字典对象，包含传递给回调函数(callback 指定的函数）的参数。</li><li>follow参数是一个布尔值，为 true或者false。若为True，则需要跟进依据此条规则从Response 中提取的链接;若为False，则不跟进。若callback 指定为None，则 follow默认为True,否则为False。</li><li>process_links 的主要功能为过滤。它是一个回调函数或者字符串，传递字符串时，通过字符串查找本类中对应的函数名调用该函数。当使用本条Rule中制定的 link_extrator 从 Reponse中获取链接列表时会调用此方法。</li><li>process_request是一个回调函数或者字符串，传递字符串时，通过字符串查找本类中对应的函数名调用该函数。通过本条 Rule提取 Request时调用此回调函数，该函数必须返回一个Request或者None。</li></ul></li></ul></li><li><p><strong>XMLFeedSpider</strong></p><ul><li>XMLFeedSpider主要用于<strong>RSS源订阅</strong>内容的抓取。RSS源是基于XML的一种信息聚合技术。该爬虫通过指定节点遍历达到抓取数据的目的。</li><li>XMLFeedSpider 中的一些属性如下<ul><li><code>iterator</code>:指定迭代器，迭代器主要用于分析数据RSS订阅源。可用的迭代器如下。<ul><li><code>iternodes</code>:性能高，基于正则表达式，是XMLFEEDSpider 默认的迭代器。</li><li><code>html</code>:使用Selector 加载所有DOM结构进行分析，当数据量很大时会产生性能问题，优点是处理不合理标签时比较有用。</li></ul></li><li><code>xml</code>:同html一样使用Selector进行分析，同样需要加载所有DOM结构，会产生性能问题。</li><li><code>itertag</code>:指定需要迭代的节点，如: <code>itertag='item'</code></li><li>namespaces:以元组形式组成的列表，定义了Spider处理文档时可用的命名空间。同时，可以在itertag 中指定具有命名空间的节点，此时迭代器应指定为xml。</li></ul></li><li>可复写方法<ul><li><code>adapt_response(response)</code>:此方法在处理分析Response之前被调用，可用于修改Response 的内容。此方法返回类型为Response。</li><li><code>parse_node(response,selector)</code>:当匹配到节点的时候，调用此方法进行数据处理。很重要的一点是，此方法必须复写，否则爬虫不会正常工作。该方法必须返回一个Item、Request，或者一个包含Item或 Request 的迭代器。</li><li><code>process_result(response,result)</code>:当爬虫返回抓取结果时调用此方法。多用于在抓取结果传递给框架核心处理前做最后的修改。该方法必须接收一个结果列表和产生这些结果的Response,返回一个包含Item或 Request的结果列表。</li></ul></li></ul></li><li><p><strong>CSVFeedSpider</strong></p><ul><li>CSVFeedSpider与 XMLFeedspider非常相似，区别是<strong>XMLFeedspider是根据节点来迭代数据的，而CSVFeedSpider是每行迭代</strong>。类似的，每行迭代调用的是 <code>parse_row()</code>方法。常用的属性方法如下:<ul><li><code>delimiter</code>:字段分隔符，默认是英文逗号’,’。</li><li><code>quotechar</code>: CSV字段中如果包含回车、引号、逗号，那么此字段必须用双引号引起来。此属性默认值为半角双引号。</li><li><code>headers</code>:CSV文件的标题头，该属性值是一个列表。</li><li><code>parse_row(response,row)</code>:对每一行数据进行处理，接收由一个 Response、一个文件标题头组成的字典。</li></ul></li><li>同XMLFeedSpider一样，在 CSVFeedSpider中也可以复写adapt_response 与 process_result方法。</li></ul></li><li><p><strong>SitemapSpider</strong></p><ul><li><p>SitemapSpider 允许通过 Sitemap 发现URL链接来爬取一个网站。</p></li><li><p>Sitemap包含网站所有网址以及每个网址的其他元数据，包括上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等。</p></li><li><p>Sitemap有TXT、XML、HTML格式，一般以XML形式展现。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>urlset</span> <span class="token attr-name">xmins</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.sitemaps.org/schemas/sitemap/0.9<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loc</span><span class="token punctuation">&gt;</span></span>http://example.com/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loc</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastmod</span><span class="token punctuation">&gt;</span></span>2016-09-06T00:00:16+08:00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastmod</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changefreq</span><span class="token punctuation">&gt;</span></span>daily<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changefreq</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>priority</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>priority</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loc</span><span class="token punctuation">&gt;</span></span>http://example.com/link.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loc</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastmod</span><span class="token punctuation">&gt;</span></span>2016-09-06T00:00:16+08:00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastmod</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changefreq</span><span class="token punctuation">&gt;</span></span>daily&lt;/ changefreq&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>priority</span><span class="token punctuation">&gt;</span></span>0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>priority</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>urlset</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>loc表示完整网址。</li><li>lastmod表示本网页最后修改时间。</li><li>changefreq表示更新频率。</li><li>priority用来指定此链接相对于其他链接的优先权比值。</li></ul></li><li><p>SitemapSpider 常用属性</p><ul><li><code>sitemap_urls</code>:一个包含待爬取url的sitemap列表，也可以指定为rebots.txt，表示从rebots.txt中提取url.</li><li><code>sitemap_rules</code>:一个元祖列表，形如(regex,callback)，其中:<ul><li><code>regex</code>表示需要从sitmap中提取的url的正则表达式，可以是一个字符串或者正则表达式对象。</li><li><code>callback</code>是处理对应的url的回调方法，如<code>sitemap_url =[('/price/','parse_ price')]</code>，提取到类似<em>\</em>/price/**链接时调用parse_price方法处理。需要注意的是，相同的链接只会调用第一个方法处理，并且如果此属性没有指定，那所有的链接默认使用parse方法处理。</li></ul></li><li><code>sitemap_follow</code>:一个指定需要跟进的sitemap的正则表达式列表。当使用Sitemap index files来指向其他sitemap文件的站点时此属性有效。默认情况下，所有的sitemap都会被跟进。</li><li><code>sitemap_alternate_links</code>:指定当一个url有可选的链接时是否跟进。</li></ul></li></ul></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analytic Geometry02</title>
      <link href="/2024/07/26/analyticgeometry02/"/>
      <url>/2024/07/26/analyticgeometry02/</url>
      
        <content type="html"><![CDATA[<h1 id="Analytic-Geometry02"><a href="#Analytic-Geometry02" class="headerlink" title="Analytic Geometry02"></a>Analytic Geometry02</h1><h2 id="Orthonormal-Basis"><a href="#Orthonormal-Basis" class="headerlink" title="Orthonormal Basis"></a>Orthonormal Basis</h2><ul><li><p><strong>Orthonormal Basis</strong>: Consider an $n$-dimensional vector space $V$ and a basis {$b_1, . . . , b_n$} of $V$. If</p><script type="math/tex; mode=display"><b_i,b_j>=0 ,\;for \;i\ne j\\<b_i,b_i>=1</script><p>for all $i, j = 1, . . . , n$ then the basis is called an <strong>orthonormal basis (ONB)</strong>. If only $<b_i,b_j>=0$ is satisfied, then the basis is called an <strong>orthogonal basis</strong>.</b_i,b_j></p></li><li><p>Assume we are given a set ${\tilde b_1, . . . , \tilde b_n}$ of non-orthogonal and unnormalized basis vectors. We concatenate them into a matrix $\tilde B = [\tilde b_1, . . . , \tilde b_n]$ and apply Gaussian elimination to the augmented matrix  $[\tilde B \tilde B^⊤|\tilde B]$ to obtain an orthonormal basis. This constructive way to iteratively build an orthonormal basis ${b_1, . . . , b_n}$ is called the <em>Gram-Schmidt process</em>.</p></li></ul><h2 id="Orthogonal-Complement"><a href="#Orthogonal-Complement" class="headerlink" title="Orthogonal Complement"></a>Orthogonal Complement</h2><ul><li><p>Consider a $D$-dimensional vector space $V$ and an $M$-dimensional subspace $U ⊆ V$. Then its <strong>orthogonal complement</strong> $U^⊥$ is a $(D−M)$-dimensional subspace of $V$ and contains all vectors in $V$ that are orthogonal to every vector in $U$. Furthermore, $U∩U^⊥ = {0}$ so that any vector $x ∈ V$ can be uniquely decomposed into</p><script type="math/tex; mode=display">x=\sum_{m=1}^M{\lambda_mb_m}+\sum_{j=1}^{D-M}{\psi_jb_j^\bot},\lambda_m,\psi_j \in \mathbb R</script><p>where $(b_1, . . . , b_M)$ is a basis of $U$ and $(b^⊥_1 , . . . , b^⊥_{D−M})$ is a basis of $U^⊥$.</p></li><li><p>The orthogonal complement can also be used to describe a plane $U$ (two-dimensional subspace) in a three-dimensional vector space. The vector w with $∥w∥ = 1$, which is orthogonal to the plane $U$, is the basis vector of $U^⊥$. All vectors that are orthogonal to $w$ must (by construction) lie in the plane $U$. The vector w is called <strong>the normal vector</strong> of $U$.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243959.png" alt="orthogonal complement"></p></li><li><p>Orthogonal complements can be used to describe hyperplanes in $n$-dimensional vector and affine spaces.</p></li></ul><h2 id="Inner-Product-of-Functions"><a href="#Inner-Product-of-Functions" class="headerlink" title="Inner Product of Functions"></a>Inner Product of Functions</h2><ul><li><p>An inner product of two functions $u : \mathbb R → \mathbb R$ and $v : \mathbb R → \mathbb R$ can be defined as the definite integral</p><script type="math/tex; mode=display">\left<u,v\right>=\int_a^b{u(x)v(x)dx},\; a,b< \infty</script></li><li><p>It also holds that the collection of functions </p><script type="math/tex; mode=display">\{1,cos(x),cos(2x),cos(3x),\cdots\}</script><p>is orthogonal if we integrate from $−π$ to $π$, i.e., any pair of functions are orthogonal to each other.</p></li></ul><h2 id="Orthogonal-Projections"><a href="#Orthogonal-Projections" class="headerlink" title="Orthogonal Projections"></a>Orthogonal Projections</h2><ul><li><p><strong>Projection</strong>: Let $V$ be a vector space and $U ⊆ V$ a subspace of $V$. A linear mapping $π : V → U$ is called a <strong>projection</strong> if $π^2 = π ◦ π = π$.</p></li><li><p>Since linear mappings can be expressed by transformation matrices, the preceding definition applies equally to a special kind of transformation matrices, the projection matrices $P_π$, which exhibit the property that $P^2_π = P_π$.</p></li><li><p>[<strong>Projection onto One-Dimensional Subspaces (Lines)</strong>]: Assume we are given a line (one-dimensional subspace) through the origin with basis vector $b ∈ \mathbb R^n$. The line is a one-dimensional subspace $U ⊆ \mathbb R^n$ spanned by $b$. When we project $x ∈ \mathbb R^n$ onto $U$, we seek the vector $π_U(x) ∈ U$ that is closest to x. Using geometric arguments, let us characterize some properties of the projection $π_U(x)$:</p><ul><li><p>The projection $π_U(x)$ is closest to $x$, where “closest” implies that the distance $∥x−π_U(x)∥$ is minimal. It follows that the segment $π_U(x)−x$ from $π_U(x)$ to $x$ is orthogonal to $U$, and therefore the basis vector $b$ of $U$. The orthogonality condition yields $⟨π_U(x) − x, b⟩ = 0$ since angles between vectors are defined via the inner product.</p></li><li><p>The projection $π_U(x)$ of $x$ onto $U$ must be an element of $U$ and, therefore, a multiple of the basis vector $b$ that spans $U$. Hence, $π_U(x) = λb$, for some $λ ∈ \mathbb R$.</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243379.png" alt="projections onto one-dimensional subspaces"></p></li></ul></li><li><p>In the following three steps, we determine the coordinate $λ$, the projection $π_U(x) ∈ U$, and the projection matrix $P_π$ that maps any $x ∈ \mathbb R^n$ onto $U$:</p><ol><li><p>Finding the coordinate $λ$. The orthogonality condition yields</p><script type="math/tex; mode=display">\left<x-\pi_U(x),b\right>=0 \xLeftrightarrow{\pi_U(x)=\lambda b}\left<x-\lambda b,b\right>=0</script><p>We can now exploit the bilinearity of the inner product and arrive at</p><script type="math/tex; mode=display">\left<x,b\right>-\lambda\left<b,b\right>=0 \Leftrightarrow \lambda = \frac{\left<x,b\right>}{\left<b,b\right>}=\frac{\left<x,b\right>}{\left\|b\right\|^2}</script><p>In the last step, we exploited the fact that inner products are symmetric. If we choose $⟨·, ·⟩$ to be the dot product, we obtain</p><script type="math/tex; mode=display">\lambda = \frac{b^Tx}{b^Tb}=\frac{b^Tx}{\left\|b\right\|^2}</script><p>If $∥b∥ = 1$, then the coordinate $λ$ of the projection is given by $b^⊤x$.</p></li><li><p>Finding the projection point $π_U(x) ∈ U$. Since $π_U(x) = λb$, we immediately obtain </p><script type="math/tex; mode=display">\pi_U(x)=\lambda b =\frac{\left<x,b\right>}{\left\|b\right\|^2}b=\frac{b^Tx}{\left\|b\right\|^2}b</script><p>where the last equality holds for the dot product only. We can also compute the length of $π_U(x)$ as</p><script type="math/tex; mode=display">∥π_U(x)∥ = ∥λb∥ = |λ| ∥b∥</script><p>If we use the dot product as an inner product, we get</p><script type="math/tex; mode=display">∥π_U(x)∥ = \frac{|b^Tx|}{\left\|b\right\|^2} ∥b∥= |cos\;\omega|∥x∥∥b∥ \frac{∥b∥}{\left\|b\right\|^2}=|cos\;\omega|∥x∥</script><p>Here, $ω$ is the angle between $x$ and $b$.</p></li><li><p>Finding the projection matrix $P_π$. We know that a projection is a linear mapping. Therefore, there exists a projection matrix $P_π$, such that $π_U(x) = P_πx$. With the dot product as inner product and</p><script type="math/tex; mode=display">\pi_U(x)=\lambda b =b \lambda=b\frac{b^Tx}{\left\|b\right\|^2}=\frac{bb^T}{\left\|b\right\|^2}x</script><p>we immediately see that</p><script type="math/tex; mode=display">P_\pi =\frac{bb^T}{\left\|b\right\|^2}</script><p>Note that $bb^⊤$ (and, consequently, $P_π$) is a symmetric matrix (of rank 1), and $∥b∥^2 = ⟨b, b⟩$ is a scalar.</p></li></ol></li><li><p>The projection $π_U(x) ∈ \mathbb R^n$ is still an $n$-dimensional vector and not a scalar.</p></li><li><p>(<strong>Projection onto General Subspaces</strong>): Assume that $(b_1, . . . , b_m)$ is an ordered basis of $U$. Any projection $π_U(x)$ onto $U$ is necessarily an element of $U$. Therefore, they can be represented as linear combinations of the basis vectors $b_1, . . . , b_m$ of $U$, such that $π_U(x) =\sum_{i=1}^m{\lambda_ib_i}$. We follow a three-step procedure to find the projection $π_U(x)$ and the projection matrix $P_π$:</p><ol><li><p>Find the coordinates $λ_1, . . . , λ_m$ of the projection (with respect to the basis of $U$), such that the linear combination</p><script type="math/tex; mode=display">π_U(x) =\sum_{i=1}^m{\lambda_ib_i}=B\lambda\\B=[b_1,...,b_m]\in \mathbb R^{n\times m},\lambda=[\lambda_1,...,\lambda_m]^T \in \mathbb R^{m}</script><p>is closest to $x ∈ \mathbb R^n$. The vector connecting $π_U(x) ∈ U$ and $x ∈ \mathbb R^n$ must be orthogonal to all basis vectors of $U$. Therefore, we obtain $m$ simultaneous conditions (assuming the dot product as the inner product)</p><script type="math/tex; mode=display">\left<b_1,x-\pi_U(x)\right>=b_1^T(x-\pi_U(x))=0\\\vdots\\\left<b_m,x-\pi_U(x)\right>=b_m^T(x-\pi_U(x))=0</script><p>which, with $π_U(x) = Bλ$, can be written as</p><script type="math/tex; mode=display">b_1^T(x-B\lambda)=0\\\vdots\\b_m^T(x-B\lambda)=0</script><p>such that we obtain a homogeneous linear equation system</p><script type="math/tex; mode=display">\left[\begin{matrix}b_1^T\\\vdots\\b_m^T\end{matrix}\right]\left[\begin{matrix}x-B\lambda\end{matrix}\right]=0 \LeftrightarrowB^T(x-B\lambda)=0 \Leftrightarrow B^TB\lambda = B^Tx</script><p> The last expression is called <strong>normal equation</strong>. Since $b_1, . . . , b_m$ are a basis of $U$ and, therefore, linearly independent, $B^⊤B ∈ \mathbb R^{m×m}$ is regular and can be inverted. This allows us to solve for the coefficients/coordinates</p><script type="math/tex; mode=display">\lambda = (B^TB)^{-1}B^Tx</script><p>The matrix $(B^⊤B)^{−1}B^⊤$ is also called the <strong>pseudo-inverse</strong> of $B$, which can be computed for non-square matrices $B$. It only requires that $B^⊤$B is positive definite, which is the case if $B$ is full rank. </p></li><li><p>Find the projection $π_U(x) ∈ U$. We already established that $π_U(x) =Bλ$.</p><script type="math/tex; mode=display">\pi_U(x)=B(B^TB)^{-1}B^Tx</script></li><li><p>Find the projection matrix Pπ. We can immediately see that the projection matrix that solves $P_πx = π_U(x)$ must be</p><script type="math/tex; mode=display">P_\pi=B(B^TB)^{-1}B^T</script><p>If $dim(U) = 1$, then $B^⊤B ∈ \mathbb R$ is a scalar and we can rewrite the projection matrix in  $P_π = B(B^⊤B)^{−1}B^⊤$ as $P_π = \frac{BB^⊤}{B^TB}$.</p></li></ol></li><li><p>We just looked at projections of vectors $x$ onto a subspace $U$ with basis vectors ${b_1, . . . , b_k}$. If this basis is an <strong>ONB</strong>, the projection equation  simplifies greatly to</p><script type="math/tex; mode=display">\pi_U(x)=BB^Tx</script><p>since $B^⊤B = I$ with coordinates $λ = B^⊤x$ . This means that we no longer have to compute the inverse, which saves computation time.</p></li><li><p><strong>Gram-Schmidt Orthogonalization</strong>: Projections are at the core of the Gram-Schmidt method that allows us to constructively transform any basis $(b_1, . . . , b_n)$ of an $n$-dimensional vector space $V$ into an orthogonal/orthonormal basis $(u_1, . . . , u_n)$ of $V$. This basis always exists and span$[b_1, . . . , b_n] =span[u_1, . . . , u_n]$. The Gram-Schmidt orthogonalization method iteratively  constructs an orthogonal basis $(u_1, . . . , u_n)$ from any basis $(b_1, . . . , b_n)$ of $V$ as follows:</p><script type="math/tex; mode=display">\begin{split}u_1&:=b_1\\u_k&:=b_k-\pi_{span[u_1,...,u_{k-1}]}(b_k),k=2,...,n\end{split}</script><p>the $k$th basis vector $b_k$ is projected onto the subspace spanned by the first $k − 1$constructed orthogonal vectors $u_1, . . . , u_{k−1}$; This projection is then subtracted from bk and yields a vector $u_k$ that is orthogonal to the $(k − 1)$-dimensional subspace spanned by<br>$u_1, . . . , u_{k−1}$. Repeating this procedure for all $n$ basis vectors $b_1, . . . , b_n$ yields an orthogonal basis $(u_1, . . . , u_n)$ of $V$. If we normalize the $u_k$, we obtain an ONB where $∥uk∥ = 1$ for $k = 1, . . . , n$</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243141.png" alt="Gram-Schmidt Orthogonalization"></p></li><li><p><strong>Projection onto Affine Subspaces</strong>: </p><script type="math/tex; mode=display">\pi_L(x)=x_0+\pi_U(x-x_0)</script><p>the distance of $x$ from the affine space $L$ is identical to the distance of $x − x_0$ from $U$</p><script type="math/tex; mode=display">d(x,L)=\left\|x-\pi_L(x)\right\|=\left\|x-(x_0+\pi_U(x-x_0))\right\|\\=d(x-x_0,\pi_U(x-x_0))=d(x-x_0,U)</script><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243437.png" alt="Projection onto Affine Subspaces"></p></li></ul><h2 id="Rotations"><a href="#Rotations" class="headerlink" title="Rotations"></a>Rotations</h2><ul><li><p><strong>Rotations in $\mathbb R^2$</strong>: Consider the standard basis $\{e_1=\left[\begin{matrix}1\\0\end{matrix}\right],e_2=\left[\begin{matrix}0\\1\end{matrix}\right]\}$  of $\mathbb R^2$, which defines the standard coordinate system in $\mathbb R^2$. We aim to rotate this coordinate system by an angle $θ$. Note that the rotated vectors are still linearly independent and, therefore, are a basis of $\mathbb R^2$. This means that the rotation performs a basis change.  Rotations $Φ$ are linear mappings so that we can express them by ar <em>otation matrix</em> $R(θ)$. Trigonometry allows us to determine the coordinates of the rotated axes (the image of $Φ$) with respect to<br>the standard basis in $\mathbb R^2$. We obtain</p><script type="math/tex; mode=display">\varPhi(e_1)=\left[\begin{matrix}cos \theta\\ sin\theta\end{matrix}\right],\varPhi(e_2)=\left[\begin{matrix}-sin \theta\\ cos\theta\end{matrix}\right]</script><p>Therefore, the rotation matrix that performs the basis change into the rotated coordinates $R(θ)$ is given as</p><script type="math/tex; mode=display">R(\theta)=\left[\begin{matrix}\varPhi(e_1)&\varPhi(e_2)\end{matrix}\right]=\left[\begin{matrix}cos\theta&-sin\theta\\sin\theta&cos\theta\end{matrix}\right]</script><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243880.png" alt="Rotation of the standard basis in R^2"></p></li><li><p><strong>Rotations in $\mathbb R^3$</strong>: In $\mathbb R^3$ we can rotate any two-dimensional plane about a one-dimensional axis. There are therefore three (planar) rotations about the three standard basis vectors.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243360.png" alt="Rotation of a vector (gray) in R^3"></p><ul><li><p>Rotation about the $e_1$-axis:  the $e_1$ coordinate is fixed, and the counterclockwise rotation is performed in the $e_2e_3$ plane.</p><script type="math/tex; mode=display">R_1(\theta)=\left[\begin{matrix}\varPhi(e_1)& \varPhi(e_2)& \varPhi(e_3)\end{matrix}\right]=\left[\begin{matrix}1& 0& 0\\0& cos\theta& -sin\theta\\0& sin\theta& cos\theta\end{matrix}\right]</script></li><li><p>Rotation about the $e_2$-axis: If we rotate the $e_1e_3$ plane about the $e_2$ axis, we need to look at the $e_2$ axis from its “tip” toward the origin.</p><script type="math/tex; mode=display">R_2(\theta)=\left[\begin{matrix}cos\theta& 0& sin\theta\\0& 1& 0\\-sin\theta& 0& cos\theta\end{matrix}\right]</script></li><li><p>Rotation about the $e_3$-axis</p><script type="math/tex; mode=display">R_3(\theta)=\left[\begin{matrix}cos\theta& -sin\theta& 0\\sin\theta& cos\theta& 0\\0& 0& 1\\\end{matrix}\right]</script></li></ul></li><li><p><strong>Rotations in n Dimensions</strong>: The generalization of rotations from $2D$ and $3D$ to $n$-dimensional Euclidean vector spaces can be intuitively described as fixing $n − 2$ dimensions and restrict the rotation to a two-dimensional plane in the $n$-dimensional space. As in the three-dimensional case, we can rotate any plane (two-dimensional subspace of $\mathbb R^n$).</p></li><li><p><strong>Givens Rotation:</strong> Let $V$ be an $n$-dimensional Euclidean vector space and $Φ : V → V$ an automorphism with transformation matrix</p><script type="math/tex; mode=display">R_{ij}(\theta):=\left[\begin{matrix}I_{i-1}& 0& \cdots& \cdots& 0\\0& cos\theta& 0& -sin\theta& 0\\0& 0&I_{j-i-1}& 0& 0\\0& sin\theta& 0& cos\theta& 0\\0& \cdots& \cdots& 0& I_{n-j}\end{matrix}\right] \in \mathbb R^{n\times n}</script><p>for $1 ⩽ i &lt; j ⩽ n$ and $θ ∈ R$. Then $R_{ij}(θ)$ is called a <em>Givens rotation</em>.<br>Essentially, $R_{ij}(θ)$ is the identity matrix $I_n$ with</p><script type="math/tex; mode=display">r_{ii}=cos\theta,\;r_{ij}=-sin\theta,\;r_{ji}=sin\theta,\;r_{jj}=cos\theta</script></li><li><p>Properties of Rotations</p><ul><li>Rotations preserve distances, i.e., $∥x−y∥ = ∥R_θ(x)−R_θ(y)∥$. In other words, rotations leave the distance between any two points unchanged after the transformation.</li><li>Rotations preserve angles, i.e., the angle between $R_θx$ and $R_θy$ equals the angle between $x$ and $y$.</li><li>Rotations in three (or more) dimensions are generally not commutative. Therefore, the order in which rotations are applied is important, even if they rotate about the same point. Only in two dimensions vector rotations are commutative, such that $R(ϕ)R(θ) = R(θ)R(ϕ)$ for all $ϕ, θ ∈ [0, 2π)$. They form an Abelian group (with multiplication) only if they rotate about the same point (e.g., the origin).</li></ul></li></ul><blockquote><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> AnalyticGeometry </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analytic Geometry01</title>
      <link href="/2024/07/26/analyticgeometry01/"/>
      <url>/2024/07/26/analyticgeometry01/</url>
      
        <content type="html"><![CDATA[<h1 id="Analytic-Geometry01"><a href="#Analytic-Geometry01" class="headerlink" title="Analytic Geometry01"></a>Analytic Geometry01</h1><h2 id="Norms"><a href="#Norms" class="headerlink" title="Norms"></a>Norms</h2><ul><li><p><strong>Norm</strong>: A norm on a vector space $V$ is a function </p><script type="math/tex; mode=display">\left\| \cdot \right\|:V\rightarrow \mathbb{R},\\x \mapsto \left\| x \right\|</script><p>which assigns each vector $x$ its length $∥x∥ ∈ \mathbb{R}$, such that for all $λ ∈ \mathbb{R}$ and $x, y ∈ V$ the following hold:</p><ul><li><em>Absolutely homogeneous</em>: $∥λx∥ = |λ|∥x∥$</li><li><em>Triangle inequality</em>: $∥x + y∥ ⩽ ∥x∥ + ∥y∥$</li><li><em>Positive definite</em>: $∥x∥ ⩾ 0$ and $∥x∥ = 0 \Leftrightarrow x = 0$</li></ul></li><li><p><strong>Manhattan Norm</strong>: The <em>Manhattan norm</em> on $\mathbb R^n$ is defined for $ x ∈ \mathbb R^n$ as </p><script type="math/tex; mode=display">\left\| x \right\|_1 := \sum_{i=1}^n |x_i|</script><p>where $| · |$ is the absolute value. All vectors $x ∈ \mathbb R^2$ with $∥x∥_1 = 1$. The Manhattan norm is also called <strong>$ℓ_1$ norm.</strong></p></li><li><p><strong>Euclidean Norm</strong>:  The <em>Euclidean norm</em> of $x ∈ \mathbb R^n$ is defined as</p><script type="math/tex; mode=display">\left\| x \right\|_2 := \sqrt{\sum_{i=1}^n{x_i^2}}=\sqrt{x^Tx}</script><p>and computes the Euclidean distance of $x$ from the origin. All vectors $x ∈ \mathbb R^2$ with $∥x∥_2 = 1$. The Euclidean norm is also called <strong>$\ell_{2}$ norm.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407262243925.png" alt="Manhattan Norm and Euclidean norm"></p></li></ul><h2 id="Inner-Products"><a href="#Inner-Products" class="headerlink" title="Inner Products"></a>Inner Products</h2><ul><li><p><strong>scalar product/dot product</strong>: $x^Ty=\sum_{i=1}^n{x_iy_i}$</p></li><li><p>A bilinear mapping $Ω$ is a mapping with two arguments, and it is linear in each argument, i.e., when we look at a vector space $V$ then it holds that for all $x, y, z ∈ V, λ, ψ ∈ \mathbb R$ that</p><script type="math/tex; mode=display">\varOmega(\lambda x+\psi y,z)=\lambda\varOmega(x,z) + \psi\varOmega(y,z) \\\varOmega(x,\lambda y+\psi z)=\lambda\varOmega(x,y) + \psi\varOmega(x,z)</script><p>The first asserts that $Ω$ is linear in the first argument,and second asserts that $Ω$ is linear in the second argument.</p></li><li><p>Let $V$ be a vector space and $Ω : V×V → \mathbb R$ be a bilinear mapping that takes two vectors and maps them onto a real number. Then</p><ul><li>$Ω$ is called <strong>symmetric</strong> if $Ω(x, y) = Ω(y, x)$ for all $x, y ∈ V$, i.e., the order of the arguments does not matter.</li><li>Ω is called <strong>positive definite</strong> if $∀x ∈ V\backslash \{0\} : Ω(x, x) &gt; 0 , Ω(0, 0) = 0 .$</li></ul></li><li><p>Let V be a vector space and $Ω : V×V → \mathbb R$ be a bilinear mapping that takes two vectors and maps them onto a real number. Then</p><ul><li>A positive definite, symmetric bilinear mapping $Ω : V×V → \mathbb R$ is called an <strong>inner product</strong> on $V$. We typically write $⟨x, y⟩$ instead of $Ω(x, y)$.</li><li>The pair $(V, ⟨·, ·⟩)$​ is called an <strong>inner product space or (real) vector space with inner product</strong>. If we use the dot product, we call $(V, ⟨·, ·⟩)$ a <strong>Euclidean vector space</strong>.</li></ul></li><li><p>Consider an $n$-dimensional vector space $V$ with an inner product $⟨·, ·⟩ :V×V → \mathbb R$  and an ordered basis $B = (b_1, . . . , b_n)$ of $V$. Recall that any vectors $x, y ∈ V$ can be written as linear combinations of the basis vectors so that $x =\sum_{i=1}^nψ_ib_i ∈ V$ and $y=\sum_{j=1}^nλ_jb_j ∈ V$ for suitable $ψ_i, λ_j ∈ \mathbb R$. Due to the bilinearity of the inner product, it holds for all $x, y ∈ V$ that</p><script type="math/tex; mode=display"><x,y>=\left<\sum_{i=1}^nψ_ib_i,\sum_{j=1}^nλ_jb_j \right>=\sum_{i=1}^n\sum_{j=1}^nψ_i<b_i,b_j>λ_j=\hat x^TA \hat y</script><p>where $A_{ij} := ⟨b_i, b_j⟩$ and $\hat x, \hat y$ are the coordinates of $x$ and $y$ with respect to the basis $B$. This implies that the inner product $⟨·, ·⟩$ is uniquely determined through $A$. The symmetry of the inner product also means that $A$ is symmetric. Furthermore, the positive definiteness of the inner product implies that</p><script type="math/tex; mode=display">\forall x\in V \backslash \{0\}:x^TAx > 0</script><p>A symmetric matrix $A ∈ \mathbb R^{n×n}$ that satisfies above equation is called <strong>symmetric, positive definite, or just positive definite</strong>. If only <strong>⩾</strong> holds  then A is called <strong>symmetric,positive semidefinite.</strong></p><blockquote><p>e.g. Consider the matrices</p><script type="math/tex; mode=display">A_1=\left[\begin{matrix}9& 6\\6& 5\end{matrix}\right],A_2=\left[\begin{matrix}9& 6\\6& 3\end{matrix}\right],</script><p>$A_1$ is positive definite because it is symmetric and</p><script type="math/tex; mode=display">\begin{equation}\begin{split}x^TA_1x&=\left[\begin{matrix}x_1& x_2\end{matrix}\right]\left[\begin{matrix}9& 6\\6& 5\end{matrix}\right]\left[\begin{matrix}x_1\\x_2\end{matrix}\right]\\&=9x_1^2+12x_1x_2+5x_2^2=(3x_1+2x_2)^2+x_2^2>0\end{split}\end{equation}</script><p>for all $x ∈ V\backslash \{0\}$. In contrast, $A_2$ is symmetric but not positive definite because $x^TA_xx=9x_1^2+12x_1x_2+3x_2^2=(3x_1+2x_2)^2-x_2^2$ can be less<br>than 0.</p></blockquote></li><li><p>For a real-valued, finite-dimensional vector space $V$ and an ordered basis $B$ of $V$, it holds that $⟨·, ·⟩ : V ×V → \mathbb R$ is an inner product if and only if there exists <strong>a symmetric, positive definite matrix $A ∈ \mathbb R^{n×n}$ with</strong></p><script type="math/tex; mode=display"><x,y>=\hat x^TA\hat y</script><p>The following properties hold if $A ∈ \mathbb R^{n×n}$ is symmetric and positive definite:</p><ul><li><strong>The null space (kernel) of</strong> $A$ <strong>consists only of $0$</strong> because $x^⊤Ax &gt; 0$ for all $x \ne 0$. This implies that $Ax \ne 0$ if $x \ne 0$.</li><li><strong>The diagonal elements $a_{ii}$ of $A$ are positive</strong> because $a_{ii} = e_i^TAe_i &gt; 0$,where $e_i$ is the ith vector of the standard basis in $\mathbb R_n$.</li></ul></li></ul><h2 id="Lengths-and-Distances"><a href="#Lengths-and-Distances" class="headerlink" title="Lengths and Distances"></a>Lengths and Distances</h2><ul><li><p>Inner products and norms are closely related in the sense that any inner product induces a norm $||x||=\sqrt{<x,x>}$. However, not every norm is induced by an inner product. <strong>The Manhattan norm  is an example of a norm without a corresponding inner product.</strong></x,x></p></li><li><p><strong>Cauchy-Schwarz Inequality</strong>: For an inner product vector space $(V, ⟨·, ·⟩)$ the induced norm $∥ · ∥$ satisfies the Cauchy-Schwarz inequality</p><script type="math/tex; mode=display">|<x,y>| \le \left\|x\right\| \left\|y\right\|</script></li><li><p><strong>Distance and Metric</strong>: Consider an inner product space $(V, ⟨·, ·⟩)$. Then</p><script type="math/tex; mode=display">d(x,y):=\left\| x-y \right\|=\sqrt {<x-y,x-y>}</script><p>is called the <strong>distance</strong> between $x and y$ for $x, y ∈ V$. If we use the dot product as the inner product, then the distance is called <strong>Euclidean distance</strong>. The mapping</p><script type="math/tex; mode=display">d:V \times V \rightarrow \mathbb R\\(x,y) \mapsto d(x,y)</script><p>is called a <strong>metric</strong>.</p></li><li><p>A metric $d$ satisfies the following:</p><ul><li>$d$ is <em>positive definite</em>, i.e., $d(x, y) ⩾ 0$ for all $x, y ∈ V$ and $d(x, y) = 0 \Leftrightarrow x = y $.</li><li>$d$ is <em>symmetric</em>, i.e., $d(x, y) = d(y, x)$ for all $x, y ∈ V$.</li><li><em>Triangle inequality:</em> $d(x, z) ⩽ d(x, y) + d(y, z)$ for all $x, y, z ∈ V$.</li></ul></li></ul><h2 id="Angles-and-Orthogonality"><a href="#Angles-and-Orthogonality" class="headerlink" title="Angles and Orthogonality"></a>Angles and Orthogonality</h2><ul><li><p>Assume that $x \ne 0, y \ne 0$. Then</p><script type="math/tex; mode=display">-1 \le \frac{<x,y>}{\left\|x\right\|\left\|y\right\|} \le 1</script><p>Therefore, there exists a unique $ω ∈ [0, π]$</p><script type="math/tex; mode=display">cos \omega = \frac{<x,y>}{\left\|x\right\|\left\|y\right\|}</script><p>The number $ω$ is the angle between the vectors $x$ and $y$.</p><blockquote><p>e.g. $x=[1,1]^T,y=[1,2]^T$ . we use the dot product as the inner product</p><script type="math/tex; mode=display">cos \omega = \frac{<x,y>}{\sqrt{<x,x>}{<y,y>}}=\frac{x^Ty}{\sqrt{x^Txy^Ty}}=\frac{3}{\sqrt{10}}</script></blockquote></li><li><p><strong>Orthogonality</strong>: Two vectors $x$ and $y$ are <em>orthogonal</em> if and only if $⟨x, y⟩ = 0$, and we write $x ⊥ y$. If additionally $∥x∥ = 1 = ∥y∥$,i.e., the vectors are unit vectors, then $x$ and $y$ are <em>orthonormal</em>.  The $0$-vector is orthogonal to every vector in the vector space.</p></li><li><p>Vectors that are orthogonal with respect to one inner product do not have to be orthogonal with respect to a different inner product.</p></li><li><p><strong>Orthogonal Matrix</strong>: A square matrix $A ∈ \mathbb R^{n×n}$ is an orthogonal matrix if and only if its columns are orthonormal so that</p><script type="math/tex; mode=display">AA^T=I=A^TA</script><p>which implies that $ A^{-1}=A^T$ i.e., the inverse is obtained by simply transposing the matrix.</p></li><li><p>Transformations by orthogonal matrices are special because the length of a vector $x$ is not changed when transforming it using an orthogonal matrix $A$.</p><script type="math/tex; mode=display">\left\|Ax\right\|^2=(Ax)^T(Ax)=x^TA^TAx=x^TIx=x^Tx=\left\|x\right\|^2</script><p>Moreover, the angle between any two vectors $x, y$, as measured by their inner product, is also unchanged when transforming both of them using an orthogonal matrix $A$.</p><script type="math/tex; mode=display">cos \omega = \frac{(Ax)^T(Ay)}{\left\|Ax\right\|\left\|Ay\right\|}=\frac{x^TA^TAy}{\sqrt{x^TA^TAxy^TA^TAy}}=\frac{x^Ty}{\left\|x\right\|\left\|y\right\|}</script></li></ul><blockquote><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> AnalyticGeometry </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy命令行与Shell</title>
      <link href="/2024/07/26/scrapy-pa-chong-xi-lie-zhi-scrapy-ming-ling-xing-yu-shell/"/>
      <url>/2024/07/26/scrapy-pa-chong-xi-lie-zhi-scrapy-ming-ling-xing-yu-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy命令行"><a href="#Scrapy命令行" class="headerlink" title="Scrapy命令行"></a>Scrapy命令行</h1><ul><li><p>Scrapy提供了两种类型的命令:一种必须在Scrapy项目中运行，称为<strong>项目命令</strong>;另一种则不需要在 Scrapy 项目中运行，称为<strong>全局命令</strong>。</p></li><li><p>7个全局命令：</p><ul><li><strong><code>startproject</code></strong>:创建项目。</li><li><strong><code>settings</code></strong>:查看设置信息。</li><li><strong><code>runspider</code></strong>:运行爬虫。</li><li><strong><code>shell</code></strong>:打开Shell调试。</li><li><strong><code>fetch</code></strong>:下载网页信息。</li><li><strong><code>view</code></strong>:使用浏览器打开指定网址。</li><li><strong><code>version</code></strong>:查看版本号。</li></ul></li><li><p>7个项目命令：</p><ul><li><strong><code>crawl</code></strong>:运行指定的爬虫。</li><li><strong><code>check</code></strong>:检查爬虫代码。</li><li><strong><code>list</code></strong>:列出所有的爬虫。</li><li><strong><code>edit</code></strong>:使用默认的编辑器编辑爬虫文件。</li><li><strong><code>parse</code></strong>:使用爬虫抓取指定的URL。</li><li><strong><code>genspider</code></strong>:创建爬虫。</li><li><code>bench</code>:快速的性能测试。</li></ul></li><li><p><strong>使用startproject创建项目</strong></p><ul><li><strong><code>scrapy startproject &lt;project_name&gt; [project_dir]</code></strong></li><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407261049364.png" alt="使用startproject创建项目"></li><li>项目目录<ul><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407261049147.png" alt="Scrapy项目目录"></li><li>scrapy.cfg 为全局配置文件，包含定义项目设置的Python模块。</li><li>item.py中定义Scrapy的输出内容。</li><li>middlewares.py 中定义各种中间件，主要为了处理各种Request/Response。</li><li>pipelines.py中定义管道，功能为如何处理抓取到的数据。</li><li>setting.py为项目配置文件，所有的管道、中间件等其他参数必须在setting.py中激活才能生效。</li><li>spiders子文件夹中存放所有的爬虫文件。</li></ul></li></ul></li><li><p><strong>使用genspider创建爬虫</strong></p><ul><li><p>进入项目目录执行：<strong><code>scrapy genspider [-t template] &lt;name&gt; &lt;domain&gt;</code></strong><br>其中-t可以指定使用的爬虫模板，<name>为爬虫名称，<domain>用于生成allowed_domains和start_urls Spider属性值。</domain></name></p></li><li><p>爬虫模板</p><ul><li><strong>basic</strong>：基本爬虫模板</li><li><strong>crawl</strong>：生成继承CrawlSpider爬虫类的Spider</li><li><strong>csvfeed</strong>：生成继承CSVFeedSpider爬虫类的 Spider</li><li><strong>xmlfeed</strong>：生成继承XMLFeedSpider爬虫类的 Spider</li></ul></li><li><pre><code class="lang-shell">scrapy genspider -t crawl test test.com# 此时会在spider目录下生成一个名为test.py的爬虫文件</code></pre></li></ul></li><li><p><strong>使用crawl启动爬虫</strong>:<strong><code>scrapy crawl &lt;spidername&gt;</code></strong></p></li><li><p><strong>使用list查看爬虫</strong>:<strong><code>scrapy list</code></strong></p></li><li><p><strong>使用fetch获取数据</strong>:<strong><code>scrapy fetch [options] &lt;url&gt;</code></strong></p><ul><li>该命令使用Scrapy默认的下载器下载指定的URL页面。</li><li>如果在项目中运行此命令，会自动使用项目中 Spider 的相关设置，而在项目外运行则使用默认的设置。</li><li>options说明<ul><li>—spider=SPIDER:使用指定的Spider 代替默认值。</li><li>—headers:打印返回Response 的 headers，默认打印Response 的 body部分。</li><li>—no-redirect:取消重定向抓取，默认抓取重定向的URL数据。</li><li>—nolog:取消日志的打印，直接显示数据。</li></ul></li></ul></li><li><p><strong>使用runspider运行爬虫</strong>：<strong><code>scrapy runspider [options] spider.py</code></strong></p><ul><li>该命令可以在未创建项目时直接运行Spider爬虫文件。它比较有用的参数是—output=FILE或者-o FILE，将抓取结果保存到FILE文件中。</li><li>适用于简单快速的爬虫任务。</li></ul></li><li><p><strong>通过view使用浏览器打开URL</strong>：<strong><code>scrapy view &lt;url&gt; [options]</code></strong></p></li><li><p><strong>使用parse测试爬虫</strong>：<strong><code>scrapy parse [options] http://example.com/</code></strong></p><ul><li>parse是一个非常有用的命令，这个命令经常作为测试爬虫使用。可以为此命令指定Spider、Pipeline (管道)、回调函数等一系列爬虫参数。</li><li>—spider=SPIDER:使用特定的爬虫处理。</li><li>—a NAME=VALUE:设定爬虫参数。</li><li>—callback or -c:处理Response 的回调函数。</li><li>—meta or -m:为Request传的参数，例如– meta=’{“foo” : “bar”}’。</li><li>—pipelines:使用管道处理Item。</li><li>—rules or -r:使用CrawlSpider时指定的rules。</li><li>—noitems:不显示爬取的Item。</li><li>—nolinks:不显示解析的链接。</li></ul></li></ul><h1 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h1><ul><li>Scrapy Shell是一个交互终端，可以在未启动Spider的情况下调试代码。该终端用来测试XPath或CSS表达式，测试其能否从抓取的网页中正确地提取数据。</li><li>启动命令: <strong><code>scrapy shell &lt;url&gt;</code></strong><ul><li>url为待爬取的网址，也可以打开本地文件（需加上路径）</li></ul></li><li>与普通Python控制台相比，Scrapy Shell多了一些Scrapy爬虫中特有的功能<ul><li><strong><code>shelp()</code></strong>:打印出所有可使用的属性与命令。</li><li><strong><code>fetch(url[, redirect=True])</code></strong>:从给定的URL获取一个新的Response，同时更新所有相关的项目数据。当指定redirect=False时，不会获取重定向的数据。</li><li><strong><code>fetch(request)</code></strong>:根据给定的Request 获取一个新的Response，同时更新所有相关的项目数据。</li><li><strong><code>view(response)</code></strong>:使用指定的Response打开浏览器，方便检查抓取数据。当使用这条命令的时候，为使外部的图像或者表格等正确显示，会自动为Response中添加一个<code>&lt;base&gt;</code>标签，指定基准URL，也就是Response对应的URL。</li></ul></li><li>使用Scrapy Shell下载页面时，会自动生成一些对象<ul><li><strong><code>crawler</code></strong>:当前使用的crawler。</li><li><strong><code>spider</code></strong>:处理当前页面使用的spider，当没有指定spider时，则是一个Spider对象。</li><li><strong><code>request</code></strong>:获取最新页面所对应的Request。</li><li><strong><code>response</code></strong>:获取最新页面所对应的Response。</li><li><strong><code>settings</code></strong>:当前的Scrapy配置信息。</li></ul></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Scrapy简介</title>
      <link href="/2024/07/26/scrapy-pa-chong-xi-lie-zhi-scrapy-jian-jie/"/>
      <url>/2024/07/26/scrapy-pa-chong-xi-lie-zhi-scrapy-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy简介"><a href="#Scrapy简介" class="headerlink" title="Scrapy简介"></a>Scrapy简介</h1><ul><li><p>Scrapy是一个使用Python实现的，为了爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。只需要定制开发几个模块就可以轻松地实现一个爬虫，用来抓取网页内容以及各种图片，非常方便。Scrapy使用了<strong>Twisted</strong>异步网络框架来处理网络通信，可以加快下载速度，并且包含各种中间件接口，可以灵活地完成各种需求。</p></li><li><p><strong>安装Scrapy</strong>： <strong><code>pip install scrapy</code></strong></p><p>命令行输入scrapy验证是否安装成功<img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407261047093.png" alt="Scrapy安装成功"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407261047955.png" alt="Scrapy框架"></p><ul><li><p>框架组件</p><ul><li><strong>Scrapy Engine (引擎)</strong>:负责所有组件的数据传递，触发相应操作。</li><li><strong>Scheduler(调度器)</strong>:负责接收引擎发送的Request请求并排入队列，当引擎请求Request时再传递给引擎。</li><li><strong>Downloader (下载器)</strong>:接收引擎传递的 Request请求并下载页面数据，然后将其获取到的Response传递给引擎，由引擎传递给Spider 进行处理。</li><li><strong>Spider (爬虫)</strong>:用户主要编写的爬虫文件就是此部分文件，它负责处理引擎传递过来的Response，从中分析提取数据，获取的Item字段传递给Item Pipeline 处理，需跟进的URL传递给引擎，经由引擎传递给Scheduler(调度器)。</li><li><strong>Item Pipeline (管道)</strong>:负责处理从Spider中获取到的Item，进行过滤、存储等操作。</li><li><strong>Downloader Middlewares (下载中间件)</strong>:主要处理Scrapy引擎与下载器之间的请求及响应。</li><li><strong>Spider Middlewares (Spider中间件)</strong>:主要工作是处理蜘蛛的响应输入和请求输出。</li></ul></li><li><p>工作流程</p><p>(1) Scrapy引擎从Spider 获取起始Request。</p><p>(2) Scrapy引擎将获取到的Request 发给调度中心排队入列。</p><p>(3) Scrapy引擎从调度中心请求获取需要处理的Request。</p><p>(4) Scrapy引擎获取到需处理的Request后，将 Request 发给下载器。</p><p>(5) Request在传递给下载器的过程中会经过下载器中间件，对 Request进行处理。</p><p>(6) 下载器根据Request 从 Internet下载内容，封装成Response对象传递给Scrapy引擎。</p><p>(7) 下载器将 Response传递给Scrapy引擎时，也会经过下载器中间件，对Response进行处理。</p><p>(8) Scrapy引擎将接收到的Response 传递给Spider进行处理。</p><p>(9) Response传递给Spider 的过程中，会经过Spider 中间件，对 Response进行处理。</p><p>(10) Spider 接收Response，处理完之后会生成一个包含需要继续爬取的网址的Request和一个Item对象组成的 Result，将 Result传递给Scrapy 引擎。</p><p>(11) Result传递给Scrapy的过程中会再次经过Spider中间件进行相应的处理。</p><p>(12) Scrapy引擎获取到Spider传递的Result，将其中的 Item发送给Item Pipeline处理，将其中的Request发给调度器排队入列。</p><p>(13) Item Pipeline会对数据进行进一步的处理，包括整理、保存等。</p></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear Algebra</title>
      <link href="/2024/07/25/linearalgebra/"/>
      <url>/2024/07/25/linearalgebra/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h1><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li><strong>vector</strong><ul><li>can be added together</li><li>can be multiplied by scalars</li></ul></li><li><strong>some examples of vector objects</strong><ul><li><strong><code>Geometric vectors</code></strong><ul><li>directed segments</li><li>direction and magnitude</li><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251630723.png" alt="Geometric vectors"></li></ul></li><li><strong><code>Polynomials</code></strong><ul><li>can be added together, which results in another polynomial</li><li>can be multiplied by a scalar  λ, and the result is a polynomial as well</li><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251631853.png" alt="Polynomials"></li></ul></li><li><strong><code>Audio signals</code></strong></li><li><strong>Elements of R^n^</strong>  (tuples of n real numbers)</li></ul></li></ul><h2 id="Systems-of-Linear-Equations"><a href="#Systems-of-Linear-Equations" class="headerlink" title="Systems of Linear Equations"></a>Systems of Linear Equations</h2><ul><li><p>Systems of Linear Equations</p><script type="math/tex; mode=display">a_{11}x_1+\cdots+a_{1n}x_n=b_1\\\vdots\\a_{m1}x_1+\cdots+a_{mn}x_n=b_m</script></li><li><p>Geometric Interpretation of Systems of Linear Equations</p><ul><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251631381.png" alt="Geometric Interpretation"></li><li>The solution space of a system of two linear equations with two variables can be geometrically interpreted as the intersection of two lines. Every linear equation represents a line.This intersection set can be a line (if the linear equations describe the same line), a point, or empty (when the lines are parallel).</li><li>For three variables, each linear equation determines a plane in three-dimensional space.The intersection set can a solution set that is a plane, a line, a point or empty (when the planes have no common intersection).</li></ul></li><li><p>Matrix representation of systems of linear equations</p><script type="math/tex; mode=display">\left[ \begin{array}{c}        a_{11}\\        \vdots\\        a_{m1}\\\end{array} \right] x_1+\left[ \begin{array}{c}        a_{12}\\        \vdots\\        a_{m2}\\\end{array} \right] x_2+\cdots+\left[ \begin{array}{c}        a_{1n}\\        \vdots\\        a_{mn}\\\end{array} \right] x_n=\left[ \begin{array}{c}        b_{1}\\        \vdots\\        b_{m}\\\end{array} \right] \Leftrightarrow \left[ \begin{matrix}        a_{11}&        \cdots&        a_{1n}\\        \vdots&        &            \vdots\\        a_{m1}&        \cdots&        a_{mn}\\\end{matrix} \right] \left[ \begin{array}{c}        b_1\\        \vdots\\        b_m\\\end{array}\right]</script></li></ul><h2 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h2><ul><li><p><strong>Matrices</strong></p><ul><li>represent systems of linear equations</li><li>represent linear functions (linear mappings)</li></ul></li><li><p><strong>a real-valued (m,n) matrix A</strong></p><script type="math/tex; mode=display">\left[ \begin{matrix}        a_{11}&        a_{12}&        \cdots&        a_{1n}\\        a_{21}&        a_{22}&        \cdots&        a_{2n}\\        \vdots&        \vdots&        &            \vdots\\        a_{m1}&        a_{m2}&        \cdots&        a_{mn}\\\end{matrix} \right]</script></li><li><p><strong>R^m×n^ is the set of all real-valued (m,n)-matrices. A ∈ R^m×n^ can be</strong><br><strong>equivalently represented as a ∈ R^mn^ by stacking all n columns of the</strong><br><strong>matrix into a long vector;</strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251632155.png" alt="Equivalently represent"></p></li><li><p><strong>Matrix Addition</strong></p><script type="math/tex; mode=display">A+B:=\left[\begin{matrix}a_{11}+b_{11}& \cdots& a_{1n}+b_{1n}\\\vdots& & \vdots\\a_{m1}+b_{m1}& \cdots& a_{mn}+b_{mn}\end{matrix}\right]\in \mathbb R^{m\times n}</script></li><li><p><strong>Matrix Multiplication</strong>: <strong><code>dot product</code></strong></p><script type="math/tex; mode=display">C=AB\in R^{m\times k}\Leftrightarrow c_{ij}=\sum_{l=1}^n{a_{il}b_{lj}},i=1,\cdots,m, j=1,\cdots,k</script><blockquote><p>Commonly, the dot product between two vectors a, b is denoted by a^⊤^b or ⟨a, b⟩.</p><p><strong>Hadamard product</strong>: an element-wise multiplication <strong>c~ij~=a~ij~b~ij~</strong></p></blockquote><ul><li><strong>not commutative</strong> <code>AB≠BA</code></li></ul></li><li><p><strong>Identity Matrix</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251635239.png" alt="Identity Matrix"></p></li><li><p><strong>Some properties of matrices</strong></p><ul><li><strong><code>Associativity</code></strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251635359.png" alt="Associativity"></li><li><strong><code>Distributivity</code></strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251635397.png" alt="Distributivity"></li><li><strong><code>Multiplication with the identity matrix</code></strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251635823.png" alt="Multiplication with the identity matrix"></li></ul></li><li><p><strong>Inverse</strong></p><ul><li><p>Consider a square matrix $A\in R^{n\times n}$. Let matrix $B\in R^{n\times n}$ have the property that $AB=I_{n}=BA$. $B$ is called the inverse of $A$ and denoted by $A^{−1}$.</p></li><li><p>If the inverse <strong>does</strong> exist, A is called <strong>regular/invertible/nonsingular</strong>, otherwise <strong>singular/noninvertible</strong>.</p></li><li><p>When the matrix inverse exists, it is unique.</p></li><li><p>Existence of the Inverse of a 2 × 2-matrix: $a_{11}a_{22}-a_{12}a_{21}\ne0$</p><script type="math/tex; mode=display">A:=\left[ \begin{matrix}        a_{11}&        a_{12} \\        a_{21}&        a_{22}\end{matrix} \right] \in R^{2\times 2}\\A^{-1}:=\frac{1}{a_{11}a_{22}-a_{12}a_{21}} \left[ \begin{matrix}        a_{22}&        -a_{12} \\        -a_{21}&        a_{11}\end{matrix} \right]</script></li></ul></li><li><p><strong>Transpose</strong></p><ul><li>For $A ∈ R^{m×n}$ the matrix $B ∈ R^{n×m}$ with $b_{ij} = a_{ji}$ is called the transpose of $A$. We write $B = A^⊤$</li><li>$A^⊤$ can be obtained by <strong>writing the columns of $A$ as the rows of $A^⊤$</strong></li></ul></li><li><p><strong>Properties of inverses and transposes</strong></p><script type="math/tex; mode=display">AA^{-1}= I =A^{-1}A \\(AB)^{-1} =  B^{-1} A^{-1} \\(A+B)^{-1} \ne A^{-1} + B^{-1} \\(A^{T})^{T} = A \\ (A+B)^{T} = A^{T} + B^{T} \\(AB)^{T} = B^{T} A^{T}</script></li><li><p><strong>Symmetric Matrix</strong>:  $A = A^⊤,A ∈ R^{n×n}$.</p><ul><li>only <strong>(n, n)-matrices</strong>(square matrices) can be symmetric</li><li>if $A$ is invertible, then so is $A^⊤$, and $(A^{−1})^{⊤} = (A^⊤)^{−1} =: A^{−⊤}$.</li><li>The sum of symmetric matrices is always symmetric but not product.</li></ul></li><li><p><strong>Matrices multiplication by a Scalar</strong>: $\lambda A = K, K_{ij} = \lambda a_{ij},\lambda \in R,A \in R^{m\times n}$</p><ul><li><p>For $\lambda,\psi \in R$</p></li><li><p><strong><code>Associativity</code></strong></p><script type="math/tex; mode=display">(\lambda \psi)C = \lambda(\psi C),C\in R^{m\times n}\\\lambda(BC) = (\lambda B)C = B(\lambda C) = (BC)\lambda,B\in R^{m\times n},C\in R^{n\times k}\\(\lambda C)^T = C^T\lambda^T=C^T\lambda=\lambda C^T</script></li><li><p><strong><code>Distributivity</code></strong></p><script type="math/tex; mode=display">(\lambda + \psi)C = \lambda C + \psi C,C\in R^{m\times n}\\\lambda(B+C) = \lambda B + \lambda C,\quad B,C\in R^{m\times n}\\</script></li></ul></li></ul><h2 id="Solving-Systems-of-Linear-Equations"><a href="#Solving-Systems-of-Linear-Equations" class="headerlink" title="Solving Systems of Linear Equations"></a>Solving Systems of Linear Equations</h2><ul><li><strong>The particular solution and general solution</strong></li><li>Three steps<ol><li>Find a particular solution to $Ax = b$.</li><li>Find all solutions to $Ax = 0$.</li><li>Combine the solutions from steps 1. and 2. to the general solution.</li></ol></li><li>Neither the general nor the particular solution is unique</li><li><strong>Gaussian elimination</strong>: transforme any system of linear equations into the particularly simple form. Key to Gaussian elimination are <strong>elementary transformations</strong>.</li><li><strong>Elementary transformations</strong><ul><li><strong><code>Exchange</code></strong> of two equations (rows in the matrix representing the system of equations)</li><li><strong><code>Multiplication</code></strong> of an equation (row) with a constant $λ ∈ R \backslash \{0\}$</li><li><strong><code>Addition</code></strong> of two equations (rows)</li></ul></li></ul><blockquote><p><strong>e.g. </strong>  For  <strong>a ∈ R</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251635152.png" alt="System of linear equations"></p><p>the augmented matrix (in the form$\left [<br>\begin{array}{c|c}<br>\begin{matrix}<br>\mathbf A<br>\end{matrix}&amp;<br>\begin{matrix}<br>\mathbf b<br>\end{matrix}<br>\end{array}<br>\right ]$):</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251636698.png" alt="the augmented matrix"></p><p>Swapping Rows 1 and 3 leads to</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251636098.png" alt="Elementary transformations01"></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251636764.png" alt="Elementary transformations02"></p><p>This (augmented) matrix is in a convenient form, the <strong>row-echelon form(REF)</strong></p><p>Reverting this compact notation back into the explicit notation with the variables we seek</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251636233.png" alt="REF"></p><p>Only for a = −1 this system can be solved.</p><p>A particular solution is</p><script type="math/tex; mode=display">\left[\begin{matrix}        x_{1} \\        x_{2} \\     x_{3} \\     x_{4} \\     x_{5} \\\end{matrix} \right] = \left[\begin{matrix}        2 \\        0 \\     -1 \\     1 \\     0 \\\end{matrix} \right]</script><p>The general solution</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251637135.png" alt="general solution"></p></blockquote><ul><li><p><strong>Pivots and Staircase Structure</strong>: The leading coefficient of a row (first nonzero number from the left) is called the pivot and is always strictly to the right of the pivot of the row above it</p></li><li><p><strong>Row-Echelon Form</strong></p><ul><li>All rows that contain <strong>only zeros</strong> are at the <strong>bottom</strong> of the matrix; all rows that contain at <strong>least one nonzero</strong> element are on <strong>top</strong> of rows that contain only zeros.</li><li>Looking at nonzero rows only, <strong>the first nonzero number</strong> from the left (also called the pivot or the leading coefficient) is always strictly to the right of the pivot of the row above it.</li></ul></li><li><p><strong>Basic and Free Variables</strong></p><ul><li>The variables corresponding to the <strong>pivots</strong> in the row-echelon form are called <strong>basic variables</strong> and the other variables are <strong>free variables</strong>. </li><li>In the above example, x1, x3, x4 are basic free variable, whereas x2, x5 are free variables.</li></ul></li><li><p><strong>Obtaining a Particular Solution</strong></p><ul><li><p>We express the right-hand side of the equation system using the pivot columns, such that $b=\sum_{i=1}^P{\lambda_ip_i}$ ,where $p_i,i=1,\cdots,P$​​ are <strong>the pivot columns</strong>.The $λ_i$ are determined easiest if we start with the rightmost pivot column and work our way to the left</p></li><li><p>In the previous example, we would try to find $λ_1, λ_2, λ_3$ so that</p><script type="math/tex; mode=display">\lambda_1 \left[\begin{matrix} 1 \\0 \\0 \\0 \\\end{matrix}\right] +\lambda_2 \left[\begin{matrix} 1 \\1 \\0 \\0 \\\end{matrix}\right] +\lambda_3 \left[\begin{matrix} -1 \\-1 \\1 \\0 \\\end{matrix}\right] =\left[\begin{matrix} 0 \\-2 \\1 \\0 \\\end{matrix}\right]</script><p>$\lambda_1=2,\lambda_2=-1,\lambda_3=1$ And we must not forget <strong>the non-pivot columns</strong><br><strong>for which we set the coefficients implicitly to 0.</strong><br>Therefore, we get the particular solution $\mathbf x=[2,0,-1,1,0]^T$</p></li></ul></li><li><p><strong>Reduced Row Echelon Form</strong></p><ul><li>It is in <strong>row-echelon form</strong>.</li><li><strong>Every pivot is 1</strong>.</li><li>The pivot is the <strong>only nonzero</strong> entry in its column.</li></ul></li><li><p>The reduced row-echelon form allows us to determine the general solution of a system of linear equations in a straightforward way.</p><script type="math/tex; mode=display">A=\left[\begin{matrix}\mathbf 1& 3& 0& 0&    3 \\0& 0& \mathbf 1& 0&    9 \\0& 0& 0& \mathbf 1&    -4 \\\end{matrix}\right]</script><ul><li>The key idea for finding the solutions of $Ax = 0$ is to look at <strong>the non-pivot columns</strong>, which we will need to express as <strong>a (linear) combination of the pivot columns</strong>.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251637666.png" alt="reduced row-echelon "><script type="math/tex; mode=display">\left\{x\in R^5:x=\lambda_1 \left[\begin{matrix}3  \\-1  \\0 \\0 \\0 \\\end{matrix}\right]+ \lambda_2\left[\begin{matrix}3  \\0  \\9 \\-4 \\-1 \\\end{matrix}\right],\lambda_1,\lambda_2\in R\right\}</script></li></ul></li><li><p>A practical trick for reading out the solutions $x$ of a homogeneous system of linear equations $Ax = 0$, where $A ∈ R^{k×n}, x ∈ R^{n}$.</p><ul><li><p>We assume that $A$ is in reduced row-echelon form without anyrows that just contain zeros<img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251638273.png" alt="reduced row-echelon form"></p><p>where ∗ can be an arbitrary real number, with the constraints that the first nonzero entry per row must be 1 and all other entries in the corresponding column must be 0.</p></li><li><p>The columns $j_1, . . . , j_k$ with the pivots (marked in <strong>bold</strong>) are the standard unit vectors $e_1, . . . , e_k ∈ R^k$. We extend this matrix to an $n × n$-matrix $\tilde A$ by adding $n − k$ rows of the form</p><script type="math/tex; mode=display">\left[\begin{matrix} 0& \cdots& 0& -1& 0& \cdots& 0\end{matrix} \right]</script><p>so that the diagonal of the augmented matrix $\tilde A$ contains either 1 or −1.</p></li><li><p><strong>The columns of $\tilde A$ that contain the −1 as pivots are solutions of the homogeneous equation system $Ax = 0$.</strong></p></li></ul><blockquote><p>e.g. reduced REF</p><script type="math/tex; mode=display">A=\left[\begin{matrix}1& 3& 0& 0&    3 \\0& 0& 1& 0&    9 \\0& 0& 0& 1&    -4 \\\end{matrix}\right]</script><p>We now augment this matrix to a 5 × 5 matrix by <strong>adding rows of the form at the places where the pivots on the diagonal are missing.</strong></p><script type="math/tex; mode=display">\tilde A = \left[\begin{matrix}1& 3& 0& 0&    3 \\\mathbf0& \mathbf{-1}& \mathbf0& \mathbf0& \mathbf0 \\0& 0& 1& 0&    9 \\0& 0& 0& 1&    -4 \\\mathbf0& \mathbf0& \mathbf0& \mathbf0&    \mathbf{-1} \\\end{matrix}\right]</script><p>We can immediately read out the solutions of $Ax = 0$ by taking the columns of $\tilde A$, which contain −1 on the diagonal:</p><script type="math/tex; mode=display">\left\{x\in R^5:x=\lambda_1 \left[\begin{matrix}3  \\-1  \\0 \\0 \\0 \\\end{matrix}\right]+ \lambda_2\left[\begin{matrix}3  \\0  \\9 \\-4 \\-1 \\\end{matrix}\right],\lambda_1,\lambda_2\in R\right\}</script></blockquote></li><li><p><strong>Calculating the Inverse</strong></p><ul><li><p>We use the augmented matrix notation for a compact representation of this set of systems of linear equations and obtain</p><script type="math/tex; mode=display">\left[\begin{array}{c|c}A& I_n\end{array}\right] \rightarrow \cdots \rightarrow\left[\begin{array}{c|c}I_n & A^{-1}\end{array}\right]</script></li><li><p>If we bring the augmented equation system into reduced row-echelon form, we can read out the inverse on the right-hand side of the equation system.</p></li></ul><blockquote><p>e.g. </p><script type="math/tex; mode=display">A=\left[\begin{matrix}1& 0& 2& 0 \\1& 1& 0& 0 \\1& 2& 0& 1 \\1& 1& 1& 1 \\\end{matrix}\right]</script><p>the augmented matrix</p><script type="math/tex; mode=display">A=\left[\begin{matrix}1& 0& 2& 0& 1& 0& 0& 0\\1& 1& 0& 0& 0& 1& 0& 0\\1& 2& 0& 1& 0& 0& 1& 0\\1& 1& 1& 1& 0& 0& 0& 1\\\end{matrix}\right]</script><p>use Gaussian elimination to bring it into reduced row-echelon form</p><script type="math/tex; mode=display">\left[\begin{array}{c|c}I_n & A^{-1}\end{array}\right] = \left[\begin{array}{c|c} \begin{matrix}1& 0& 0& 0& \\0& 1& 0& 0& \\0& 0& 1& 0& \\0& 0& 0& 1& \\\end{matrix} & \begin{matrix}-1& 0& -2& 2\\1& -1& 2& -2\\1& -1& 1& -1\\-1& 0& -1& 2\\\end{matrix}\end{array}\right]</script></blockquote></li><li><p>If A is <strong>a square matrix and invertible</strong>, the solution of $Ax = b$ is given as $x = A^{−1}b$. Otherwise, under mild assumptions (i.e., A needs to have linearly independent columns) we can use the transformation</p><script type="math/tex; mode=display">Ax=b\LongleftrightarrowA^TAx=A^Tb\Longleftrightarrowx=(A^TA)^{-1}A^Tb</script><p>the Moore-Penrosepseudo-inverse：$(A^TA)^{-1}A^T$</p></li><li><p>Systems of many linear equations are solved indirectly, by either stationary iterative methods, such as <strong>the Richardson method, the Jacobi method, the Gauß-Seidel method, and the successive over-relaxation method, or Krylov subspace methods, such as conjugate gradients, generalized minimal residual, or biconjugate gradients.</strong></p></li><li><p>Let $x_∗$ be a solution of $Ax = b$. The key idea of these iterative methods is to set up an iteration of the form</p><script type="math/tex; mode=display">x^{(k+1)} = Cx^{(k)} + d</script><p>for suitable $C$ and $d$ that reduces the residual error $∥x^{(k+1)}−x_∗∥$ in every iteration and converges to $x_∗$.</p></li></ul><h2 id="Vector-Spaces"><a href="#Vector-Spaces" class="headerlink" title="Vector Spaces"></a>Vector Spaces</h2><ul><li><p><strong>Group</strong>: Consider a set $\mathcal G$ and an operation $\otimes : \mathcal G\times \mathcal G → \mathcal G$ defined on $\mathcal G$. Then $G := (\mathcal G, ⊗)$ is called a group if the following hold:</p><ul><li><strong>Closure</strong> of $\mathcal G$ under ⊗: $∀x, y ∈ \mathcal G : x ⊗ y ∈ \mathcal G$</li><li><strong>Associativity</strong>: $∀x, y, z ∈ \mathcal G : (x ⊗ y) ⊗ z = x ⊗ (y ⊗ z)$</li><li><strong>Neutral element</strong>: $∃e ∈ \mathcal G \;∀x ∈ \mathcal G : x ⊗ e = x \quad and \quad e ⊗ x = x$</li><li><strong>Inverse element</strong>: $∀x ∈ \mathcal G \;∃y ∈ \mathcal G : x ⊗ y = e \quad and \quad y ⊗ x = e$, where $e$ is the neutral element. We often write $x^{−1}$ to denote the inverse element of $x$. (The inverse element is defined with respect to the operation ⊗ and does not necessarily mean $\frac{1}{x}$)</li></ul></li><li><p>If additionally $∀x, y ∈ \mathcal G : x ⊗ y = y ⊗ x$, then $G = (\mathcal G, ⊗)$ is an Abelian group (commutative).</p></li><li><p>Some examples of sets with associated operations</p><ul><li><strong>$(\mathbb Z, +)$ is an Abelian group.</strong></li><li>$(\mathbb N_0, +)$ is not a group: Although $(\mathbb N_0, +)$ possesses a neutral element(0), the inverse elements are missing.  $\mathbb N_0 := \mathbb N∪ \{0\}$</li><li>$(\mathbb Z, ·)$ is not a group: Although $(\mathbb Z, ·)$ contains a neutral element (1), the inverse elements for any $z ∈ \mathbb Z, z \ne ±1$, are missing.</li><li>$(\mathbb R, ·)$ is not a group since 0 does not possess an inverse element</li><li><strong>$(\mathbb R\backslash\{0\}, ·)$ is Abelian</strong></li><li>$(\mathbb R^n, +), (\mathbb Z^n, +), n ∈ \mathbb N$ <strong>are Abelian</strong> if $+$ is defined componentwise, i.e.,<br>$(x_1, · · · , x_n) + (y_1, · · · , y_n) = (x_1 + y_1, · · · , x_n + y_n)$<br>Then, $(x_1, · · · , x_n)^{−1}:= (−x_1, · · · , −x_n)$ is the inverse element and $e = (0, · · · , 0) $is the neutral element.</li><li><strong>$(\mathbb R^{m×n}, +)$, the set of $m× n$-matrices is Abelian</strong> (with componentwise addition)</li><li>$(\mathbb R^{n×n}, ·)$，the set of n×n-matrices with matrix multiplication<ul><li>Closure and associativity follow directly from the definition of matrix multiplication.</li><li>Neutral element: The <strong>identity matrix</strong> $I_n$ is the neutral element with respect to matrix multiplication “·” in $(\mathbb R^{n×n}, ·)$.</li><li>Inverse element: If the inverse exists ($A$ is regular), then $A^{−1}$ is the inverse element of $A ∈ R^{n×n}$, and in exactly this case <strong>$(R^{n×n}, ·)$ is a group, called the general linear group $GL(n,\mathbb R)$.</strong> Since matrix multiplication is not commutative, <strong>the group is not Abelian.</strong></li></ul></li></ul></li><li><p><strong>Vector Space</strong>: A real-valued vector space $V = (\nu, +, ·)$ is a set $\nu$ with two operations</p><script type="math/tex; mode=display">+:\nu \times \nu \rightarrow \nu \\\cdot:\mathbb R \times \nu \rightarrow \nu</script><p>where</p><ol><li><p>$(\nu, +)$ is an Abelian group</p></li><li><p>Distributivity</p><script type="math/tex; mode=display">∀λ ∈ \mathbb R, x, y ∈ \nu : λ · (x + y) = λ · x + λ · y \\∀λ, ψ ∈ \mathbb R, x ∈ \nu : (λ + ψ) · x = λ · x + ψ · x</script></li><li><p>Associativity (outer operation): $∀λ, ψ ∈ \mathbb R, x ∈ \nu : λ·(ψ·x) = (λψ)·x$</p></li><li><p>Neutral element with respect to the outer operation: $∀x ∈ \nu : 1·x = x$</p></li></ol></li><li><p>Some important examples</p><ul><li>$V = \mathbb R^n, n ∈ \mathbb N$ is a vector space with operations defined as follows<ul><li>Addition: $x+y = (x_1, . . . , x_n)+(y_1, . . . , y_n) = (x_1+y_1, . . . , x_n+y_n)$ for all $x, y ∈ \mathbb R^n$</li><li>Multiplication by scalars: $λx = λ(x_1, . . . , x_n) = (λx_1, . . . , λx_n)$ for all $λ ∈ \mathbb R, x ∈ \mathbb R^{n}$</li></ul></li><li>$V = \mathbb C$, with the standard definition of addition of complex numbers.</li></ul></li><li><p>The elements $x ∈ V$ are called vectors. The neutral element of $(\nu, +)$ is the zero vector $\mathbf 0 = [0, . . . , 0]^⊤$, and the inner operation $+$ is called vector addition. The elements $λ ∈ R $are called scalars and the outer operation $·$ is a multiplication by scalars.</p></li><li><p>A “vector multiplication” $ab, a, b ∈ \mathbb R^n$, is not defined. We could define an element-wise multiplication, such that $c = ab$ with $c_j = a_jb_j$. Only the following multiplications for vectors are defined: $ab^⊤ ∈ \mathbb R^{n×n}$ (<strong>outer  product</strong>), $a^⊤b ∈ \mathbb R$ (<strong>inner/scalar/dot product</strong>).</p></li><li><p>By default, we write $x$ to denote a column vector, and a row vector is denoted by $x^⊤$, the transpose of $x$</p></li><li><p><strong>Vector Subspace</strong>： Let $V = (\nu, +, ·)$ be a vector space and $u ⊆ \nu, u \ne ∅$. Then $U = (u, +, ·)$ is called <strong>vector subspace</strong> of $V$ (or linear subspace) if U is a vector space with the vector space operations + and · restricted to $u×u$ and $\R×u$. We write $U ⊆ V$ to denote a subspace U of V.   U naturally inherits many properties directly from V</p><ul><li>For every vector space $V$, the trivial subspaces are $V$ itself and $\{0\}$.</li><li>Not all subsets of $\mathbb R^2$ are subspaces. In A and C, the closure property is violated; B does not contain 0. Only D is a subspace.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251638848.png" alt="Vector Subspace"></li><li>The solution set of a homogeneous system of linear equations $Ax = 0$ with $n $unknowns $x = [x_1, . . . , x_n]^⊤$ is a subspace of $\mathbb R^n$. And the solution of an inhomogeneous system of linear equations $Ax = b, b \ne 0$ is not a subspace of $\mathbb R^n$.</li><li>The intersection of arbitrarily many subspaces is a subspace itself.</li><li>Every subspace $U ⊆ (\mathbb R^n, +, ·)$ is the solution space of a homogeneous system of linear equations $Ax = 0$ for $x ∈ \mathbb R^n$.</li></ul></li></ul><h2 id="Linear-Independence"><a href="#Linear-Independence" class="headerlink" title="Linear Independence"></a>Linear Independence</h2><ul><li><p><strong>Linear Combination</strong>: Consider a vector space $V$ and a finite number of vectors $x_1, . . . , x_k ∈ V$. Then, every $v ∈ V$ of the form</p><script type="math/tex; mode=display">v = \lambda_1x_1 + \cdots + \lambda_kx_k = \sum_{i=1}^k{\lambda_ix_i}\in V</script><p>with $λ_1, . . . , λ_k ∈ \mathbb R$ is <strong>a linear combination of the vectors</strong> $x_1, . . . , x_k$.</p></li><li><p>The <strong>0-vector</strong> can always be written as the linear combination of $k$ vectors $x_1, . . . , x_k $because $0 =\sum_{i=1}^k{0x_i}$ is always true.</p></li><li><p><strong>Linear (In)dependence</strong>: A vector space $V$ with $k ∈ \mathbb N$ and $x_1, . . . , x_k ∈ V$. If there is a non-trivial linear combination, such that $0 = \sum_{i=1}^k{\lambda_ix_i}$ with <strong>at least one</strong> $\mathbf λ_i \ne 0$, the vectors $x_1, . . . , x_k$ are <strong>linearly dependent</strong>. If only <strong>the trivial solution</strong> exists, i.e.,$λ_1 = . . . = λ_k = 0$ the vectors $x_1, . . . , x_k$ are <strong>linearly independent</strong>.</p><ul><li>$k$ vectors are either linearly dependent or linearly independent.</li><li>If at least one of the vectors $x_1, . . . , x_k$ is $0$ then they are linearly dependent. The same holds if two vectors are identical.</li><li>The vectors $\{x_1, . . . , x_k : x_i \ne 0, i = 1, . . . , k\}, k ⩾ 2$, are linearly dependent if and only if <strong>(at least) one of them is a linear combination of the others.</strong> In particular, if one vector is a multiple of another vector, i.e., $x_i = λx_j, λ ∈ \mathbb R$ then the set $\{x_1, . . . , x_k : x_i \ne 0, i = 1, . . . , k\}$ is linearly dependent.</li><li>Use Gaussian elimination: Write all vectors as columns of a matrix $A$ and perform Gaussian elimination until the matrix is in row echelon form (the reduced row-echelon form is unnecessary here):<ul><li>The pivot columns indicate the vectors, which are linearly independent of the vectors on the left. Note that there is an ordering of vectors when the matrix is built.</li><li>The non-pivot columns can be expressed as linear combinations of the pivot columns on their left.</li><li>All column vectors are linearly independent if and only if <strong>all columns are pivot columns</strong>. If there is <strong>at least one non-pivot column</strong>, the columns (and, therefore, the corresponding vectors) are linearly dependent.</li></ul></li></ul></li><li><p>In a vector space $V$, $m$ linear combinations of $k$ vectors $x_1, . . . , x_k$ are linearly dependent if $m &gt; k$.</p></li></ul><h2 id="Basis-and-Rank"><a href="#Basis-and-Rank" class="headerlink" title="Basis and Rank"></a>Basis and Rank</h2><ul><li><p><strong>Generating Set and Span</strong>: Consider a vector space $V =(\nu, +, ·)$ and set of vectors $A = {x_1, . . . , x_k} ⊆ \nu$. If every vector $v ∈\nu$ can be expressed as a <em>linear combination</em> of $x_1, . . . , x_k$, $A$ is called a <strong>generating set</strong> of $V$. The set of all linear combinations of vectors in A is called the <strong>span</strong> of $A$. If $A$ spans the vector space $V$, we write $V = span[A]$ or $V = span[x_1, . . . , x_k]$.</p></li><li><p><strong>Basis</strong>: Consider a vector space $V = (\nu, +, ·)$ and $A ⊆ \nu$. A generating set $A$ of $V$ is called <strong>minimal</strong> if there exists <strong>no smaller set $\tilde A⊊ A ⊆ \nu$ that spans $V$.</strong> <strong>Every linearly independent generating set of $V$ is minimal and is called a basis of $V$.</strong></p></li><li><p>Let $V = (\nu, +, ·)$ be a vector space and $\mathcal B ⊆ \nu, \mathcal B \ne ∅$. Then, the following statements are equivalent</p><ul><li>$\mathcal B$ is a <strong>basis</strong> of $V$.</li><li>$\mathcal B$ is a <strong>minimal generating set</strong>.</li><li>$\mathcal B$ is a <strong>maximal linearly independent</strong> set of vectors in $V$, i.e., adding any other vector to this set will make it linearly dependent.</li><li>Every vector $x ∈ V$ is a linear combination of vectors from $\mathcal B$, and every linear combination is unique.</li></ul></li><li><p><strong>Every vector space $V$ possesses a basis</strong> $\mathcal B$. And there can be many bases of a vector space $V$, i.e., there is no unique basis. However, all bases possess <strong>the same number of elements, the basis vectors.</strong></p></li><li><p>Consider finite-dimensional vector spaces $V$, the <strong><em>dimension</em></strong> of $V$ is <strong>the number of basis vectors</strong> of $V$, and we write $dim(V)$. If $U ⊆ V$ is a subspace of $V$, then $dim(U) ⩽ dim(V) $and $dim(U) =dim(V)$ if and only if $U = V$​. Intuitively, <strong>the dimension of a vector space</strong><br><strong>can be thought of as the number of independent directions in this vector space.</strong></p></li><li><p>The dimension of a vector space is not necessarily the number of elements in a vector.</p></li><li><p>A basis of a subspace $U = span[x_1, . . . , x_m] ⊆ \mathbb R^n$ can be found by executing the following steps</p><ol><li>Write the spanning vectors as columns of a matrix $A$.</li><li>Determine the row-echelon form of $A$.</li><li>The spanning vectors associated with the pivot columns are a basis of $U$.</li></ol><blockquote><p>e.g.  For a vector subspace $U ⊆ \mathbb R^5$, spanned by the vectors</p><script type="math/tex; mode=display">x_1 = \left[ \begin{matrix}1 \\2 \\-1 \\-1 \\-1\end{matrix} \right],x_2 = \left[ \begin{matrix}2 \\-1 \\1 \\2 \\-2\end{matrix} \right],x_3 = \left[ \begin{matrix}3 \\-4 \\3 \\5 \\-3\end{matrix} \right],x_4 = \left[ \begin{matrix}-1 \\8 \\-5 \\-6 \\1\end{matrix} \right] \in \mathbb R^5</script><p>To find out which vectors $x_1, . . . , x_4$ are a basis for $U$, we need to check whether $x_1, . . . , x_4$ are linearly independent.</p><p>Therefore, we need to solve $\sum_{i=1}^4{\lambda_ix_i}=0$,  which leads to a homogeneous system of equations with matrix</p><script type="math/tex; mode=display">[x_1,x_2,x_3,x_4]=\left[\begin{matrix} 1& 2& 3& -1\\2& -1& -4& 8\\-1& 1& 3& -5\\-1& 2& 5& -6\\-1& -2& -3& 1\\\end{matrix}\right]</script><p>With the basic transformation rules for systems of linear equations, we obtain the row-echelon form</p><script type="math/tex; mode=display">\left[\begin{matrix} 1& 2& 3& -1\\0& 1& 2& -2\\0& 0& 0& 1\\0& 0& 0& 0\\0& 0& 0& 0\\\end{matrix}\right]</script><p>We see from the row-echelon form that $x_1, x_2, x_4$ are linearly independent.Therefore, $\{x_1, x_2, x_4\}$ is abasis of $U$.</p></blockquote></li><li><p><strong>Rank</strong>: The <strong>number of linearly independent columns</strong> of a matrix $A ∈ \mathbb R^{m×n}$ equals the number of linearly independent rows and is called the <strong>rank</strong> of $A$ and is denoted by $rk(A)$.</p><ul><li>$rk(A) = rk(A^⊤)$, i.e., the column rank equals the row rank.</li><li>The columns of $A ∈ \mathbb R^{m×n}$ span a subspace $U ⊆ \mathbb R^m$ with $dim(U) =rk(A)$.</li><li>The rows of $A ∈ \mathbb R^{m×n}$ span a subspace $W ⊆ \mathbb R^n$ with $dim(W) =rk(A)$.</li><li>For all $A ∈ \mathbb R^{n×n}$ it holds that $A$ is regular (invertible) if and only if $rk(A) = n$.</li><li>For all $A ∈ \mathbb R^{m×n}$ and all $b ∈ \mathbb R^m$ it holds that the linear equation system $Ax = b$ can be solved if and only if $rk(A) = rk(A|b)$.</li><li>For$A ∈ \mathbb R^{m×n}$ the subspace of solutions for $Ax = 0$ possesses dimension $n − rk(A)$.</li><li>A matrix $A ∈ \mathbb R^{m×n}$  has <em>full rank</em> if its rank equals the largest possible  rank for a matrix of the same dimensions. This means that the rank of a full-rank matrix is the lesser of the number of rows and columns, i.e., $rk(A) = min(m,n)$. A matrix is said to be <em>rank deficient</em> if it does not  have full rank.</li></ul></li></ul><h2 id="Linear-Mappings"><a href="#Linear-Mappings" class="headerlink" title="Linear Mappings"></a>Linear Mappings</h2><ul><li><p><strong>Linear Mapping</strong>: For vector spaces $V,W$, a mapping $Φ : V → W$ is called a linear mapping (or vector space homomorphism/linear transformation) if</p><script type="math/tex; mode=display">\forall x,y \in V \; \forall \lambda ,\psi \in \mathbb R:\varPhi(\lambda x + \psi y) =\lambda \varPhi(x) + \psi \varPhi(y)</script><p>(added together and multiplied by a scalar) It turns out that we can represent linear mappings as matrices.</p></li><li><p>Consider a mapping $Φ : V →W$, where $V,W$ can be arbitrary sets. Then $Φ$ is called</p><ul><li><strong><code>Injective</code></strong> if $∀x, y ∈ V : Φ(x) = Φ(y) ⇒ x = y$.</li><li><strong><code>Surjective</code></strong> if $Φ(V) = W$.   Every element in $W$ can be “reached” from $V$ using $Φ$.</li><li><strong><code>Bijective</code></strong> if it is injective and surjective.  A bijective $Φ$ can be “undone”, i.e., there exists a mapping $Ψ :W → V$ so that $Ψ ◦ Φ(x) = x$. This mapping $Ψ$ is then called the inverse of $Φ$ and normally denoted by $Φ^{−1}$.</li></ul></li><li><p>The special cases of linearmappings between vector spaces $V$ and $W$</p><ul><li><strong><code>Isomorphism</code></strong>: $Φ : V →W$ <strong>linear and bijective</strong></li><li><strong><code>Endomorphism</code></strong>: $Φ : V → V$ <strong>linear</strong></li><li><strong><code>Automorphism</code></strong>: $Φ : V → V$ <strong>linear and bijective</strong></li><li>We define $id_V : V → V, x \mapsto x$ as the identity mapping or identity automorphism in V.</li></ul></li></ul><blockquote><p>The mapping $Φ : \mathbb R^2 → \mathbb C, Φ(x) = x_1 + ix_2$, is a <strong>homomorphism</strong>:</p><script type="math/tex; mode=display">\begin{equation}\begin{split}\varPhi \left( \left[\begin{matrix} x_1\\x_2\end{matrix}\right] +\left[\begin{matrix} y_1\\y_2\end{matrix}\right] \right) &= (x_1+y_1) + i(x_2+y_2)=x_1+ix_2+y_1+iy_2 \\&= \varPhi \left( \left[\begin{matrix} x_1\\x_2\end{matrix}\right]\right)+\varPhi \left( \left[\begin{matrix} y_1\\y_2\end{matrix}\right]\right)\end{split}\end{equation}</script><script type="math/tex; mode=display">\left( \lambda \left[\begin{matrix} x_1\\x_2\end{matrix}\right]\right) = \lambda x_1 + \lambda i x_2 = \lambda(x_1+ix_2) =\lambda \varPhi \left( \left[\begin{matrix} x_1\\x_2\end{matrix}\right]\right)</script></blockquote><ul><li><p><em>Finite-dimensional vector spaces $V$ and $W$</em> are <strong>isomorphic</strong> if and only if $dim(V) = dim(W)$.</p><ul><li>There exists a linear, bijective mapping between two vector spaces of the same dimension.</li><li>Vector spaces of the same dimension are kind of the same thing, as they can be transformed into each other without incurring any loss.</li><li>Treat $\mathbb R^{m×n}$ (the vector space of $m× n$-matrices) and $R^{mn}$ (the vector space of vectors of length $mn$) the same, as their dimensions are $mn$, and there exists a linear, bijective mapping that transforms one into the other.</li></ul></li><li><p>Consider vector spaces $V,W,X$</p><ul><li>For linear mappings $Φ : V → W$ and $Ψ : W → X$, the mapping $Ψ ◦ Φ : V → X$ is also linear.</li><li>If $Φ : V → W$ is an isomorphism, then $Φ^{−1}: W → V$ is an isomorphism, too.</li><li>If $Φ : V →W, Ψ : V →W$ are linear, then $Φ+Ψ$ and $λΦ, λ ∈ R$, are linear, too.</li></ul></li><li><p>Consider a basis $\{b_1, . . . , b_n\}$ of an $n$-dimensional vector space $V$. We write </p><script type="math/tex; mode=display">B = (b_1,\cdots,b_n)</script><p>and call this $n$-tuple an <strong>ordered basis</strong> of $V$.</p></li><li><p><strong>Coordinates</strong>:  Consider a vector space $V$ and an ordered basis $B = (b_1, . . . , b_n)$ of $V$. For any $x ∈ V$ we obtain a unique representation (linear combination)</p><script type="math/tex; mode=display">x = \alpha_1b_1 + \cdots + \alpha_nb_n</script><p>of $x$ with respect to $B$. Then $α_1, . . . , α_n$ are the <strong>coordinates</strong> of $x$ with respect to $B$, and the vector</p><script type="math/tex; mode=display">\alpha = \left[\begin{matrix}\alpha_1\\\vdots\\\alpha_n\end{matrix}\right]\in \mathbb R^n</script><p>is the <strong>coordinate vector/coordinate representation</strong> of $x$ with respect to the ordered basis $B$​.  Different coordinate representations of a vector x, depending on the choice of basis.</p></li><li><p><strong>Transformation Matrix</strong>: Consider vector spaces $V,W$ with corresponding (ordered) bases $B = (b_1, . . . , b_n)$ and $C = (c_1, . . . , c_m)$. Moreover, we consider a linear mapping $Φ : V →W$. For $j ∈ \{1, . . . , n\}$,</p><script type="math/tex; mode=display">\varPhi(b_j) = \alpha_{1j}c_1+\cdots+\alpha_{mj}c_m=\sum_{i=1}^m{\alpha_{ij}c_i}</script><p>is the unique representation of $Φ(b_j)$ with respect to $C$. Then, we call the $m× n$-matrix $A_Φ$, whose elements are given by $A_{\varPhi}(i,j)=\alpha_{ij}$ the <strong>transformation matrix</strong> of $Φ$ (with respect to the ordered bases $B$ of $V$ and $C$ of $W$).</p></li><li><p>The coordinates of $Φ(b_j)$ with respect to the ordered basis $C$ of $W$ are the $j$-th column of $A_Φ$. Consider (finite-dimensional) vector spaces $V,W$ with ordered bases $B, C$ and a linear mapping $Φ : V →W$ with  transformation matrix $A_Φ$. If $\tilde x$ is the coordinate vector of $x ∈ V$ with respect to $B$ and $\tilde y$ the coordinate vector of $y = Φ(x) ∈ W$ with respect<br>to $C$, then  </p><script type="math/tex; mode=display">\tilde y = A_\varPhi \tilde x</script></li></ul><blockquote><p>e.g. Consider a homomorphism $Φ : V → W$ and ordered bases $B = (b_1, . . . , b_3)$ of $V$ and $C = (c_1, . . . , c_4)$ of $W$. With </p><script type="math/tex; mode=display">\varPhi(b_1)=c_1-c_2+3c_3-c_4 \\\varPhi(b_2)=2c_1+c_2+7c_3+2c_4\\\varPhi(b_3)=3c_2+c_3+4c_4</script><p>the transformation matrix $A_Φ$ with respect to B and C satisfies $Φ(b_k) =\sum_{i=1}^4{α_{ik}c_i}$ for $k = 1, . . . , 3$ and is given as</p><script type="math/tex; mode=display">A_\varPhi = [\alpha_1,\alpha_2,\alpha_3]=\left[\begin{matrix}1& 2& 0\\-1& 1& 3\\3& 7& 1\\-1& 2& 4\\\end{matrix}\right]</script><p>Linear Transformations of Vectors</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251639897.png" alt="Linear Transformations of Vectors"></p><p>Three examples of linear transformations of the vectors shown as dots in (a); (b) Rotation by 45◦; (c) Stretching of the horizontal coordinates by 2; (d) Combination of reflection, rotation and stretching.</p><p>We consider three linear transformations of a set of vectors in $\mathbb R^2$ with the transformation matrices</p><script type="math/tex; mode=display">A_1 = \left[\begin{matrix}cos(\frac{\pi}{4})& -sin(\frac{\pi}{4})\\sin(\frac{\pi}{4})& cos(\frac{\pi}{4})\end{matrix}\right],A_2 = \left[\begin{matrix}2& 0\\0& 1\end{matrix}\right],A_3 = \frac{1}{2}\left[\begin{matrix}3& -1\\1& -1\end{matrix}\right],</script></blockquote><ul><li><p><strong>Basis Change</strong>: For a linear mapping $Φ : V →W$, ordered bases $B=(b_1,…,b_n),\tilde B=(\tilde{b_1},…,\tilde{b_n})$ of $V$ and $C=(c_1,…,c_m),\tilde C=(\tilde{c_1},…,\tilde{c_m})$ of $W$, and a transformation matrix $A_\varPhi$ of $\varPhi$  with respect to $B$ and $C$, the corresponding transformation matrix $\tilde A_Φ$ with respect to the bases $\tilde B$ and $\tilde C$ is given as</p><script type="math/tex; mode=display">\tilde A_Φ = T^{-1}A_\varPhi S</script><p>$S ∈ \mathbb R^{n×n}$ is the transformation matrix of $id_V$ that maps coordinates with respect to<br>$\tilde B$ onto coordinates with respect to $B$, and $T ∈ \mathbb R^{m×m}$ is the transformation matrix of $id_W$that maps coordinates with respect to $\tilde C$ onto coordinates with respect to $C$.</p><ul><li><p>we can write the vectors of the new basis $\tilde B$ of $V$as a linear combination of the basis vectors of $B$, such that</p><script type="math/tex; mode=display">\tilde b_j=s_{1j}b_1+\cdots+s_{nj}b_n=\sum_{i=1}^n{s_{ij}b_i},j = 1,...,n</script><script type="math/tex; mode=display">\tilde c_k=t_{1k}c_1+\cdots+t_{mk}c_m=\sum_{l=1}^m{t_{lk}c_l},k = 1,...,m</script></li><li><p>We define $S = ((s_{ij})) ∈ \mathbb R^{n×n}$ as the transformation matrix that maps coordinates with respect to $\tilde B$ onto coordinates with respect to $B$ and $T = ((t_{lk})) ∈ R^{m×m}$ as the transformation matrix that maps coordinates with respect to $\tilde C$ onto coordinates with respect to $C$. </p></li><li><p>In particular, the $j$th column of $S$ is the coordinate representation of $\tilde b_j$ with respect to $B$ and the $k$th column of $T$ is the coordinate representation of $\tilde c_k$ with respect to $C$. Both $S$ and $T$ are regular.</p></li></ul></li><li><p><strong>Equivalence</strong>: Two matrices $A, \tilde A ∈ R^{m×n}$ are <strong>equivalent</strong> if there exist regular matrices $S ∈ \mathbb R^{n×n}$ and $T ∈ \mathbb R^{m×m}$, such that $\tilde A = T^{-1}AS$.</p></li><li><p><strong>Similarity</strong>: Two matrices $A, \tilde A ∈ \mathbb R^{n×n}$ are <strong>similar</strong> if there exists a regular matrix $S ∈ \mathbb R^{n×n}$ with $\tilde A = S^{−1}AS$.</p></li><li><p>Similar matrices are always equivalent. However, equivalent matrices are not necessarily similar.</p></li><li><p>Consider vector spaces $V,W,X$. We already know that for linear mappings $Φ : V → W$ and $Ψ : W → X$ the mapping $Ψ ◦ Φ : V → X$ is also linear. With transformation matrices $A_Φ$ and $A_Ψ$ of the corresponding mappings, the overall transformation matrix is $A_{Ψ◦Φ} = A_ΨA_Φ$.</p></li><li><p><strong>Image and Kernel</strong>： For $Φ : V →W$, we define the <strong>kernel/null space</strong></p><script type="math/tex; mode=display">ker(\varPhi) := \varPhi^{-1}(0_W)=\{v\in V:\varPhi(v)=0_W\}</script><p>and the <strong>image/range</strong></p><script type="math/tex; mode=display">Im(\varPhi):=\varPhi(V)=\{w\in W|\exists v\in V:\varPhi(v)=w \}</script><p>We also call $V$ and $W$ also the <strong>domain</strong> and <strong>codomain</strong> of $Φ$</p></li><li><p>The kernel is the set of vectors $v ∈ V$ that $Φ$ maps onto the neutral element $0_W ∈ W$. The image is the set of vectors $w ∈ W$ that can be “reached” by $Φ$ from any vector in $V$.<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407251639125.png" alt="Kernel and Image"></p></li><li><p>Consider a linear mapping $Φ : V → W$, where $V,W$ are vector spaces.</p><ul><li>It always holds that $Φ(0_V) = 0_W$ and, therefore, $0_V ∈ ker(Φ)$. In particular, the null space is never empty.</li><li>$Im(Φ) ⊆ W$ is a subspace of $W$, and $ker(Φ) ⊆ V$ is a subspace of $V$.</li><li>$Φ$ is injective (one-to-one) if and only if $ker(Φ) = {0}$.</li></ul></li><li><p><strong>Null Space and Column Space</strong>: Let us consider $A ∈ \mathbb R^{m×n}$ and a linear mapping $Φ : \mathbb R^n → \mathbb R^m, x \mapsto Ax$.</p><ul><li><p>For $A = [a_1, . . . , a_n]$, where $a_i$ are the columns of $A$, we obtain</p><script type="math/tex; mode=display">\begin{equation}\begin{split}Im(\varPhi) &=\{Ax:x\in \mathbb R^n \}=\{\sum_{i=1}^{n}{x_ia_i}:x_1, . . . , x_n \in \mathbb R\} \\&=span[a_1,...,a_n]\subseteq \mathbb R^m\end{split}\end{equation}</script><p>the image is the span of the columns of $A$, also called the <strong>column space</strong>. Therefore, the column space (image) is a subspace of $\mathbb R^m$, where $m$ is the “height” of the matrix.</p></li><li><p>$rk(A) = dim(Im(Φ))$.</p></li><li><p>The kernel/null space $ker(Φ)$ is the general solution to the homogeneous system of linear equations $Ax = 0$ and captures all possible linear combinations of the elements in $\mathbb R^n$ that produce $0 ∈ \mathbb R^m$.</p></li><li><p>The kernel is a subspace of $\mathbb R^n$, where $n$ is the “width” of the matrix.</p></li></ul><blockquote><p>e.g.  The mapping</p><script type="math/tex; mode=display">\varPhi:\mathbb R^4 \rightarrow \mathbb R^2, \left[\begin{matrix} x_1\\x_2\\x_3\\x_4\end{matrix} \right] \mapsto\left[\begin{matrix} x_1\\x_2\\x_3\\x_4\end{matrix} \right]\left[\begin{matrix} 1& 2& -1& 0\\1& 0& 0& 1\end{matrix} \right] = \left[\begin{matrix} x_1+2x_2-x_3\\x_1+x_4\end{matrix} \right]\\=x_1\left[\begin{matrix} 1\\1\end{matrix} \right] + x_2\left[\begin{matrix} 2\\0\end{matrix} \right] +x_3\left[\begin{matrix} -1\\0\end{matrix} \right] +x_4\left[\begin{matrix} 0\\1\end{matrix} \right]</script><p>is linear. To determine $Im(Φ)$, we can take the span of the columns of the transformation matrix and obtain</p><script type="math/tex; mode=display">Im(\varPhi)=span\left[\left[\begin{matrix} 1\\1\end{matrix} \right],\left[\begin{matrix} 2\\0\end{matrix} \right],\left[\begin{matrix} -1\\0\end{matrix} \right],\left[\begin{matrix} 0\\1\end{matrix} \right]\right]</script><p>To compute the kernel (null space) of $Φ$, we need to solve $Ax = 0$, </p><script type="math/tex; mode=display">\left[\begin{matrix}1& 2& -1& 0\\1& 0& 0& 1\end{matrix}\right] \rightarrow \cdots \rightarrow\left[\begin{matrix}1& 0& 0& 1\\0& 1& -\frac{1}{2}& -\frac{1}{2}\end{matrix}\right]</script><p>Therefore, $0 = a_3+ \frac{1}{2}a_2$, $0 = a_1−\frac{1}{2}a_2−a_4$</p><script type="math/tex; mode=display">ker(\varPhi) = span \left[\left[\begin{matrix}0\\\frac{1}{2}\\1\\0\end{matrix}\right],\left[\begin{matrix}-1\\\frac{1}{2}\\0\\1\end{matrix}\right]\right]</script></blockquote></li><li><p><strong>Rank-Nullity Theorem</strong>: For vector spaces $V,W$ and a linear mapping $Φ : V →W$ it holds that </p><script type="math/tex; mode=display">dim(ker(Φ)) + dim(Im(Φ)) = dim(V)</script><ul><li><p>If $dim(Im(Φ)) &lt; dim(V)$, then $ker(Φ)$ is non-trivial, i.e., the kernel contains more than $0_V$ and $dim(ker(Φ)) ⩾ 1$.</p></li><li><p>If $A_Φ$ is the transformation matrix of $Φ$ with respect to an ordered basis and $dim(Im(Φ)) &lt; dim(V)$, then the system of linear equations $A_Φx = 0$ has infinitely many solutions.</p></li><li><p>If $dim(V) = dim(W)$, then the following three-way equivalence holds:</p><ul><li>$Φ$ is injective</li><li>$Φ$ is surjective</li><li>$Φ$ is bijective</li></ul><p>since $Im(Φ) ⊆ W$.</p></li></ul></li></ul><blockquote><p><strong>Bibliography:</strong></p><ol><li>Mathematics for Machine Learning_Marc Peter Deisenroth_2020</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> 笔记 </tag>
            
            <tag> LinearAlgebra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之Selenium操纵浏览器</title>
      <link href="/2024/07/24/scrapy-pa-chong-xi-lie-zhi-selenium-cao-zong-liu-lan-qi/"/>
      <url>/2024/07/24/scrapy-pa-chong-xi-lie-zhi-selenium-cao-zong-liu-lan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium操纵浏览器"><a href="#Selenium操纵浏览器" class="headerlink" title="Selenium操纵浏览器"></a>Selenium操纵浏览器</h1><ul><li>Selenium是一个自动化测试工具，支持各种浏览器，包括Chrome、Safari、Firefox等主流界面式浏览器。</li><li>Selenium可以模拟操作浏览器，对一些需要动态加载的页面，不需要我们执行JavaScript等操作，即可自动加载完成后的页面。</li></ul><h2 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h2><ul><li><p>pip安装：<strong><code>pip install selenium</code></strong></p></li><li><p>下载与自己电脑对应版本的浏览器驱动，放入系统路径</p><ul><li>Chrome driver: <a href="https://sites.google.com/a/chromium.org/chromedriver/home。">https://sites.google.com/a/chromium.org/chromedriver/home。</a></li><li>Firefox driver: <a href="https://github.com/mozilla/geckodriver/releases。">https://github.com/mozilla/geckodriver/releases。</a></li><li>IE driver: <a href="https://github.com/mozilla/geckodriver/releases。">https://github.com/mozilla/geckodriver/releases。</a></li><li>Edge driver: <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver。">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver。</a></li><li>ps：有些下载的驱动名称与selenium中驱动名称不对应需要重命名，例如：Edge浏览器驱动下载后，需将msedgedriver.exe重命名为<strong>MicrosoftWebDriver.exe</strong></li></ul></li><li><p>测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.bing.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若能正常打开浏览器，则设置正确。</p></li></ul><h2 id="Selenium基本使用"><a href="#Selenium基本使用" class="headerlink" title="Selenium基本使用"></a>Selenium基本使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token comment"># 获取浏览器驱动</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 浏览器窗口最大化</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开URL</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://cn.bing.com/'</span><span class="token punctuation">)</span><span class="token comment"># 定位输入框并输入</span>driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"#sb_form_q"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span><span class="token comment"># 点击</span>driver<span class="token punctuation">.</span>find element_by_css_selector<span class="token punctuation">(</span><span class="token string">"#sb form go"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明驱动"><a href="#声明驱动" class="headerlink" title="声明驱动"></a>声明驱动</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriveroptions <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 无头参数,浏览器隐藏在后台运行</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span><span class="token comment"># 停用DNS预读</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--dns-prefetch-disable"</span><span class="token punctuation">)</span><span class="token comment"># options.add_argument('--proxy-server=http://' + random.choice(PROXY_LIST))</span><span class="token comment"># options.add_argument(f"user-agent={random.choice(USER_AGENT_LIST)}")</span><span class="token comment"># 页面加载策略:normal、eager、none</span><span class="token triple-quoted-string string">'''normal这种状态导致Selenium等待整个页面加载（下载并解析了html内容和子资源）。eager 这种状态导致Selenium等待DOMContentLoaded事件（仅下载和解析html内容）。none 此策略使Selenium在完全接收初始页面内容（下载html内容）后立即返回。即正常情况下，selenium会等待整个界面加载完成（指对html和子资源的下载与解析,如JS文件，图片等，不包括ajax）'''</span>options<span class="token punctuation">.</span>page_load_strategy <span class="token operator">=</span> <span class="token string">'eager'</span><span class="token comment"># 日志等级</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'log-level=2'</span><span class="token punctuation">)</span>service <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">'MicrosoftWebDriver.exe'</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">,</span> service<span class="token operator">=</span>service<span class="token punctuation">)</span><span class="token comment"># 15秒超时时间</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p>selenium使用代码分为3部分</p><ul><li>浏览器</li><li>driver</li><li>client</li></ul></li><li><p>client就是我们写的代码，我们无须知道浏览器具体的运行原理，只需要调用driver，而 driver知道如何驱动浏览器运行。</p></li><li>在Selenium启动以后，driver充当了HTTP Server 服务器的角色，负责client和浏览器通信。client根据Webdriver协议发送请求给driver，driver解析请求后，在浏览器上执行相应的操作，并把执行结果返回给client。其中 Webdriver协议包含几乎所有与浏览器的交互操作。通过这些协议，client就可以通知driver执行哪些操作。</li></ul><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><ul><li><strong>find_element_by_id()</strong></li><li><strong>find_element_by_name()</strong></li><li><strong>find_element_by_class_name()</strong></li><li><strong>find_element_by_tag_name()</strong></li><li><strong>find_element_by_link_text(): 完整链接文本定位</strong></li><li><strong>find_element_by _partial_link_text():链接文本定位</strong></li><li><strong>find_element_by_xpath()</strong></li><li><strong>find_element_by_css_selector()</strong></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407241259080.png" alt="Selenium操作01"></p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407241259257.png" alt="Selenium操作02"></p><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li><li><a href="https://blog.csdn.net/qq_26086231/article/details/126744036">https://blog.csdn.net/qq_26086231/article/details/126744036</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之元素提取BeautifulSoup</title>
      <link href="/2024/07/24/scrapy-pa-chong-xi-lie-zhi-yuan-su-ti-qu-beautifulsoup/"/>
      <url>/2024/07/24/scrapy-pa-chong-xi-lie-zhi-yuan-su-ti-qu-beautifulsoup/</url>
      
        <content type="html"><![CDATA[<h1 id="元素提取BeautifulSoup"><a href="#元素提取BeautifulSoup" class="headerlink" title="元素提取BeautifulSoup"></a>元素提取BeautifulSoup</h1><ul><li><p>BeautifulSoup是一个可以从HTML或XML文件中提取数据的Python库，可以很方便地进行文档的导航、查找或修改。在爬虫工作中，常用的是查找功能。</p></li><li><p>安装BeautifulSoup：<strong><code>pip install beautifulsoup4</code></strong></p></li><li>安装解析器：<strong><code>pip install lxml</code></strong></li></ul><h2 id="使用BeautifulSoup"><a href="#使用BeautifulSoup" class="headerlink" title="使用BeautifulSoup"></a>使用BeautifulSoup</h2><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407241257574.png" alt="html字符串"></p><ul><li><p>创建BeautifulSoup对象</p><ul><li><p>直接通过字符串进行创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment"># BeautifulSoup 将使用指定的解析器来解析文档，若未指定，则自动选择合适的解析器进行解析，这里我们指定为lxml.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过打开文件来创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment"># 假设我们将HTML字符串中的HTML代码保存为index.html文件,</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 按照标准缩进格式结构输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="BeautifulSoup对象"><a href="#BeautifulSoup对象" class="headerlink" title="BeautifulSoup对象"></a>BeautifulSoup对象</h2><ul><li><p>BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为4种:</p><ul><li><strong>Tag</strong></li><li><strong>NavigableString</strong></li><li><strong>BeautifulSoup</strong></li><li><strong>Comment</strong></li></ul></li><li><p><strong>Tag</strong></p><ul><li><p>Tag对象与XML或HTML原生文档中的标签相同，如<code>&lt;title&gt;、&lt;a&gt;、&lt;p&gt;</code>等，这些标签及其内容就构成了一个Tag对象。Tag对象使用BeautifulSoup对象加对应标签名来提取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#提取title对象</span>title <span class="token operator">=</span> soup<span class="token punctuation">.</span>title<span class="token comment">#提取a对象</span>a <span class="token operator">=</span> soup<span class="token punctuation">.</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Tag 对象有很多属性和方法，其中最重要和常用的两个属性是<strong>name和 attributes</strong>。每个tag都有自己的名字，可以通过.name来获取:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># title</span><span class="token comment"># a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Tag 也可以改变name值，如果做了更改，就会影响所有通过当前BeautifulSoup对象生成的HTML文档。</p></li><li><p>每个Tag 可能包含多个属性，如Tag <code>&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;b&gt;&lt;p&gt;</code>中有一个class 属性，值为“title”。属性的操作方式与字典相同:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token keyword">print</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tag<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>可以直接“点”取属性，比如使用.attrs来获取属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token comment">#{'class':['title']}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Tag 中的属性可以增加、修改、删除</p></li><li><p>多值属性返回list，如果属性有多个值，但没有定义为多值属性，返回字符串</p></li></ul></li><li><p><strong>NavigableString</strong></p><ul><li><p>BeautifulSoup使用NavigableString类来包装Tag 中的字符串，可以通过.string 提取Tag 中的字符串数据:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;p class="page"&gt;This is a test&lt;/p&gt;'</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token keyword">print</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Tag 中包含的字符串不能编辑，但是可以用<code>replace_with()</code>方法替换成其他的字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tag<span class="token punctuation">.</span>string<span class="token punctuation">.</span>replace_with<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>BeautifulSoup</strong></p><p>BeautifulSoup对象表示的是一个文档的全部内容。大部分时候，可以把它当作一个Tag对象。因为BeautifulSoup对象并不是真正的HTML或XML 的标签，所以它没有name和 attribute属性。但有时查看它的.name属性是很有用的，所以BeautifulSoup对象被赋予了一个值为“[document]”的特殊属性.name。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">#[document]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>Comment</strong></p><ul><li><code>bs4.element.Comment</code></li><li>提取文档注释</li></ul></li></ul><h2 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h2><ul><li><p><strong>子节点</strong></p><ul><li><p>获取第一个<code>&lt;p&gt;</code>标签：<code>soup.body.p</code></p></li><li><p>获取所有子节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token comment"># 以列表形式输出所有子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Tag 的<code>.children</code>属性可以返回一个生成器，对子节点进行循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>body<span class="token keyword">for</span> i <span class="token keyword">in</span> tag<span class="token punctuation">.</span>children<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果Tag仅包含一个字符串，或者仅包含一个子节点，那么可使用<code>.string</code>来获取这个节点的字符串或者子节点的字符串:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment"># The Dormouse's story</span><span class="token comment"># The Dormouse's story</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多个节点的情况可以使用<code>.strings</code>属性循环获取内容,使用stripped_string去除换行和段首、段末的空白内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>父节点</p><ul><li>每个Tag或字符串都有父节点，HTML文档顶层节点<code>&lt;html&gt;</code>的父节点是BeautifulSoup对象。</li><li>可以通过<code>.parent</code> 属性来获取某个元素的父节点。</li><li>通过元素的<code>.parents</code>属性可以递归得到元素的所有父节点。</li></ul></li><li><p>兄弟节点</p><ul><li>同一级，同一个元素的子节点</li><li>可以使用<code>.next_sibling</code>和<code>.previous_sibling</code>属性来查询兄弟节点</li></ul></li><li><p><strong>左右的字符串、换行、空白都可以视作一个节点。</strong></p></li><li><p>前后节点</p><ul><li>该节点前后位置的节点</li><li>可以使用<code>.next_element</code>和<code>.previous_element</code>属性来访问前后节点</li></ul></li></ul><h2 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h2><ul><li><p>字符串筛选</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 筛选所有&lt;b&gt;标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [&lt;b&gt;The Dormouse's story&lt;/b&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>正则表达式：通过正则表达式search()方法来匹配内容</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> resoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"^b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># body</span><span class="token comment"># b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表：匹配列表中任意一个标签元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>True条件：传入True 时，会返回所有的节点，但不包括字符串节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自定义方法：该方法只能接收一个元素作为参数，若元素满足方法中的条件，则返回True，否则返回 False。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 筛选出既含有class属性又含有id属性的元素</span><span class="token keyword">def</span> <span class="token function">has_class_and_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_and_id<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>find_all()方法</p><ul><li><p><code>find_all(name,attrs,recursive,string,limit,**kwargs)</code></p><ul><li>name参数，可以查找所有名字为name的Tag，字符串对象会被自动忽略掉。类型可以为上述介绍的筛选参数的任意类型。</li><li>kwargs参数，任何未被识别为Tag的参数都将作为Tag属性来筛选数据。</li><li>limit参数，限制返回的结果数</li><li>recursive参数，调用Tag 的find_all()方法时，BeautifulSoup 会检索当前Tag的所有子孙节点，如果只想搜索Tag的直接子节点，则可以使用参数recursive=False。</li></ul></li><li><p>data-*属性不能作为属性直接被搜索，通过attr参数定义搜索</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;div data-foo="value"&gt;foo!&lt;/div&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data-foo"</span><span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用class 属性搜索时，由于和 Python 中的关键字class 冲突，因此在使用该属性时需要写作<strong><code>class_</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>text参数，可以搜索文档中的字符串内容，还可以查找Tag。与 name参数的可选值一样，text参数接收字符串、正则表达式、列表、True。</p></li></ul></li><li><p>find()方法：返回一条结果。</p></li><li><p>BeautifulSoup支持大部分的CSS选择器,在Tag或BeautifulSoup对象的<strong><code>.select()</code></strong>方法中传入对应CSS语法的字符串参数即可找到目标Tag。返回列表。</p></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之CSS选择语法</title>
      <link href="/2024/07/23/scrapy-pa-chong-xi-lie-zhi-css-xuan-ze-yu-fa/"/>
      <url>/2024/07/23/scrapy-pa-chong-xi-lie-zhi-css-xuan-ze-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS选择语法"><a href="#CSS选择语法" class="headerlink" title="CSS选择语法"></a>CSS选择语法</h1><ul><li>CSS指层叠样式表(Cascading Style Sheets)，用来定义如何显示HTML元素，一般和HTML文件一起使用，通过对HTML标签的修饰来解决内容与表现分离的问题。</li><li><p>CSS规则由两个主要的部分构成:选择器以及一条或多条声明<br><strong><code>selector {declaration1;declaration2;... declarationN}</code></strong></p></li><li><p>选择器通常是需要改变样式的HTML元素，需要指定具体的标签。每条声明由一个属性和一个值组成。属性（Property）是我们希望设置的样式属性(Style Attribute)。每个属性有一个值。属性和值被冒号分开。</p></li><li>CSS的选择器主要包括<strong>元素选择器、类选择器、ID选择器、属性选择器、后代选择器、子元素选择器、相邻兄弟选择器</strong>。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>考试说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>考试说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>2018年第二学期高数考试说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>info<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>考试因故取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/detail/info.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">scr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/cancel.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                查看详情            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>info<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>下次补考时间:2019.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>freshman<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>一年级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><ul><li>最常见的CSS选择器是元素选择器。也就是说，文档中的元素就是基本的选择器，比如 p、h1、div、a。</li><li>CSS元素选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231430070.png" alt="CSS元素选择器"></li></ul><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><ul><li>类选择器允许以一种独立于文档元素的方式来指定元素，该选择器可以单独使用，也可以与其他元素结合使用。</li><li>CSS类选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431429.png" alt="CSS类选择器"></li></ul><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><ul><li>ID选择器与类选择器类似，不同的是ID选择器以<strong>“#”</strong>开始，并且由于在HTML文档中ID值是唯一的，因此比class更方便使用，但并不是每个标签都有ID。</li><li>CSS ID选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431630.png" alt="CSS ID选择器"></li></ul><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li>选择具有某个属性的元素，不仅限于class和id属性</li><li>CSS属性选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431071.png" alt="CSS属性选择器"></li></ul><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><ul><li>后代选择器(Descendant Selector）又称为包含选择器，可以选择作为某元素后代的元素。</li><li>CSS后代选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431754.png" alt="CSS后代选择器"></li></ul><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><ul><li>只选择某个元素的子元素</li><li>CSS子元素选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431295.png" alt="CSS子元素选择器"></li></ul><h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h2><ul><li>选择紧接在另一个元素后的元素，而且二者有相同的父元素。</li><li>CSS相邻兄弟选择器<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431921.png" alt="CSS相邻兄弟选择器"></li></ul><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231431545.png" alt="组合使用"></p><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之XPath语法</title>
      <link href="/2024/07/23/scrapy-pa-chong-xi-lie-zhi-xpath-yu-fa/"/>
      <url>/2024/07/23/scrapy-pa-chong-xi-lie-zhi-xpath-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h1><ul><li><strong>XPath为XML路径语言(XML Path Language)</strong>，是一种用来确定XML文档中某部分位置的语言。XPath基于XML的树状结构提供在数据结构树中找寻节点的能力。</li><li>XPath以节点来解析文档，然后通过路径表达式定位元素，再经过XPath轴和运算符的进一步筛选，达到提取规定数据的目的。</li></ul><h2 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h2><ul><li>在XPath中，有7种类型的节点: <strong>元素、属性、文本、命名空间、处理指令、注释以及文档(根）节点</strong>。XML文档是被作为节点树来看待的。树的根被称为文档节点或者根节点。</li><li>节点组合在一起便会产生相对应的节点关系，包括父(Parent)、子(Childen)、同胞(Sibling)、先辈(Ancestor)、后代(Descendant)。</li></ul><h2 id="XPath语法-1"><a href="#XPath语法-1" class="headerlink" title="XPath语法"></a>XPath语法</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Leica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>97<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Make<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>89<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>XPath路径表达式</li></ul><div class="table-container"><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从根结节点选取</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，不考虑他们的位置</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td><strong>@</strong></td><td>选取属性</td></tr></tbody></table></div><ul><li><p>节点选取示例<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231428920.png" alt="节点选取示例"></p></li><li><p>选取指定节点<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231428101.png" alt="选取指定节点"></p></li><li><p><strong>使用通配符“*”匹配未知元素</strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231428785.png" alt="使用通配符“*”匹配未知元素"></p></li><li><p><strong>使用“|”匹配多个路径</strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231428768.png" alt="使用“|”匹配多个路径"></p></li></ul><h2 id="XPath轴"><a href="#XPath轴" class="headerlink" title="XPath轴"></a>XPath轴</h2><ul><li><p>轴(Axis）可定义相对于当前节点的节点集。</p></li><li><p>XPath使用位置路径匹配节点位置，而位置路径类型包括绝对路径与相对路径。绝对路径起始于“/”，相对路径没有限制。在两种情况中，位置路径均包括一个或多个步，每个步均被斜杠分割:绝对路径/step/step/…，相对路径step/step/…。每个步均根据当前节点集中的节点进行计算，轴的存在可使节点提取变得更加灵活准确。</p></li><li><p>XPath轴节点</p><p>| 节点               | 描述                                                   |<br>| ————————— | ——————————————————————————— |<br>| ancestor           | 选取当前节点的所有先辈(父、祖父等)                     |<br>| ancestor-or-self   | 选取当前节点的所有先辈(父、祖父等)以及当前节点本身     |<br>| attribute          | 选取当前节点的所有属性                                 |<br>| child              | 选取当前节点的所有子元素                               |<br>| descendant         | 选取当前节点的所有后代元素（子、孙等)                  |<br>| descendant-or-self | 选取当前节点的所有后代元素（子、孙等）以及当前节点本身 |<br>| following          | 选取文档中当前节点的结束标签之后的所有节点             |<br>| namespace          | 选取当前节点的所有命名空间节点                         |<br>| parent             | 选取当前节点的父节点                                   |<br>| preceding          | 选取文档中当前节点的开始标签之前的所有节点             |<br>| preceding-sibling  | 选取当前节点之前的所有同级节点                         |<br>| self               | 选取当前节点                                           |</p></li><li><p>步包括</p><ul><li>轴(Axis )，定义所选节点与当前节点之间的树关系。</li><li>节点测试(Node-Test )，识别某个轴内部的节点。</li><li>零个或者更多谓语（ Predicate )，更深入地提炼所选的节点集。</li></ul></li><li><p>步的语法：<strong><code>轴名称::节点测试[谓语]</code></strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>studentA</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Leica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>97<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>studentA</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>studentA</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Make<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>89<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>studentA</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>studentB</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Leica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>97<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>studentB</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>studentB</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Make<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>score</span><span class="token punctuation">&gt;</span></span>89<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>score</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>studentB</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231429511.png" alt="轴示例"></p></li></ul><h2 id="XPath运算符"><a href="#XPath运算符" class="headerlink" title="XPath运算符"></a>XPath运算符</h2><ul><li>XPath表达式可返回节点集、字符串、逻辑值以及数字。</li><li>XPath运算符<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231429938.png" alt="XPath运算符"></li></ul><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列之爬虫原理</title>
      <link href="/2024/07/23/scrapy-pa-chong-xi-lie-zhi-pa-chong-yuan-li/"/>
      <url>/2024/07/23/scrapy-pa-chong-xi-lie-zhi-pa-chong-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h1><p>网络爬虫在本质上就是模拟用户在浏览器上操作，发送请求，接收响应，然后分析并保存数据，只不过这个过程通过代码实现了大量的自动化操作。</p><h2 id="爬虫运行基本流程"><a href="#爬虫运行基本流程" class="headerlink" title="爬虫运行基本流程"></a>爬虫运行基本流程</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407231425523.png" alt="爬虫基本流程"></p><ol><li>给定URL，发送HTTP请求，即 Request（请求）。</li><li>服务器响应请求，得到一个Response(响应)。</li><li>分析返回数据，根据指定规则提取数据，产生 Data 与URL两部分数据。</li><li>将Data 保存到数据库、文件等，URL保存到待爬取列表中，继续爬取。</li><li>重复步骤(1)~ (4)。</li></ol></li><li><p>一个爬虫系统中应包含以下部分。</p><ol><li>URL管理器:负责管理待爬取的网页URL。</li><li>数据下载器:根据URL下载数据。</li><li>数据分析器:分析筛选下载的数据。</li><li>数据保存器:将筛选出的数据保存到文件或数据库。</li><li>调度器:负责整个系统的调度。</li></ol></li><li><p>发送的Request中应包含</p><ul><li>请求URL，需爬取的网页地址。</li><li>请求方式，爬虫一般用到POST、GET两种方式。</li><li>请求头，一个请求的头部信息，包含User-Agent、Cookie等信息。</li><li>请求体，请求时提交的数据，如登录时的用户名、密码。</li></ul></li><li>Response应包含响应信息<ul><li>响应状态，2**代表成功，3**代表重定向，4**客户端错误，5**服务器错误，等等。</li><li>响应头，包含Cookie、类型等。</li><li>响应体，最主要的部分，爬取的数据从中提取，一般类型有网页、图片、文件等。</li></ul></li></ul><h2 id="HTTP请求过程"><a href="#HTTP请求过程" class="headerlink" title="HTTP请求过程"></a>HTTP请求过程</h2><p>一次HTTP请求可以简单理解为请求-响应过程，客户端向服务器发送请求，服务器向客户端返回响应。过程如下。<br>(1）连接:当我们输入URL 访问时，首先要建立一个socket连接，因为socket 是通过P和端口建立的，所以之前还有一个DNS解析过程，把URL变成IP。若URL里不包含端口号，则使用默认端口号。<br>(2）请求:连接成功建立后，开始向 Web 服务器发送请求，请求常用的是GET或POST命令。<br>(3）响应:Web服务器收到请求后，进行处理。Web服务器根据请求信息查找文件，如果找到该文件，就把该文件内容传送给相应的Web浏览器。<br>(4）断开连接:当响应结束后，Web浏览器显示响应的信息，同时与Web服务器断开连接。</p><blockquote><p><strong>参考：</strong></p><ol><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络请求库之requests</title>
      <link href="/2024/07/22/python-wang-luo-qing-qiu-ku-zhi-requests/"/>
      <url>/2024/07/22/python-wang-luo-qing-qiu-ku-zhi-requests/</url>
      
        <content type="html"><![CDATA[<h1 id="Python网络请求库之requests"><a href="#Python网络请求库之requests" class="headerlink" title="Python网络请求库之requests"></a>Python网络请求库之requests</h1><ul><li><p>Python <strong><code>requests</code></strong> 是一个常用的 HTTP 请求库，可以方便地向网站发送 HTTP 请求，并获取响应结果。比 urllib模块更简洁。</p></li><li><p>安装：<strong><code>pip install requests</code></strong></p></li><li><p>向指定 URL 发送 HTTP 请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 requests 包</span><span class="token keyword">import</span> requests<span class="token comment"># 发送请求</span>x <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/'</span><span class="token punctuation">)</span><span class="token comment"># 返回网页内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/delete'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/put'</span><span class="token punctuation">,</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/delete'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每次调用 requests 请求之后，会返回一个 response 对象，该对象包含了具体的响应信息，如状态码、响应头、响应内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 获取响应状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 获取响应头</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 获取响应内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>响应信息</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">属性或方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">apparent_encoding</td><td style="text-align:left">编码方式</td></tr><tr><td style="text-align:left">close()</td><td style="text-align:left">关闭与服务器的连接</td></tr><tr><td style="text-align:left">content</td><td style="text-align:left">返回响应的内容，以字节为单位</td></tr><tr><td style="text-align:left">cookies</td><td style="text-align:left">返回一个 CookieJar 对象，包含了从服务器发回的 cookie</td></tr><tr><td style="text-align:left">elapsed</td><td style="text-align:left">返回一个 timedelta 对象，包含了从发送请求到响应到达之间经过的时间量，可以用于测试响应速度。比如 r.elapsed.microseconds 表示响应到达需要多少微秒。</td></tr><tr><td style="text-align:left">encoding</td><td style="text-align:left">解码 r.text 的编码方式</td></tr><tr><td style="text-align:left">headers</td><td style="text-align:left">返回响应头，字典格式</td></tr><tr><td style="text-align:left">history</td><td style="text-align:left">返回包含请求历史的响应对象列表（url）</td></tr><tr><td style="text-align:left">is_permanent_redirect</td><td style="text-align:left">如果响应是永久重定向的 url，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left">is_redirect</td><td style="text-align:left">如果响应被重定向，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left">iter_content()</td><td style="text-align:left">迭代响应</td></tr><tr><td style="text-align:left">iter_lines()</td><td style="text-align:left">迭代响应的行</td></tr><tr><td style="text-align:left">json()</td><td style="text-align:left">返回结果的 JSON 对象 (结果需要以 JSON 格式编写的，否则会引发错误)</td></tr><tr><td style="text-align:left">links</td><td style="text-align:left">返回响应的解析头链接</td></tr><tr><td style="text-align:left">next</td><td style="text-align:left">返回重定向链中下一个请求的 PreparedRequest 对象</td></tr><tr><td style="text-align:left">ok</td><td style="text-align:left">检查 “status_code” 的值，如果小于400，则返回 True，如果不小于 400，则返回 False</td></tr><tr><td style="text-align:left">raise_for_status()</td><td style="text-align:left">如果发生错误，方法返回一个 HTTPError 对象</td></tr><tr><td style="text-align:left">reason</td><td style="text-align:left">响应状态的描述，比如 “Not Found” 或 “OK”</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">返回请求此响应的请求对象</td></tr><tr><td style="text-align:left">status_code</td><td style="text-align:left">返回 http 的状态码，比如 404 和 200（200 是 OK，404 是 Not Found）</td></tr><tr><td style="text-align:left">text</td><td style="text-align:left">返回响应的内容，unicode 类型数据</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">返回响应的 URL</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 requests 包</span><span class="token keyword">import</span> requests<span class="token comment"># 发送请求</span>x <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/'</span><span class="token punctuation">)</span><span class="token comment"># 返回 http 的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># 响应状态的描述</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token comment"># 返回编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>apparent_encoding<span class="token punctuation">)</span><span class="token comment"># 200</span><span class="token comment"># OK</span><span class="token comment"># utf-8</span><span class="token comment"># 请求 json 数据文件，返回 json 内容</span><span class="token comment"># 发送请求</span>x <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span><span class="token comment"># 返回 json 数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># {'name': '网站', 'num': 3, 'sites': [{'name': 'Google', 'info': ['Android', 'Google 搜索', 'Google 翻译']}, {'name': 'Runoob', 'info': ['菜鸟教程', '菜鸟工具', '菜鸟微信']}, {'name': 'Taobao', 'info': ['淘宝', '网购']}]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requests-方法"><a href="#requests-方法" class="headerlink" title="requests 方法"></a>requests 方法</h2><ul><li>requests 方法如下表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>方法</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>delete(<em>url</em>, <em>args</em>)</strong></td><td style="text-align:left">发送 DELETE 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>get(<em>url</em>, <em>params, args</em>)</strong></td><td style="text-align:left">发送 GET 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>head(<em>url</em>, <em>args</em>)</strong></td><td style="text-align:left">发送 HEAD 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>patch(<em>url</em>, <em>data, args</em>)</strong></td><td style="text-align:left">发送 PATCH 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>post(<em>url</em>, <em>data, json, args</em>)</strong></td><td style="text-align:left">发送 POST 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>put(<em>url</em>, <em>data, args</em>)</strong></td><td style="text-align:left">发送 PUT 请求到指定 url</td></tr><tr><td style="text-align:left"><strong>request(<em>method</em>, <em>url</em>, <em>args</em>)</strong></td><td style="text-align:left">向指定的 url 发送指定的请求方法</td></tr></tbody></table></div><ul><li><p>设置请求头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 requests 包</span><span class="token keyword">import</span> requests kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'s'</span><span class="token punctuation">:</span><span class="token string">'python 教程'</span><span class="token punctuation">}</span><span class="token comment"># 设置请求头</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span> <span class="token comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> kw<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token comment"># 查看响应状态码</span><span class="token keyword">print</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># 查看响应头部字符编码</span><span class="token keyword">print</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token comment"># 查看完整url地址</span><span class="token keyword">print</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送 POST 请求:<strong><code>requests.post(url, data={key: value}, json={key: value}, args)</code></strong></p><ul><li><strong>url</strong> 请求 url。</li><li><strong>data</strong> 参数为要发送到指定 url 的字典、元组列表、字节或文件对象。</li><li><strong>json</strong> 参数为要发送到指定 url 的 JSON 对象。</li><li><strong>args</strong> 为其他参数，比如 cookies、headers、verify等。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 requests 包</span><span class="token keyword">import</span> requests<span class="token comment"># 表单参数，参数名为 fname 和 lname</span>myobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'RUNOOB'</span><span class="token punctuation">,</span><span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Boy'</span><span class="token punctuation">}</span><span class="token comment"># 发送请求</span>x <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/demo_post2.php'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> myobj<span class="token punctuation">)</span><span class="token comment"># 返回网页内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="cookies参数"><a href="#cookies参数" class="headerlink" title="cookies参数"></a>cookies参数</h2><ul><li><p>指定cookies参数操作Cookie，内容需要以dict形式传递。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.csdn.net/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">'uuid_tt_dd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>my_cookies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'test_cookie'</span><span class="token punctuation">:</span><span class="token string">'test'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.bing.com"</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span>my_cookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="重定向与请求历史"><a href="#重定向与请求历史" class="headerlink" title="重定向与请求历史"></a>重定向与请求历史</h2><ul><li>重定向是指将网络请求重新转向其他位置，例如网站迁移，访问原网址时自动转到新的网址，或者其他原因跳转到新的网址。</li><li>默认情况下，除了head方法外，requests会自动处理所有的重定向,也可以手动设定allow_redirects参数为True 或者False来开启或禁止重定向，例如<code>r=requests.get('http://www.z.cn',allow_redirects=False)</code>。</li><li>如果允许重定向，可以使用响应对象的history方法来查看跳转信息。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> requests<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token string">'http://github.com'</span> <span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>url<span class="token string">'https://github.com/'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>status_code<span class="token number">200</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>指定<strong>timeout</strong>参数来设定等待网站响应的时间（单位:秒)，超过设定时间之后停止等待。</p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><ul><li><p>当某些网站对访问IP有限制（如地域限制或次数限制）时，我们可以使用代理来绕过限制。</p></li><li><p>requests使用代理只需指定proxies参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsproxie <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"http"</span> <span class="token punctuation">:</span> <span class="token string">"http://10.10.1.10:3128"</span><span class="token punctuation">,</span>    <span class="token string">"https"</span> <span class="token punctuation">:</span> <span class="token string">"http://10.10.1.10:1080"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://example.org"</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代理验证：<strong><code>http://user:password@host/</code></strong></p></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python3/python-requests.html">https://www.runoob.com/python3/python-requests.html</a></li><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络请求库之urllib</title>
      <link href="/2024/07/22/python-wang-luo-qing-qiu-ku-zhi-urllib/"/>
      <url>/2024/07/22/python-wang-luo-qing-qiu-ku-zhi-urllib/</url>
      
        <content type="html"><![CDATA[<h1 id="Python网络请求库之urllib"><a href="#Python网络请求库之urllib" class="headerlink" title="Python网络请求库之urllib"></a>Python网络请求库之urllib</h1><ul><li>Python <strong><code>urllib</code></strong> 库是内置库，用于操作网页 URL，并对网页的内容进行抓取处理。</li><li>urllib 包 包含以下几个模块：<ul><li><strong>urllib.request</strong> - 打开和读取 URL。</li><li><strong>urllib.error</strong> - 包含 urllib.request 抛出的异常。</li><li><strong>urllib.parse</strong> - 解析 URL。</li><li><strong>urllib.robotparser</strong> - 解析 robots.txt 文件。</li><li><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407221111001.png" alt="image-20240722104141679"></li></ul></li></ul><h2 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h2><ul><li><p><code>urllib.request</code> 定义了一些打开 URL 的函数和类，包含授权验证、重定向、浏览器 cookies等。</p></li><li><p><code>urllib.request</code> 可以模拟浏览器的一个请求发起过程。</p></li><li><p>打开 URL：<strong><code>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</code></strong></p><ul><li><strong>url</strong>：url 地址。</li><li><strong>data</strong>：发送到服务器的其他数据对象，默认为 None。</li><li><strong>timeout</strong>：设置访问超时时间。</li><li><strong>cafile 和 capath</strong>：cafile 为 CA 证书， capath 为 CA 证书的路径，使用 HTTPS 需要用到。</li><li><strong>cadefault</strong>：已经被弃用。</li><li><strong>context</strong>：ssl.SSLContext类型，用来指定 SSL 设置。</li></ul></li><li><p>读取网页内容</p><ul><li><p><strong><code>read()</code></strong> - 获取网页的 HTML 实体代码,可以指定读取的长度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenmyURL <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myURL<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myURL<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>readline()</code></strong> - 读取文件的一行内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenmyURL <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myURL<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#读取一行内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>readlines()</code></strong> - 读取文件的全部内容，它会把读取的内容赋值给一个列表变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenmyURL <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span>lines <span class="token operator">=</span> myURL<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>getcode()</code></strong> 函数获取网页状态码，返回 200 说明网页正常，返回 404 说明网页不存在</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestmyURL1 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myURL1<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 200</span><span class="token keyword">try</span><span class="token punctuation">:</span>    myURL2 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/no.html"</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> e<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>   <span class="token comment"># 404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>URL 的编码与解码：<strong><code>urllib.request.quote()</code></strong> 与 <strong><code>urllib.request.unquote()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request encode_url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span>  <span class="token comment"># 编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>encode_url<span class="token punctuation">)</span>unencode_url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>encode_url<span class="token punctuation">)</span>    <span class="token comment"># 解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>unencode_url<span class="token punctuation">)</span><span class="token comment"># https%3A//www.runoob.com/</span><span class="token comment"># https://www.runoob.com/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="模拟头部信息"><a href="#模拟头部信息" class="headerlink" title="模拟头部信息"></a>模拟头部信息</h2><ul><li><p><strong><code>class urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</code></strong></p><ul><li><strong>url</strong>：url 地址。</li><li><strong>data</strong>：发送到服务器的其他数据对象，默认为 None。</li><li><strong>headers</strong>：HTTP 请求的头部信息，字典格式。</li><li><strong>origin_req_host</strong>：请求的主机地址，IP 或域名。</li><li><strong>unverifiable</strong>：很少用这个参数，用于设置网页是否需要验证，默认是 False。</li><li><strong>method</strong>：请求方法， 如 GET、POST、DELETE、PUT等。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseurl <span class="token operator">=</span> <span class="token string">'https://www.runoob.com/?s='</span>  <span class="token comment"># 菜鸟教程搜索页面</span>keyword <span class="token operator">=</span> <span class="token string">'Python 教程'</span> key_code <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>  <span class="token comment"># 对请求进行编码</span>url_all <span class="token operator">=</span> url<span class="token operator">+</span>key_codeheader <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span><span class="token punctuation">}</span>   <span class="token comment">#头部信息</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url_all<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>reponse <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./urllib_test_runoob_search.html"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>    <span class="token comment"># 将文件写入到当前目录中</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>reponse<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 提交到表单页面</span>url <span class="token operator">=</span> <span class="token string">'https://www.runoob.com/try/py3/py3_urllib_test.php'</span>  data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'RUNOOB'</span><span class="token punctuation">,</span> <span class="token string">'tag'</span> <span class="token punctuation">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">}</span>   <span class="token comment"># 提交数据</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span><span class="token punctuation">}</span>   <span class="token comment">#头部信息</span>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token comment"># 对参数进行编码，解码使用 urllib.parse.urldecode</span>request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> header<span class="token punctuation">)</span>   <span class="token comment"># 请求处理</span>reponse<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 读取结果</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./urllib_test_post_runoob.html"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>    <span class="token comment"># 将文件写入到当前目录中</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>reponse<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用Cookie"><a href="#使用Cookie" class="headerlink" title="使用Cookie"></a>使用Cookie</h2><ul><li><p>Cookie是当浏览某网站时，网站存储的信息文件，它记录了用户的ID、密码、浏览记录、浏览时间等信息。当同一用户再次访问该网站时，网站通过读取Cookie，获取用户的相关信息，比如用户名、密码，用于自动登录。</p></li><li><p>使用urllib操作网站Cookie需要用到<strong><code>urllib.request.HTTPCookieProcessor(cookie)</code></strong>。</p></li><li><p>使用Cookie需要创建一个<strong>opener</strong>。在 Python 的 http包中包含<strong>cookiejar</strong>模块，用于提供对Cookie 的支持。http.cookiejar 功能强大，我们可以利用本模块的CookieJar类的对象来捕获Cookie，并在后续连接请求时重新发送，比如可以实现模拟登录功能。</p></li><li><p>urllib获取cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取cookie</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>requestcookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener <span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> cookie<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>urllib保存cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#保存Cookie</span>filename <span class="token operator">=</span> <span class="token string">'saved_cookies.txt'</span><span class="token comment"># FileCookieJar、MozillaCookieJar、LWPCookieJar均为保存Cookie信息，只是保存格式不同</span>cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>MozillacookieJar<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>cookie<span class="token punctuation">.</span>save<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>urllib使用cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#使用Cookie</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>requestcookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>MozillacookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>cookie<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'saved_cookies.txt'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="urllib-error"><a href="#urllib-error" class="headerlink" title="urllib.error"></a>urllib.error</h2><ul><li><p>urllib.error 模块为 urllib.request 所引发的异常定义了异常类，基础异常类是 URLError。</p></li><li><p>urllib.error 包含了两个方法，<strong>URLError 和 HTTPError</strong>。</p></li><li><p>URLError 是 OSError 的一个子类，用于处理程序在遇到问题时会引发此异常（或其派生的异常），包含的属性 reason 为引发异常的原因。</p></li><li><p>HTTPError 是 URLError 的一个子类，用于处理特殊 HTTP 错误例如作为认证请求的时候，包含的属性 <strong>code</strong> 为 HTTP 的状态码， <strong>reason</strong> 为引发异常的原因，<strong>headers</strong> 为导致 HTTPError 的特定 HTTP 请求的 HTTP 响应头。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>errormyURL1 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myURL1<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 200</span><span class="token keyword">try</span><span class="token punctuation">:</span>    myURL2 <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/no.html"</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> e<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>   <span class="token comment"># 404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h2><ul><li><p>urllib.parse 用于解析 URL</p></li><li><p><strong><code>urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)</code></strong></p><ul><li><strong>urlstring</strong>: url 地址</li><li><strong>scheme</strong>:协议类型</li><li><strong>allow_fragments</strong>:参数为 false，则无法识别片段标识符。相反，它们被解析为路径，参数或查询组件的一部分，并 fragment 在返回值中设置为空字符串。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseo <span class="token operator">=</span> urlparse<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/?s=python+%E6%95%99%E7%A8%8B"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token comment"># ParseResult(scheme='https', netloc='www.runoob.com', path='/', params='', query='s=python+%E6%95%99%E7%A8%8B', fragment='')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回内容是一个元组，包含 6 个字符串：协议，位置，路径，参数，查询，判断。</p></li><li><p>可以直接读取协议内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseo <span class="token operator">=</span> urlparse<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/?s=python+%E6%95%99%E7%A8%8B"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span><span class="token comment"># https</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>完整内容</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">索引</th><th style="text-align:left">值</th><th style="text-align:left">值（如果不存在）</th></tr></thead><tbody><tr><td style="text-align:left"><code>scheme</code></td><td style="text-align:left">0</td><td style="text-align:left">URL协议</td><td style="text-align:left"><em>scheme</em> 参数</td></tr><tr><td style="text-align:left"><code>netloc</code></td><td style="text-align:left">1</td><td style="text-align:left">网络位置部分</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left"><code>path</code></td><td style="text-align:left">2</td><td style="text-align:left">分层路径</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left"><code>params</code></td><td style="text-align:left">3</td><td style="text-align:left">最后路径元素的参数</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left"><code>query</code></td><td style="text-align:left">4</td><td style="text-align:left">查询组件</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left"><code>fragment</code></td><td style="text-align:left">5</td><td style="text-align:left">片段识别</td><td style="text-align:left">空字符串</td></tr><tr><td style="text-align:left"><code>username</code></td><td style="text-align:left"></td><td style="text-align:left">用户名</td><td style="text-align:left"><code>None</code></td></tr><tr><td style="text-align:left"><code>password</code></td><td style="text-align:left"></td><td style="text-align:left">密码</td><td style="text-align:left"><code>None</code></td></tr><tr><td style="text-align:left"><code>hostname</code></td><td style="text-align:left"></td><td style="text-align:left">主机名（小写）</td><td style="text-align:left"><code>None</code></td></tr><tr><td style="text-align:left"><code>port</code></td><td style="text-align:left"></td><td style="text-align:left">端口号为整数（如果存在）</td><td style="text-align:left"><code>None</code></td></tr></tbody></table></div><h2 id="urllib-robotparser"><a href="#urllib-robotparser" class="headerlink" title="urllib.robotparser"></a>urllib.robotparser</h2><ul><li><p>urllib.robotparser 用于解析 robots.txt 文件。</p></li><li><p>robots.txt（统一小写）是一种存放于网站根目录下的 robots 协议，它通常用于告诉搜索引擎对网站的抓取规则。</p></li><li><p>urllib.robotparser 提供了 RobotFileParser 类<br><strong><code>class urllib.robotparser.RobotFileParser(url='')</code></strong></p></li><li><p>读取、解析 robots.txt 文件的方法</p><ul><li>set_url(url) - 设置 robots.txt 文件的 URL。</li><li>read() - 读取 robots.txt URL 并将其输入解析器。</li><li>parse(lines) - 解析行参数。</li><li>can_fetch(useragent, url) - 如果允许 useragent 按照被解析 robots.txt 文件中的规则来获取 url 则返回 True。</li><li>mtime() -返回最近一次获取 robots.txt 文件的时间。 这适用于需要定期检查 robots.txt 文件更新情况的长时间运行的网页爬虫。</li><li>modified() - 将最近一次获取 robots.txt 文件的时间设置为当前时间。</li><li>crawl_delay(useragent) -为指定的 useragent 从 robots.txt 返回 Crawl-delay 形参。 如果此形参不存在或不适用于指定的 useragent 或者此形参的 robots.txt 条目存在语法错误，则返回 None。</li><li>request_rate(useragent) -以 named tuple RequestRate(requests, seconds) 的形式从 robots.txt 返回 Request-rate 形参的内容。 如果此形参不存在或不适用于指定的 useragent 或者此形参的 robots.txt 条目存在语法错误，则返回 None。</li><li>site_maps() - 以 list() 的形式从 robots.txt 返回 Sitemap 形参的内容。 如果此形参不存在或者此形参的 robots.txt 条目存在语法错误，则返回 None。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> urllib<span class="token punctuation">.</span>robotparser<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>robotparser<span class="token punctuation">.</span>RobotFileParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp<span class="token punctuation">.</span>set_url<span class="token punctuation">(</span><span class="token string">"http://www.musi-cal.com/robots.txt"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rrate <span class="token operator">=</span> rp<span class="token punctuation">.</span>request_rate<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rrate<span class="token punctuation">.</span>requests<span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rrate<span class="token punctuation">.</span>seconds<span class="token number">20</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp<span class="token punctuation">.</span>crawl_delay<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco"</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"http://www.musi-cal.com/"</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python3/python-urllib.html">https://www.runoob.com/python3/python-urllib.html</a></li><li>东郭大猫. Scrapy网络爬虫实战. 清华大学出版社, 2019</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 状态码</title>
      <link href="/2024/07/22/http-zhuang-tai-ma/"/>
      <url>/2024/07/22/http-zhuang-tai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><ul><li>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个<strong>包含 HTTP 状态码的信息头（server header）</strong>用以响应浏览器的请求。<strong>HTTP Status Code</strong></li><li>常见的 HTTP 状态码：<ul><li><strong>1xx（信息性状态码）</strong>：表示接收的请求正在处理。</li><li><strong>2xx（成功状态码）</strong>：表示请求正常处理完毕。</li><li><strong>3xx（重定向状态码）</strong>：需要后续操作才能完成这一请求。</li><li><strong>4xx（客户端错误状态码）</strong>：表示请求包含语法错误或无法完成。</li><li><strong>5xx（服务器错误状态码）</strong>：服务器在处理请求的过程中发生了错误。</li></ul></li></ul><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><ul><li>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：<strong>信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)</strong>：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">分类描述</th></tr></thead><tbody><tr><td style="text-align:left">1**</td><td style="text-align:left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left">2**</td><td style="text-align:left">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left">3**</td><td style="text-align:left">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left">4**</td><td style="text-align:left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left">5**</td><td style="text-align:left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></div><ul><li>HTTP状态码列表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">状态码英文名称</th><th style="text-align:left">中文描述</th></tr></thead><tbody><tr><td style="text-align:left">100</td><td style="text-align:left">Continue</td><td style="text-align:left">继续。客户端应继续其请求</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">Switching Protocols</td><td style="text-align:left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">200</td><td style="text-align:left">OK</td><td style="text-align:left">请求成功。一般用于GET与POST请求</td></tr><tr><td style="text-align:left">201</td><td style="text-align:left">Created</td><td style="text-align:left">已创建。成功请求并创建了新的资源</td></tr><tr><td style="text-align:left">202</td><td style="text-align:left">Accepted</td><td style="text-align:left">已接受。已经接受请求，但未处理完成</td></tr><tr><td style="text-align:left">203</td><td style="text-align:left">Non-Authoritative Information</td><td style="text-align:left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td style="text-align:left">204</td><td style="text-align:left">No Content</td><td style="text-align:left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td style="text-align:left">205</td><td style="text-align:left">Reset Content</td><td style="text-align:left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td style="text-align:left">206</td><td style="text-align:left">Partial Content</td><td style="text-align:left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">300</td><td style="text-align:left">Multiple Choices</td><td style="text-align:left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td style="text-align:left">301</td><td style="text-align:left">Moved Permanently</td><td style="text-align:left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td style="text-align:left">302</td><td style="text-align:left">Found</td><td style="text-align:left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td style="text-align:left">303</td><td style="text-align:left">See Other</td><td style="text-align:left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td style="text-align:left">304</td><td style="text-align:left">Not Modified</td><td style="text-align:left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td style="text-align:left">305</td><td style="text-align:left">Use Proxy</td><td style="text-align:left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:left">306</td><td style="text-align:left">Unused</td><td style="text-align:left">已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:left">307</td><td style="text-align:left">Temporary Redirect</td><td style="text-align:left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">400</td><td style="text-align:left">Bad Request</td><td style="text-align:left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td style="text-align:left">401</td><td style="text-align:left">Unauthorized</td><td style="text-align:left">请求要求用户的身份认证</td></tr><tr><td style="text-align:left">402</td><td style="text-align:left">Payment Required</td><td style="text-align:left">保留，将来使用</td></tr><tr><td style="text-align:left">403</td><td style="text-align:left">Forbidden</td><td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td style="text-align:left">404</td><td style="text-align:left">Not Found</td><td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td style="text-align:left">405</td><td style="text-align:left">Method Not Allowed</td><td style="text-align:left">客户端请求中的方法被禁止</td></tr><tr><td style="text-align:left">406</td><td style="text-align:left">Not Acceptable</td><td style="text-align:left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td style="text-align:left">407</td><td style="text-align:left">Proxy Authentication Required</td><td style="text-align:left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td style="text-align:left">408</td><td style="text-align:left">Request Time-out</td><td style="text-align:left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td style="text-align:left">409</td><td style="text-align:left">Conflict</td><td style="text-align:left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:left">410</td><td style="text-align:left">Gone</td><td style="text-align:left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td style="text-align:left">411</td><td style="text-align:left">Length Required</td><td style="text-align:left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td style="text-align:left">412</td><td style="text-align:left">Precondition Failed</td><td style="text-align:left">客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:left">413</td><td style="text-align:left">Request Entity Too Large</td><td style="text-align:left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td style="text-align:left">414</td><td style="text-align:left">Request-URI Too Large</td><td style="text-align:left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td style="text-align:left">415</td><td style="text-align:left">Unsupported Media Type</td><td style="text-align:left">服务器无法处理请求附带的媒体格式</td></tr><tr><td style="text-align:left">416</td><td style="text-align:left">Requested range not satisfiable</td><td style="text-align:left">客户端请求的范围无效</td></tr><tr><td style="text-align:left">417</td><td style="text-align:left">Expectation Failed（预期失败）</td><td style="text-align:left">服务器无法满足请求头中 Expect 字段指定的预期行为。</td></tr><tr><td style="text-align:left">418</td><td style="text-align:left">I’m a teapot</td><td style="text-align:left">状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">500</td><td style="text-align:left">Internal Server Error</td><td style="text-align:left">服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:left">501</td><td style="text-align:left">Not Implemented</td><td style="text-align:left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:left">502</td><td style="text-align:left">Bad Gateway</td><td style="text-align:left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td style="text-align:left">503</td><td style="text-align:left">Service Unavailable</td><td style="text-align:left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td style="text-align:left">504</td><td style="text-align:left">Gateway Time-out</td><td style="text-align:left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:left">505</td><td style="text-align:left">HTTP Version not supported</td><td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table></div><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/http/http-status-codes.html">https://www.runoob.com/http/http-status-codes.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习32-hashlib 模块</title>
      <link href="/2024/07/17/python-xue-xi-32-hashlib-mo-kuai/"/>
      <url>/2024/07/17/python-xue-xi-32-hashlib-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="hashlib-模块"><a href="#hashlib-模块" class="headerlink" title="hashlib 模块"></a>hashlib 模块</h1><ul><li><p>Python <strong>hashlib</strong> 模块主要用于进行哈希（hash）操作。</p></li><li><p>哈希（Hash）是一种将<strong>任意长度的输入</strong>数据映射为<strong>固定长度输出</strong>数据的算法。</p></li><li><p>哈希通常用于验证数据的完整性、安全存储密码等场景。</p></li><li><p>哈希函数的输出通常是一串看似随机的字母和数字。</p></li><li><p>hashlib 模块提供了常见的哈希算法的实现，如 MD5、SHA-1、SHA-256 等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib <span class="token builtin">dir</span><span class="token punctuation">(</span>hashlib<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__all__'</span><span class="token punctuation">,</span> <span class="token string">'__block_openssl_constructor'</span><span class="token punctuation">,</span> <span class="token string">'__builtin_constructor_cache'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__get_builtin_constructor'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'_hashlib'</span><span class="token punctuation">,</span> <span class="token string">'algorithms_available'</span><span class="token punctuation">,</span> <span class="token string">'algorithms_guaranteed'</span><span class="token punctuation">,</span> <span class="token string">'blake2b'</span><span class="token punctuation">,</span> <span class="token string">'blake2s'</span><span class="token punctuation">,</span> <span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token string">'pbkdf2_hmac'</span><span class="token punctuation">,</span> <span class="token string">'scrypt'</span><span class="token punctuation">,</span> <span class="token string">'sha1'</span><span class="token punctuation">,</span> <span class="token string">'sha224'</span><span class="token punctuation">,</span> <span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token string">'sha384'</span><span class="token punctuation">,</span> <span class="token string">'sha3_224'</span><span class="token punctuation">,</span> <span class="token string">'sha3_256'</span><span class="token punctuation">,</span> <span class="token string">'sha3_384'</span><span class="token punctuation">,</span> <span class="token string">'sha3_512'</span><span class="token punctuation">,</span> <span class="token string">'sha512'</span><span class="token punctuation">,</span> <span class="token string">'shake_128'</span><span class="token punctuation">,</span> <span class="token string">'shake_256'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1 常用方法"></a>1 常用方法</h2><ul><li><p><strong><code>hashlib.new(name, data=None)</code></strong>: 创建一个哈希对象。name 参数是哈希算法的名称，data 参数是要被哈希的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha256_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">)</span>sha256_hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha256_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 673dc967d03201db7fe47b7eabd56c47ca5bc694222de303106a5504e5d0daa8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>hashlib.md5() / hashlib.sha1() / hashlib.sha256() / ...</code></strong>: 直接使用特定的哈希算法创建哈希对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmd5_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>md5_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 18fa661e2a4a7dd6471cc1407290cf6e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-哈希对象方法"><a href="#2-哈希对象方法" class="headerlink" title="2 哈希对象方法"></a>2 哈希对象方法</h2><ul><li><p><strong><code>update(data)</code></strong>: 更新哈希对象的消息内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha256_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">)</span>sha256_hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'Hello, '</span><span class="token punctuation">)</span>sha256_hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'Runoob!'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha256_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1b56561022276e9a5a8e1cda72e1b39fca6f6074326a74d39f6dfd9540c8ecd7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>hexdigest()</code></strong>: 获取十六进制表示的哈希值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmd5_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>md5_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 18fa661e2a4a7dd6471cc1407290cf6e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>digest()</code></strong>: 获取二进制表示的哈希值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha1_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha1_hash<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'4\x17\t\xd0\xdb\xc2f3/\x1c\xbc\xd8\xc2_\xd4\xa0T\x12\xb7\xd4'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-常见哈希算法"><a href="#3-常见哈希算法" class="headerlink" title="3 常见哈希算法"></a>3 常见哈希算法</h2><ul><li><p><strong>MD5</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmd5_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>md5_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 18fa661e2a4a7dd6471cc1407290cf6e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>SHA-1</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha1_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha1_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 341709d0dbc266332f1cbcd8c25fd4a05412b7d4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>SHA-256</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha256_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha256_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 673dc967d03201db7fe47b7eabd56c47ca5bc694222de303106a5504e5d0daa8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>SHA-512</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibsha512_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha512<span class="token punctuation">(</span><span class="token string">b'RUNOOB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha512_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 7cfe50493eebd48ee7330c797459c2d0d5ca943bd1c84ad7a0b6783b11cd49d06b4a1dc84ee9ea5e20d0bfedbdb67e716500a20e5870abecea3f32dc8484a811</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习31-包管理工具pip</title>
      <link href="/2024/07/16/python-xue-xi-31-bao-guan-li-gong-ju-pip/"/>
      <url>/2024/07/16/python-xue-xi-31-bao-guan-li-gong-ju-pip/</url>
      
        <content type="html"><![CDATA[<h1 id="包管理工具pip"><a href="#包管理工具pip" class="headerlink" title="包管理工具pip"></a>包管理工具pip</h1><ul><li><p>pip 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。</p></li><li><p>软件包可以在 <a href="https://pypi.org/">https://pypi.org/</a> 中找到。</p></li><li><p><em>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token parameter variable">--version</span>pip <span class="token function">install</span> numpypip uninstall numpypip list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导出当前 Python 环境的配置:<strong><code>pip freeze</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">&gt;</span> requirements.txt<span class="token comment"># 重新创建相同的环境</span>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习30-直接赋值、浅拷贝和深度拷贝解析</title>
      <link href="/2024/07/15/python-xue-xi-30-zhi-jie-fu-zhi-qian-kao-bei-he-shen-du-kao-bei-jie-xi/"/>
      <url>/2024/07/15/python-xue-xi-30-zhi-jie-fu-zhi-qian-kao-bei-he-shen-du-kao-bei-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="直接赋值、浅拷贝和深度拷贝解析"><a href="#直接赋值、浅拷贝和深度拷贝解析" class="headerlink" title="直接赋值、浅拷贝和深度拷贝解析"></a>直接赋值、浅拷贝和深度拷贝解析</h1><ul><li><p><strong>直接赋值：</strong>其实就是对象的引用（别名）。</p></li><li><p><strong>浅拷贝(copy)：</strong>拷贝父对象，不会拷贝对象的内部的子对象，子对象仍是引用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> copy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> c<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> c<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*-coding:utf-8 -*-</span> <span class="token keyword">import</span> copya <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">#原始对象</span> b <span class="token operator">=</span> a                       <span class="token comment">#赋值，传对象的引用</span>c <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token comment">#对象拷贝，浅拷贝</span>d <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment">#对象拷贝，深拷贝</span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token comment">#修改对象a</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>            <span class="token comment">#修改对象a中的['a', 'b']数组对象</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'a = '</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'b = '</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'c = '</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'d = '</span><span class="token punctuation">,</span> d <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a = '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b = '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c = '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'d = '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习29-JSON</title>
      <link href="/2024/07/14/python-xue-xi-29-json/"/>
      <url>/2024/07/14/python-xue-xi-29-json/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p>Python3 中可以使用 json 模块来对 JSON 数据进行编解码，它包含了两个函数：</p><ul><li><strong>json.dumps():</strong> 对数据进行编码。</li><li><strong>json.loads():</strong> 对数据进行解码。</li></ul></li><li><p>处理文件: <strong>json.dump()</strong> 和 <strong>json.load()</strong> </p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171129256.png" alt="img"></p></li><li><p>Python 编码为 JSON 类型转换对应表：</p><p>| Python                                 | JSON   |<br>| :——————————————————- | :——- |<br>| dict                                   | object |<br>| list, tuple                            | array  |<br>| str                                    | string |<br>| int, float, int- &amp; float-derived Enums | number |<br>| True                                   | true   |<br>| False                                  | false  |<br>| None                                   | null   |</p></li><li><p>JSON 解码为 Python 类型转换对应表：</p><p>| JSON          | Python |<br>| :—————— | :——- |<br>| object        | dict   |<br>| array         | list   |<br>| string        | str    |<br>| number (int)  | int    |<br>| number (real) | float  |<br>| true          | True   |<br>| false         | False  |<br>| null          | None   |</p></li><li><p><code>pprint()</code> 函数打印：按照key的字母顺序以一种更加美观的方式输出</p></li><li><p>一般来讲，JSON解码会根据提供的数据创建dicts或lists。 如果你想要创建其他类型的对象，可以给 <code>json.loads()</code> 传递object_pairs_hook或object_hook参数。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解码JSON数据并在一个OrderedDict中保留其顺序</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'{"name": "ACME", "shares": 50, "price": 490.1}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s<span class="token punctuation">,</span> object_pairs_hook<span class="token operator">=</span>OrderedDict<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dataOrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'ACME'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token number">490.1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将一个JSON字典转换为一个Python对象</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">JSONObject</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s<span class="token punctuation">,</span> object_hook<span class="token operator">=</span>JSONObject<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data<span class="token punctuation">.</span>name<span class="token string">'ACME'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data<span class="token punctuation">.</span>shares<span class="token number">50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data<span class="token punctuation">.</span>price<span class="token number">490.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>序列化对象实例:提供一个函数，它的输入是一个实例，返回一个可序列化的字典</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token comment"># 序列化实例</span><span class="token keyword">def</span> <span class="token function">serialize_instance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'__classname__'</span> <span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token punctuation">}</span>    d<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> d<span class="token comment"># 获取实例</span><span class="token comment"># Dictionary mapping names to known classes</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Point'</span> <span class="token punctuation">:</span> Point<span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">unserialize_object</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    clsname <span class="token operator">=</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'__classname__'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> clsname<span class="token punctuation">:</span>        cls <span class="token operator">=</span> classes<span class="token punctuation">[</span>clsname<span class="token punctuation">]</span>        obj <span class="token operator">=</span> cls<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token comment"># Make instance without calling __init__</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> d<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>p<span class="token punctuation">,</span> default<span class="token operator">=</span>serialize_instance<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token string">'{"__classname__": "Point", "y": 3, "x": 2}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s<span class="token punctuation">,</span> object_hook<span class="token operator">=</span>unserialize_object<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Point <span class="token builtin">object</span> at <span class="token number">0x1017577d0</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>x<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>y<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习28-数据库</title>
      <link href="/2024/07/14/python-xue-xi-28-shu-ju-ku/"/>
      <url>/2024/07/14/python-xue-xi-28-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="1-MongoDB"><a href="#1-MongoDB" class="headerlink" title="1 MongoDB"></a>1 MongoDB</h2><ul><li><p>MongoDB 是目前最流行的 NoSQL 数据库之一，使用的数据类型 BSON（类似 JSON）。</p></li><li><p><code>PyMongo</code> 驱动：Python 连接 MongoDB 的驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>$ pip <span class="token function">install</span> pymongo<span class="token comment"># 指定安装的版本</span>$ pip <span class="token function">install</span> <span class="token assign-left variable">pymongo</span><span class="token operator">==</span><span class="token number">3.5</span>.1<span class="token comment"># 更新</span>$ pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pymongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-1-数据库"><a href="#1-1-数据库" class="headerlink" title="1.1 数据库"></a>1.1 数据库</h3><ul><li><p><strong>创建数据库</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span> <span class="token comment"># 创建数据库 runoobdb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 MongoDB 中，数据库只有在内容插入后才会创建! 数据库创建后要创建集合(数据表)并插入一个文档(记录)，数据库才会真正创建</p></li><li><p><strong>判断数据库是否已存在</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span> dblist <span class="token operator">=</span> myclient<span class="token punctuation">.</span>list_database_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># dblist = myclient.database_names() # 最新版本的 Python 中已废弃</span><span class="token keyword">if</span> <span class="token string">"runoobdb"</span> <span class="token keyword">in</span> dblist<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库已存在！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-集合"><a href="#1-2-集合" class="headerlink" title="1.2 集合"></a>1.2 集合</h3><ul><li><p><strong>创建集合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span> mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建</p></li><li><p><strong>判断集合是否已存在</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span> mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">'runoobdb'</span><span class="token punctuation">]</span> collist <span class="token operator">=</span> mydb<span class="token punctuation">.</span> list_collection_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># collist = mydb.collection_names()</span><span class="token keyword">if</span> <span class="token string">"sites"</span> <span class="token keyword">in</span> collist<span class="token punctuation">:</span>   <span class="token comment"># 判断 sites 集合是否存在</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"集合已存在！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除集合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> mycol<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果删除成功 drop() 返回 true，如果删除失败(集合不存在)则返回 false。</p></li></ul><h3 id="1-3-文档"><a href="#1-3-文档" class="headerlink" title="1.3 文档"></a>1.3 文档</h3><blockquote><p><strong>插入</strong></p></blockquote><ul><li><p>MongoDB 中的一个文档类似 SQL 表中的一条记录。</p></li><li><p><strong>插入集合：<code>insert_one(dict)</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> mydict <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"RUNOOB"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.runoob.com"</span> <span class="token punctuation">}</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>mydict<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># &lt;pymongo.results.InsertOneResult object at 0x10a34b288&gt;</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>inserted_id<span class="token punctuation">)</span> <span class="token comment"># 返回id</span><span class="token comment"># 5b2369cac315325f3698a1cf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>批量插入：<code>insert_many()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> mylist <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.taobao.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"QQ"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.qq.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Facebook"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.facebook.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"知乎"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"103"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.zhihu.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Github"</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"109"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.github.com"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span> <span class="token comment"># 输出插入的所有文档对应的 _id 值</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>inserted_ids<span class="token punctuation">)</span><span class="token comment"># [ObjectId('5b236aa9c315325f5236bbb6'), ObjectId('5b236aa9c315325f5236bbb7'), ObjectId('5b236aa9c315325f5236bbb8'), ObjectId('5b236aa9c315325f5236bbb9'), ObjectId('5b236aa9c315325f5236bbba')]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>指定id</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"site2"</span><span class="token punctuation">]</span> mylist <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"RUNOOB"</span><span class="token punctuation">,</span> <span class="token string">"cn_name"</span><span class="token punctuation">:</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"Google 搜索"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Facebook"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"脸书"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"淘宝"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Zhihu"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"知乎"</span><span class="token punctuation">}</span><span class="token punctuation">]</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span> <span class="token comment"># 输出插入的所有文档对应的 _id 值</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>inserted_ids<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>查询</strong></p></blockquote><ul><li><p><strong>查询一条数据：<code>find_one()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'_id': ObjectId('5b23696ac315325f269f28d1'), 'name': 'RUNOOB', 'alexa': '10000', 'url': 'https://www.runoob.com'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询集合中所有数据：<code>find()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询指定字段的数据</strong>:将要返回的字段对应值设置为 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'name': 'RUNOOB', 'alexa': '10000'}{'name': 'Google', 'alexa': '1'}{'name': 'Taobao', 'alexa': '100'}{'name': 'QQ', 'alexa': '101'}{'name': 'Facebook', 'alexa': '10'}{'name': '知乎', 'alexa': '103'}{'name': 'Github', 'alexa': '109'}'''</span><span class="token keyword">for</span> x <span class="token keyword">in</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 除了 alexa 字段其他都返回</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 _id，你不能在一个对象中同时指定 0 和 1，如果你设置了一个字段为 0，则其他都为 1，反之亦然。</p></li><li><p><strong>指定条件查询</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"RUNOOB"</span> <span class="token punctuation">}</span> mydoc <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span>myquery<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mydoc<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'_id': ObjectId('5b23696ac315325f269f28d1'), 'name': 'RUNOOB', 'alexa': '10000', 'url': 'https://www.runoob.com'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>高级查询</strong>:使用修饰符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 第一个字母 ASCII 值大于 "H" 的数据</span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"$gt"</span><span class="token punctuation">:</span> <span class="token string">"H"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> mydoc <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span>myquery<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mydoc<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'_id': ObjectId('5b23696ac315325f269f28d1'), 'name': 'RUNOOB', 'alexa': '10000', 'url': 'https://www.runoob.com'}{'_id': ObjectId('5b236aa9c315325f5236bbb6'), 'name': 'Taobao', 'alexa': '100', 'url': 'https://www.taobao.com'}{'_id': ObjectId('5b236aa9c315325f5236bbb7'), 'name': 'QQ', 'alexa': '101', 'url': 'https://www.qq.com'}{'_id': ObjectId('5b236aa9c315325f5236bbb9'), 'name': '知乎', 'alexa': '103', 'url': 'https://www.zhihu.com'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用正则表达式查询</strong>:正则表达式修饰符只用于搜索字符串的字段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 读取 name 字段中第一个字母为 "R" 的数据</span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"$regex"</span><span class="token punctuation">:</span> <span class="token string">"^R"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> mydoc <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span>myquery<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mydoc<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>返回指定条数记录：<code>limit()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> myresult <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果</span><span class="token keyword">for</span> x <span class="token keyword">in</span> myresult<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序：<strong><code>sort()</code></strong> 方法第一个参数为要排序的字段，第二个字段指定排序规则，<strong>1</strong> 为升序，<strong>-1</strong> 为降序，默认为升序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> mydoc <span class="token operator">=</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">"alexa"</span><span class="token punctuation">)</span><span class="token comment"># mydoc = mycol.find().sort("alexa", -1) 降序</span><span class="token keyword">for</span> x <span class="token keyword">in</span> mydoc<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>修改</strong></p></blockquote><ul><li><p>在 MongoDB 中使用 <strong>update_one()</strong> 方法修改文档中的记录。该方法第一个参数为查询的<strong>条件</strong>，第二个参数为要<strong>修改的字段</strong>。如果查找到的匹配数据多于一条，则只会<strong>修改第一条</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 将 alexa 字段的值 10000 改为 12345</span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"10000"</span> <span class="token punctuation">}</span>newvalues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"$set"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"12345"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> mycol<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span>myquery<span class="token punctuation">,</span> newvalues<span class="token punctuation">)</span> <span class="token comment"># 输出修改后的  "sites"  集合</span><span class="token keyword">for</span> x <span class="token keyword">in</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改所有匹配到的记录 <strong><code>update_many()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 将查找所有以 F 开头的 name 字段，并将匹配到所有记录的 alexa 字段修改为 123</span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"$regex"</span><span class="token punctuation">:</span> <span class="token string">"^F"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>newvalues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"$set"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"alexa"</span><span class="token punctuation">:</span> <span class="token string">"123"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span>myquery<span class="token punctuation">,</span> newvalues<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>modified_count<span class="token punctuation">,</span> <span class="token string">"文档已修改"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>删除</strong></p></blockquote><ul><li><p>删除一个文档：<strong><code>delete_one()</code></strong> 该方法第一个参数为查询对象，指定要删除哪些数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 删除 name 字段值为 "Taobao" 的文档 </span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Taobao"</span> <span class="token punctuation">}</span> mycol<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span>myquery<span class="token punctuation">)</span> <span class="token comment"># 删除后输出</span><span class="token keyword">for</span> x <span class="token keyword">in</span> mycol<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除多个文档：<strong><code>delete_many()</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span><span class="token comment"># 删除所有 name 字段中以 F 开头的文档</span>myquery <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"$regex"</span><span class="token punctuation">:</span> <span class="token string">"^F"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span>myquery<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>deleted_count<span class="token punctuation">,</span> <span class="token string">"个文档已删除"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除集合中的所有文档：<strong><code>delete_many()</code></strong>如果传入的是一个空的查询对象，则会删除集合中的所有文档</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo myclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/"</span><span class="token punctuation">)</span>mydb <span class="token operator">=</span> myclient<span class="token punctuation">[</span><span class="token string">"runoobdb"</span><span class="token punctuation">]</span>mycol <span class="token operator">=</span> mydb<span class="token punctuation">[</span><span class="token string">"sites"</span><span class="token punctuation">]</span> x <span class="token operator">=</span> mycol<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>deleted_count<span class="token punctuation">,</span> <span class="token string">"个文档已删除"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2 MySQL"></a>2 MySQL</h2><ul><li><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库</p></li><li><p>PyMySQL 遵循 Python 数据库 API v2.0 规范，并包含了 pure-Python MySQL 客户端库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip <span class="token function">install</span> PyMySQL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-1-数据库连接"><a href="#2-1-数据库连接" class="headerlink" title="2.1 数据库连接"></a>2.1 数据库连接</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>              user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>              password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>              database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用 execute()  方法执行 SQL 查询 </span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT VERSION()"</span><span class="token punctuation">)</span> <span class="token comment"># 使用 fetchone() 方法获取单条数据.</span>data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Database version : %s "</span> <span class="token operator">%</span> data<span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-创建数据库表"><a href="#2-2-创建数据库表" class="headerlink" title="2.2 创建数据库表"></a>2.2 创建数据库表</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                     user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>                     database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用 execute() 方法执行 SQL，如果表存在则删除</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS EMPLOYEE"</span><span class="token punctuation">)</span> <span class="token comment"># 使用预处理语句创建表</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""CREATE TABLE EMPLOYEE (         FIRST_NAME  CHAR(20) NOT NULL,         LAST_NAME  CHAR(20),         AGE INT,           SEX CHAR(1),         INCOME FLOAT )"""</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-插入"><a href="#2-3-插入" class="headerlink" title="2.3 插入"></a>2.3 插入</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                     user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>                     database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用cursor()方法获取操作游标 </span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># SQL 插入语句</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""INSERT INTO EMPLOYEE(FIRST_NAME,         LAST_NAME, AGE, SEX, INCOME)         VALUES ('Mac', 'Mohan', 20, 'M', 2000)"""</span><span class="token triple-quoted-string string">'''使用变量向SQL语句中传递参数sql = "INSERT INTO EMPLOYEE(FIRST_NAME, \       LAST_NAME, AGE, SEX, INCOME) \       VALUES ('%s', '%s',  %s,  '%s',  %s)" % \       ('Mac', 'Mohan', 20, 'M', 2000)'''</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行sql语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交到数据库执行</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 如果发生错误则回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-查询"><a href="#2-4-查询" class="headerlink" title="2.4 查询"></a>2.4 查询</h3><ul><li><p><strong>fetchone():</strong> 该方法获取下一个查询结果集。结果集是一个对象</p></li><li><p><strong>fetchall():</strong> 接收全部的返回结果行.</p></li><li><p><strong>rowcount:</strong> 这是一个只读属性，并返回执行execute()方法后影响的行数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                     user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>                     database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用cursor()方法获取操作游标 </span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># SQL 查询语句 查询EMPLOYEE表中salary（工资）字段大于1000的所有数据</span>sql <span class="token operator">=</span> "SELECT <span class="token operator">*</span> FROM EMPLOYEE \       WHERE INCOME <span class="token operator">&gt;</span> <span class="token operator">%</span>s" <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 获取所有记录列表</span>   results <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>      fname <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      lname <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      age <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      sex <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>      income <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment"># 打印结果</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"fname=%s,lname=%s,age=%s,sex=%s,income=%s"</span> <span class="token operator">%</span> \             <span class="token punctuation">(</span>fname<span class="token punctuation">,</span> lname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> income <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: unable to fetch data"</span><span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-5-更新"><a href="#2-5-更新" class="headerlink" title="2.5 更新"></a>2.5 更新</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                     user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>                     database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用cursor()方法获取操作游标 </span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># SQL 更新语句 将 TESTDB 表中 SEX 为 'M' 的 AGE 字段递增 1</span>sql <span class="token operator">=</span> <span class="token string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交到数据库执行</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 发生错误时回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-删除"><a href="#2-6-删除" class="headerlink" title="2.6 删除"></a>2.6 删除</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token comment"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                     user<span class="token operator">=</span><span class="token string">'testuser'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'test123'</span><span class="token punctuation">,</span>                     database<span class="token operator">=</span><span class="token string">'TESTDB'</span><span class="token punctuation">)</span> <span class="token comment"># 使用cursor()方法获取操作游标 </span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># SQL 删除语句 删除数据表 EMPLOYEE 中 AGE 大于 20 的所有数据</span>sql <span class="token operator">=</span> <span class="token string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 提交修改</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 发生错误时回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-事务"><a href="#2-7-事务" class="headerlink" title="2.7 事务"></a>2.7 事务</h3><ul><li><p>事务机制可以确保数据一致性。</p></li><li><p>事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p><ul><li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li><li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li><li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SQL删除记录语句</span>sql <span class="token operator">=</span> <span class="token string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token comment"># 执行SQL语句</span>   cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>   <span class="token comment"># 向数据库提交</span>   db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token comment"># 发生错误时回滚</span>   db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对于支持事务的数据库， 在Python数据库编程中，当游标建立之时，就自动开始了一个隐形的数据库事务。commit()方法提交游标的所有更新操作，rollback（）方法回滚当前游标的所有操作。每一个方法都开始了一个新的事务。</p></li></ul><h3 id="2-8-使用上下文管理器"><a href="#2-8-使用上下文管理器" class="headerlink" title="2.8 使用上下文管理器"></a>2.8 使用上下文管理器</h3><ul><li><p>使用 with （上下文管理器）操作数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 建立连接 </span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">,</span> db<span class="token operator">=</span>db<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> passwd<span class="token operator">=</span>passwd<span class="token punctuation">,</span> charset<span class="token operator">=</span>charset<span class="token punctuation">)</span>        <span class="token comment"># 创建游标，操作设置为字典类型        </span>        self<span class="token punctuation">.</span>cur <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回游标        </span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cur    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 提交数据库并执行        </span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 关闭游标        </span>        self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 关闭数据库连接        </span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> DB<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.68.129'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>passwd<span class="token operator">=</span><span class="token string">'zhumoran'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'text3'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>        db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from course'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> db<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-9-错误处理"><a href="#2-9-错误处理" class="headerlink" title="2.9 错误处理"></a>2.9 错误处理</h3><div class="table-container"><table><thead><tr><th style="text-align:left">异常</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Warning</td><td style="text-align:left">当有严重警告时触发，例如插入数据是被截断等等。必须是 StandardError 的子类。</td></tr><tr><td style="text-align:left">Error</td><td style="text-align:left">警告以外所有其他错误类。必须是 StandardError 的子类。</td></tr><tr><td style="text-align:left">InterfaceError</td><td style="text-align:left">当有数据库接口模块本身的错误（而不是数据库的错误）发生时触发。 必须是Error的子类。</td></tr><tr><td style="text-align:left">DatabaseError</td><td style="text-align:left">和数据库有关的错误发生时触发。 必须是Error的子类。</td></tr><tr><td style="text-align:left">DataError</td><td style="text-align:left">当有数据处理时的错误发生时触发，例如：除零错误，数据超范围等等。 必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">OperationalError</td><td style="text-align:left">指非用户控制的，而是操作数据库时发生的错误。例如：连接意外断开、 数据库名未找到、事务处理失败、内存分配错误等等操作数据库是发生的错误。 必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">IntegrityError</td><td style="text-align:left">完整性相关的错误，例如外键检查失败等。必须是DatabaseError子类。</td></tr><tr><td style="text-align:left">InternalError</td><td style="text-align:left">数据库的内部错误，例如游标（cursor）失效了、事务同步失败等等。 必须是DatabaseError子类。</td></tr><tr><td style="text-align:left">ProgrammingError</td><td style="text-align:left">程序错误，例如数据表（table）没找到或已存在、SQL语句语法错误、 参数数量错误等等。必须是DatabaseError的子类。</td></tr><tr><td style="text-align:left">NotSupportedError</td><td style="text-align:left">不支持错误，指使用了数据库不支持的函数或API等。例如在连接对象上 使用.rollback()函数，然而数据库并不支持事务或者事务已关闭。 必须是DatabaseError的子类。</td></tr></tbody></table></div><h2 id="3-Redis"><a href="#3-Redis" class="headerlink" title="3 Redis"></a>3 Redis</h2><ul><li>安装 Redis 客户端库：<strong><code>pip install redis</code></strong></li></ul><h3 id="3-1-创建-Redis-客户端实例"><a href="#3-1-创建-Redis-客户端实例" class="headerlink" title="3.1 创建 Redis 客户端实例"></a>3.1 创建 Redis 客户端实例</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redisr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 指定密码</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'your_password'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-键值对操作"><a href="#3-2-键值对操作" class="headerlink" title="3.2 键值对操作"></a>3.2 键值对操作</h3><ul><li><p><strong>设置键值对</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'mykey'</span><span class="token punctuation">,</span> <span class="token string">'myvalue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>获取键值对</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">value <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mykey'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 输出 b'myvalue'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>检查键是否存在</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">exists <span class="token operator">=</span> r<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'mykey'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除键</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">deleted <span class="token operator">=</span> r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'mykey'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deleted<span class="token punctuation">)</span>  <span class="token comment"># 输出 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>批量设置多个键值对</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 批量写入数据</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span>    <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span>    <span class="token string">'key3'</span><span class="token punctuation">:</span> <span class="token string">'value3'</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span>mset<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>批量获取多个键的值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">values <span class="token operator">=</span> r<span class="token punctuation">.</span>mget<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'key3'</span><span class="token punctuation">)</span><span class="token comment">#或者</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'key3'</span><span class="token punctuation">]</span>values <span class="token operator">=</span> r<span class="token punctuation">.</span>mget<span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>批量删除多个键</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'key3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-3-哈希表操作"><a href="#3-3-哈希表操作" class="headerlink" title="3.3 哈希表操作"></a>3.3 哈希表操作</h3><ul><li><p><strong>存储哈希表</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token string">'field1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token string">'field2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>获取哈表中指定字段的值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">field_value <span class="token operator">=</span> r<span class="token punctuation">.</span>hget<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token string">'field1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>field_value<span class="token punctuation">)</span>  <span class="token comment"># 输出 b'value1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除哈希表</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除整个哈希表</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>获取哈希表的所有字段和值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hash_data <span class="token operator">=</span> r<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash_data<span class="token punctuation">)</span>  <span class="token comment"># 输出 {b'field1': b'value1', b'field2': b'value2'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>批量设置哈希表字段</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'field1'</span><span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token string">'field2'</span><span class="token punctuation">:</span> <span class="token string">'value2'</span><span class="token punctuation">,</span> <span class="token string">'field3'</span><span class="token punctuation">:</span> <span class="token string">'value3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>批量获取哈希表字段的值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">values <span class="token operator">=</span> r<span class="token punctuation">.</span>hmget<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token string">'field1'</span><span class="token punctuation">,</span> <span class="token string">'field2'</span><span class="token punctuation">,</span> <span class="token string">'field3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>批量删除哈希表字段</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>hdel<span class="token punctuation">(</span><span class="token string">'myhash'</span><span class="token punctuation">,</span> <span class="token string">'field1'</span><span class="token punctuation">,</span> <span class="token string">'field2'</span><span class="token punctuation">,</span> <span class="token string">'field3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-4-列表操作"><a href="#3-4-列表操作" class="headerlink" title="3.4 列表操作"></a>3.4 列表操作</h3><ul><li><p><strong>添加元素到列表</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token comment"># 批量添加元素到列表的右侧</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">,</span> <span class="token string">'element1'</span><span class="token punctuation">,</span> <span class="token string">'element2'</span><span class="token punctuation">,</span> <span class="token string">'element3'</span><span class="token punctuation">)</span><span class="token comment"># 批量添加元素到列表的左侧</span>r<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">,</span> <span class="token string">'element0'</span><span class="token punctuation">,</span> <span class="token string">'element-1'</span><span class="token punctuation">,</span> <span class="token string">'element-2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>获取列表元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list_data <span class="token operator">=</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_data<span class="token punctuation">)</span>  <span class="token comment"># 输出 [b'value1', b'value2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>获取列表长度</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list_length <span class="token operator">=</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">'mylist'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_length<span class="token punctuation">)</span>  <span class="token comment"># 输出 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="3-5-集合操作"><a href="#3-5-集合操作" class="headerlink" title="3.5 集合操作"></a>3.5 集合操作</h3><ul><li><p><strong>添加元素到集合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span><span class="token comment"># 批量添加元素到合集</span>r<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'element1'</span><span class="token punctuation">,</span> <span class="token string">'element2'</span><span class="token punctuation">,</span> <span class="token string">'element3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>检查元素是否存在于集合中</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">is_member <span class="token operator">=</span> r<span class="token punctuation">.</span>sismember<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_member<span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>获取集合的所有元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">set_data <span class="token operator">=</span> r<span class="token punctuation">.</span>smembers<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set_data<span class="token punctuation">)</span>  <span class="token comment"># 输出 {b'value1', b'value2'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除合集元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除单个元素</span>r<span class="token punctuation">.</span>srem<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'element3'</span><span class="token punctuation">)</span><span class="token comment"># 批量删除多个元素</span>r<span class="token punctuation">.</span>srem<span class="token punctuation">(</span><span class="token string">'myset'</span><span class="token punctuation">,</span> <span class="token string">'element1'</span><span class="token punctuation">,</span> <span class="token string">'element5'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-6-有序集合操作"><a href="#3-6-有序集合操作" class="headerlink" title="3.6 有序集合操作"></a>3.6 有序集合操作</h3><ul><li><p><strong>添加元素到有序集合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'myzset'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'value1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>获取有序集合的元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">zset_data <span class="token operator">=</span> r<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'myzset'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>zset_data<span class="token punctuation">)</span>  <span class="token comment"># 输出 [b'value1', b'value2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>获取有序集合的长度</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">zset_length <span class="token operator">=</span> r<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span><span class="token string">'myzset'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>zset_length<span class="token punctuation">)</span>  <span class="token comment"># 输出 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="3-7-发布-订阅操作"><a href="#3-7-发布-订阅操作" class="headerlink" title="3.7 发布/订阅操作"></a>3.7 发布/订阅操作</h3><ul><li><p><strong>发布消息</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'mychannel'</span><span class="token punctuation">,</span> <span class="token string">'Hello, Redis!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>订阅消息</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pubsub <span class="token operator">=</span> r<span class="token punctuation">.</span>pubsub<span class="token punctuation">(</span><span class="token punctuation">)</span>pubsub<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">'mychannel'</span><span class="token punctuation">)</span><span class="token keyword">for</span> message <span class="token keyword">in</span> pubsub<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-8-事务"><a href="#3-8-事务" class="headerlink" title="3.8 事务"></a>3.8 事务</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开启事务</span>pipe <span class="token operator">=</span> r<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 执行事务操作</span>pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token comment"># 提交事务</span>result <span class="token operator">=</span> pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出 [True, True, b'value1', b'value2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-过期时间和持久化"><a href="#3-9-过期时间和持久化" class="headerlink" title="3.9 过期时间和持久化"></a>3.9 过期时间和持久化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置键的过期时间（单位为秒）</span>r<span class="token punctuation">.</span>setex<span class="token punctuation">(</span><span class="token string">'mykey'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">'myvalue'</span><span class="token punctuation">)</span><span class="token comment"># 获取键的剩余生存时间</span>ttl <span class="token operator">=</span> r<span class="token punctuation">.</span>ttl<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ttl<span class="token punctuation">)</span>  <span class="token comment"># 输出: 57，表示剩余的生存时间为 57 秒</span><span class="token comment"># 持久化数据到磁盘</span>r<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-10-分布式锁"><a href="#3-10-分布式锁" class="headerlink" title="3.10 分布式锁"></a>3.10 分布式锁</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取分布式锁</span>lock_acquired <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'mylock'</span><span class="token punctuation">,</span> <span class="token string">'locked'</span><span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> lock_acquired<span class="token punctuation">:</span>    <span class="token comment"># 执行需要加锁的操作</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lock acquired. Performing critical section.'</span><span class="token punctuation">)</span>        <span class="token comment"># 释放锁</span>    r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'mylock'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed to acquire lock. Another process holds the lock.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 Redis 的 set 方法来设置一个键值对作为分布式锁。参数nx=True表示只有当键不存在时才设置该键，即实现了原子性的加锁操作。参数ex=10设置了该键的过期时间为 10 秒，以防止锁被长时间占用。如果 lock_acquired 为 True，表示成功获取到了锁。在这种情况下，我们可以执行需要加锁的操作，然后使用 r.delete(‘mylock’) 释放锁，让其他进程有机会获取锁。如果 lock_acquired 为 False，表示获取锁失败，说明另一个进程已经持有了该锁。在这种情况下，我们可以执行相应的逻辑，比如等待一段时间后再尝试获取锁或执行备选方案。需要注意的是，在释放锁之前，确保只有获取锁的进程能够删除该键。这可以通过在设置锁时为其设置一个唯一的标识符来实现，以便在释放锁时进行验证。</p><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://blog.csdn.net/qq233325332/article/details/131326274">https://blog.csdn.net/qq233325332/article/details/131326274</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习27-多线程</title>
      <link href="/2024/07/13/python-xue-xi-27-duo-xian-cheng/"/>
      <url>/2024/07/13/python-xue-xi-27-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul><li>每个独立的线程有一个程序运行的<strong>入口、顺序执行序列和程序的出口</strong>。但是线程不能够独立执行，<strong>必须依存在应用程序中</strong>，由应用程序提供多个线程执行控制。</li><li>每个线程都有他自己的一组CPU寄存器，称为线程的<strong>上下文</strong>，该上下文反映了线程上次运行该线程的CPU寄存器的状态。</li><li><strong>指令指针和堆栈指针寄存器</strong>是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。<ul><li>线程可以被抢占（中断）。</li><li>在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） — 这就是线程的退让。</li></ul></li><li>Python中的线程会在一个单独的<strong>系统级线程</strong>中执行（比如说一个 POSIX 线程或者一个 Windows 线程），这些线程将由操作系统来全权管理。线程一旦启动，将独立执行直到目标函数返回。</li><li>Python解释器直到所有线程都终止前仍保持运行。对于需要长时间运行的线程或者需要一直运行的后台任务，你应当考虑使用后台线程(daemon=True)。</li><li>线程可以分为:<ul><li><strong>内核线程：</strong>由操作系统内核创建和撤销。</li><li><strong>用户线程：</strong>不需要内核支持而在用户程序中实现的线程。</li></ul></li><li>Python3 线程中常用的两个模块<ul><li><strong>_thread</strong></li><li><strong>threading(推荐使用)</strong></li></ul></li><li>由于全局解释锁（GIL）的原因，Python 的线程被限制到<strong>同一时刻只允许一个线程执行</strong>这样一个执行模型。所以，Python 的线程更适用于处理I/O和其他需要并发执行的阻塞操作（比如等待I/O、等待从数据库获取数据等等），而不是需要多处理器并行的计算密集型任务。</li></ul><h2 id="1-thread-模块"><a href="#1-thread-模块" class="headerlink" title="1 _thread 模块"></a>1 _thread 模块</h2><ul><li><p>函数式创建线程：调用 _thread 模块中的<strong>start_new_thread()</strong>函数来产生新线程</p></li><li><p><strong><code>_thread.start_new_thread ( function, args[, kwargs] )</code></strong></p><ul><li>function - 线程函数。</li><li>args - 传递给线程函数的参数,他必须是个<strong>tuple类型</strong>。</li><li>kwargs - 可选参数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">import</span> _thread<span class="token keyword">import</span> time<span class="token comment"># 为线程定义一个函数</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span> threadName<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>   count <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>      count <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span> threadName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 创建两个线程</span><span class="token keyword">try</span><span class="token punctuation">:</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> print_time<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> print_time<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: 无法启动线程"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-线程模块threading"><a href="#2-线程模块threading" class="headerlink" title="2 线程模块threading"></a>2 线程模块threading</h2><ul><li><p>threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法</p><ul><li><strong>threading.current_thread()</strong>: 返回当前的线程变量。</li><li><strong>threading.enumerate()</strong>: 返回一个包含正在运行的线程的列表。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li><strong>threading.active_count()</strong>: 返回正在运行的线程数量，与 len(threading.enumerate()) 有相同的结果。</li><li><strong>threading.Thread(target, args=(), kwargs={}, daemon=None)</strong><ul><li>创建<code>Thread</code>类的实例。</li><li><code>target</code>：线程将要执行的目标函数。</li><li><code>args</code>：目标函数的参数，以元组形式传递。</li><li><code>kwargs</code>：目标函数的关键字参数，以字典形式传递。</li><li><code>daemon</code>：指定线程是否为守护线程。</li></ul></li></ul></li><li><p>threading.Thread 类的方法与属性</p><ul><li><strong><code>__init__(self, group=None, target=None, name=None, args=(), kwargs={}, \*, daemon=None)</code>：</strong><ul><li>初始化<code>Thread</code>对象。</li><li><code>group</code>：线程组，暂时未使用，保留为将来的扩展。</li><li><code>target</code>：线程将要执行的目标函数。</li><li><code>name</code>：线程的名称。</li><li><code>args</code>：目标函数的参数，以==元组==形式传递。</li><li><code>kwargs</code>：目标函数的关键字参数，以==字典==形式传递。</li><li><code>daemon</code>：指定线程是否为守护线程。</li></ul></li><li><strong><code>start(self)</code>：</strong><ul><li>启动线程。将调用线程的<code>run()</code>方法。</li></ul></li><li><strong><code>run(self)</code>：</strong><ul><li>线程在此方法中定义要执行的代码。</li></ul></li><li><strong><code>join(self, timeout=None)</code>：</strong><ul><li><strong>等待线程终止</strong>。默    认情况下，<code>join()</code>会一直阻塞，直到被调用线程终止。如果指定了<code>timeout</code>参数，则最多等待<code>timeout</code>秒。</li></ul></li><li><strong><code>is_alive(self)</code>：</strong><ul><li>返回线程是否在运行。如果线程已经启动且尚未终止，则返回<code>True</code>，否则返回<code>False</code>。</li></ul></li><li><strong><code>getName(self)</code>：</strong><ul><li>返回线程的名称。</li></ul></li><li><strong><code>setName(self, name)</code>：</strong><ul><li>设置线程的名称。</li></ul></li><li><strong><code>ident</code>属性：</strong><ul><li>线程的唯一标识符。</li></ul></li><li><strong><code>daemon</code>属性：</strong><ul><li>线程的守护标志，用于指示是否是守护线程。</li></ul></li><li><strong><code>isDaemon()</code>方法：</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">print_numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># 创建线程</span>thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>print_numbers<span class="token punctuation">)</span><span class="token comment"># 启动线程</span>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待线程结束</span>thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''01234'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>threading 模块创建线程：直接从 threading.Thread 继承创建一个新的<strong>子类</strong>，并实例化后调用 <strong>start()</strong> 方法启动新线程,调用线程的 run() 方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> timeexitFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"开始线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        print_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        <span class="token keyword">if</span> exitFlag<span class="token punctuation">:</span>            threadName<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token comment"># 创建新线程</span>thread1 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>thread2 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 开启新线程</span>thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>thread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>thread1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>thread2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出主线程"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-线程同步"><a href="#3-线程同步" class="headerlink" title="3 线程同步"></a>3 线程同步</h2><ul><li><p>如果<strong>多个线程共同对某个数据修改</strong>，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p></li><li><p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次<strong>只允许一个线程操作</strong>的数据，可以将其操作放到 acquire 和 release 方法<strong>之间</strong>。</p></li><li><p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。</p></li><li><p>锁的两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"开启线程： "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment"># 获取锁，用于线程同步</span>        threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        print_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>delay<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment"># 释放锁，开启下一个线程</span>        threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span>threadLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 创建新线程</span>thread1 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>thread2 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 开启新线程</span>thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>thread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加线程到线程列表</span>threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread1<span class="token punctuation">)</span>threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token comment"># 等待所有线程完成</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出主线程"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>with语句</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">SharedCounter</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    A counter object that can be shared by multiple threads.    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> initial_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> initial_value        self<span class="token punctuation">.</span>_value_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">incr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Increment the counter with locking        '''</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>_value_lock<span class="token punctuation">:</span>             self<span class="token punctuation">.</span>_value <span class="token operator">+=</span> delta    <span class="token keyword">def</span> <span class="token function">decr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Decrement the counter with locking        '''</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>_value_lock<span class="token punctuation">:</span>             self<span class="token punctuation">.</span>_value <span class="token operator">-=</span> delta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为了避免出现死锁，使用锁机制的程序应该设定为<strong>每个线程一次只允许获取一个锁</strong>。</p></li><li><p><code>RLock</code> （可重入锁）可以被同一个线程多次获取，主要用来实现基于监测对象模式的锁定和同步。在使用这种锁的情况下，当锁被持有时，只有一个线程可以使用完整的函数或者类中的方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">SharedCounter</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    A counter object that can be shared by multiple threads.    '''</span>    _lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> initial_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> initial_value    <span class="token keyword">def</span> <span class="token function">incr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Increment the counter with locking        '''</span>        <span class="token keyword">with</span> SharedCounter<span class="token punctuation">.</span>_lock<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_value <span class="token operator">+=</span> delta    <span class="token keyword">def</span> <span class="token function">decr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Decrement the counter with locking        '''</span>        <span class="token keyword">with</span> SharedCounter<span class="token punctuation">.</span>_lock<span class="token punctuation">:</span>             self<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token operator">-</span>delta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该例子中没有对每一个实例中的可变对象加锁，而是一个<strong>被所有实例共享的类级锁</strong>。这个锁用来<strong>同步类方法</strong>，这个锁可以保证一次<strong>只有一个线程可以调用这个类方法</strong>。不过，与一个标准的锁不同的是，<strong>已经持有这个锁的方法在调用同样使用这个锁的方法时无需再次获取锁。</strong></p></li><li><p><strong>限制一段代码的并发访问量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Semaphore<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment"># At most, five threads allowed to run at once</span>_fetch_url_sema <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> _fetch_url_sema<span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-线程优先级队列"><a href="#4-线程优先级队列" class="headerlink" title="4 线程优先级队列"></a>4 线程优先级队列</h2><ul><li><p>Python 的 <code>Queue</code> 模块中提供了<strong>同步的、线程安全</strong>的队列类，包括<code>FIFO</code>（先入先出)队列Queue，<code>LIFO</code>（后入先出）队列LifoQueue，和优先级队列 <code>PriorityQueue</code>。这些队列都实现了锁原语，能够<strong>在多线程中直接使用</strong>，可以<strong>使用队列来实现线程间的同步</strong>。</p></li><li><p>Queue 模块中的常用方法</p><ul><li>Queue.qsize() 返回队列的大小</li><li>Queue.empty() 如果队列为空，返回True,反之False</li><li>Queue.full() 如果队列满了，返回True,反之False</li><li>Queue.full 与 maxsize 大小对应</li><li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li><li>Queue.get_nowait() 相当Queue.get(False)</li><li>Queue.put(item) 写入队列，timeout等待时间</li><li>Queue.put_nowait(item) 相当Queue.put(item, False)</li><li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li><li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">import</span> queue<span class="token keyword">import</span> threading<span class="token keyword">import</span> timeexitFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>q <span class="token operator">=</span> q    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"开启线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        process_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>q<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> exitFlag<span class="token punctuation">:</span>        queueLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> workQueue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            queueLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s processing %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            queueLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>threadList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token string">"Thread-3"</span><span class="token punctuation">]</span>nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">,</span> <span class="token string">"Four"</span><span class="token punctuation">,</span> <span class="token string">"Five"</span><span class="token punctuation">]</span>queueLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>workQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>threadID <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 创建新线程</span><span class="token keyword">for</span> tName <span class="token keyword">in</span> threadList<span class="token punctuation">:</span>    thread <span class="token operator">=</span> myThread<span class="token punctuation">(</span>threadID<span class="token punctuation">,</span> tName<span class="token punctuation">,</span> workQueue<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    threadID <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 填充队列</span>queueLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> word <span class="token keyword">in</span> nameList<span class="token punctuation">:</span>    workQueue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>word<span class="token punctuation">)</span>queueLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待队列清空</span><span class="token keyword">while</span> <span class="token keyword">not</span> workQueue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 通知线程是时候退出</span>exitFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 等待所有线程完成</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出主线程"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''开启线程：Thread-1开启线程：Thread-2开启线程：Thread-3Thread-3 processing OneThread-1 processing TwoThread-2 processing ThreeThread-3 processing FourThread-1 processing Five退出线程：Thread-3退出线程：Thread-2退出线程：Thread-1退出主线程'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-信号量"><a href="#5-信号量" class="headerlink" title="5 信号量"></a>5 信号量</h2><ul><li><p>程序中的其他线程需要通过判断某个线程的状态来确定下一步操作</p></li><li><p><code>threading</code> 库中的 <code>Event</code> 对象包含一个可由线程设置的信号标志，它允许线程等待某些事件的发生。在初始情况下，event 对象中的信号标志被设置为<strong>假</strong>。如果有线程等待一个 event 对象，而这个 event 对象的标志为假，那么这个线程将会被一直<strong>阻塞</strong>直至该标志为真。一个线程如果将一个 event 对象的信号标志设置为真，它将<strong>唤醒所有等待这个 event 对象的线程</strong>。如果一个线程等待一个已经被设置为真的 event 对象，那么它将忽略这个事件，继续执行。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token punctuation">,</span> Event<span class="token keyword">import</span> time<span class="token comment"># Code to execute in an independent thread</span><span class="token keyword">def</span> <span class="token function">countdown</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> started_evt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'countdown starting'</span><span class="token punctuation">)</span>    started_evt<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'T-minus'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        n <span class="token operator">-=</span> <span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># Create the event object that will be used to signal startup</span>started_evt <span class="token operator">=</span> Event<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Launch the thread and pass the startup event</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Launching countdown'</span><span class="token punctuation">)</span>t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>countdown<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>started_evt<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Wait for the thread to start</span>started_evt<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'countdown is running'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>event 对象最好单次使用</p></li><li><p>使用 <code>Condition</code> 对象处理一个线程需要不停地重复使用 event 对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token triple-quoted-string string">'''周期定时器，每当定时器超时的时候，其他线程都可以监测到'''</span><span class="token keyword">class</span> <span class="token class-name">PeriodicTimer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_interval <span class="token operator">=</span> interval        self<span class="token punctuation">.</span>_flag <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>_cv <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>run<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Run the timer and notify waiting threads after each interval        '''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_interval<span class="token punctuation">)</span>            <span class="token keyword">with</span> self<span class="token punctuation">.</span>_cv<span class="token punctuation">:</span>                 self<span class="token punctuation">.</span>_flag <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span>                 self<span class="token punctuation">.</span>_cv<span class="token punctuation">.</span>notify_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wait_for_tick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        Wait for the next tick of the timer        '''</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>_cv<span class="token punctuation">:</span>            last_flag <span class="token operator">=</span> self<span class="token punctuation">.</span>_flag            <span class="token keyword">while</span> last_flag <span class="token operator">==</span> self<span class="token punctuation">.</span>_flag<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_cv<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Example use of the timer</span>ptimer <span class="token operator">=</span> PeriodicTimer<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>ptimer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Two threads that synchronize on the timer</span><span class="token keyword">def</span> <span class="token function">countdown</span><span class="token punctuation">(</span>nticks<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> nticks <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        ptimer<span class="token punctuation">.</span>wait_for_tick<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'T-minus'</span><span class="token punctuation">,</span> nticks<span class="token punctuation">)</span>        nticks <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">countup</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> last<span class="token punctuation">:</span>        ptimer<span class="token punctuation">.</span>wait_for_tick<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Counting'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        n <span class="token operator">+=</span> <span class="token number">1</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>countdown<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>countup<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>唤醒单个线程：信号量或者 <code>Condition</code> 对象</p></li><li><p>使用信号量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Worker thread</span><span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> sema<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Wait to be signaled</span>    sema<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Do some work</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Working'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># Create some threads</span>sema <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>nworkers <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nworkers<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> sema<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sema<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>Working <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sema<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>Working <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>到大量的线程间同步问题合适的解决方式是使用<strong>队列</strong>来进行线程间通信或者每个把线程当作一个<strong>Actor</strong>，利用Actor模型来控制并发。</p></li></ul><h2 id="6-防止死锁的加锁机制"><a href="#6-防止死锁的加锁机制" class="headerlink" title="6 防止死锁的加锁机制"></a>6 防止死锁的加锁机制</h2><ul><li><p>解决死锁:为程序中的<strong>每一个锁分配一个唯一的id</strong>，然后只允许按照<strong>升序</strong>规则来使用多个锁，这个规则使用<strong>上下文管理器</strong>是非常容易实现的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager<span class="token comment"># Thread-local state to stored information on locks already acquired</span>_local <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@contextmanager</span><span class="token keyword">def</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">*</span>locks<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Sort locks by object identifier</span>    locks <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>locks<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Make sure lock order of previously acquired locks is not violated</span>    acquired <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>_local<span class="token punctuation">,</span><span class="token string">'acquired'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> acquired <span class="token keyword">and</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token keyword">for</span> lock <span class="token keyword">in</span> acquired<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token builtin">id</span><span class="token punctuation">(</span>locks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Lock Order Violation'</span><span class="token punctuation">)</span>    <span class="token comment"># Acquire all of the locks</span>    acquired<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>locks<span class="token punctuation">)</span>    _local<span class="token punctuation">.</span>acquired <span class="token operator">=</span> acquired    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> lock <span class="token keyword">in</span> locks<span class="token punctuation">:</span>            lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment"># Release locks in reverse order of acquisition</span>        <span class="token keyword">for</span> lock <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>locks<span class="token punctuation">)</span><span class="token punctuation">:</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> acquired<span class="token punctuation">[</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>locks<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">import</span> threadingx_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>y_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> acquire<span class="token punctuation">(</span>x_lock<span class="token punctuation">,</span> y_lock<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread-1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> acquire<span class="token punctuation">(</span>y_lock<span class="token punctuation">,</span> x_lock<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread-2'</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_1<span class="token punctuation">)</span>t1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_2<span class="token punctuation">)</span>t2<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-线程状态信息"><a href="#7-线程状态信息" class="headerlink" title="7 线程状态信息"></a>7 线程状态信息</h2><ul><li><p>保存当前运行线程的状态：使用 <code>thread.local()</code> 创建一个本地线程存储对象。 对这个对象的属性的保存和读取操作都只会对执行线程可见，而其他线程并不可见。</p></li><li><p>每个 <code>threading.local()</code> 实例为每个线程维护着一个单独的实例字典。 所有普通实例操作比如获取、修改和删除值仅仅操作这个字典。 每个线程使用一个独立的字典就可以保证数据的隔离</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> socket<span class="token punctuation">,</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">LazyConnection</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> address<span class="token punctuation">,</span> family<span class="token operator">=</span>AF_INET<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>address <span class="token operator">=</span> address        self<span class="token punctuation">.</span>family <span class="token operator">=</span> AF_INET        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> SOCK_STREAM        self<span class="token punctuation">.</span>local <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>local<span class="token punctuation">,</span> <span class="token string">'sock'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already connected'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>local<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">(</span>self<span class="token punctuation">.</span>family<span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>local<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>local<span class="token punctuation">.</span>sock    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_ty<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>local<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>local<span class="token punctuation">.</span>sock        <span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> conn <span class="token keyword">as</span> s<span class="token punctuation">:</span>        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'GET /index.html HTTP/1.0\r\n'</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'Host: www.python.org\r\n'</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\r\n'</span><span class="token punctuation">)</span>        resp <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>partial<span class="token punctuation">(</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got {} bytes'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> LazyConnection<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'www.python.org'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-线程池"><a href="#8-线程池" class="headerlink" title="8 线程池"></a>8 线程池</h2><ul><li><p><code>concurrent.futures</code> 模块</p><ul><li><code>ThreadPoolExecutor</code> (线程池)</li><li><code>ProcessPoolExecutor</code> (进程池)</li></ul></li><li><p><code>concurrent.futures</code> 模块通过 submit 返回的是一个 future 对象,通过它可以获取某一个线程执行的状态或者某一个任务执行的状态及返回值</p><ul><li>主线程可以获取某一个线程（或者任务的）的状态，以及返回值</li><li>当一个线程完成的时候，主线程能够立即知道</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completed<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">return</span> secondlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment"># 创建一个最大容纳数量为2的线程池</span>pool<span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 通过submit提交执行的函数到线程池中</span>all_task<span class="token operator">=</span><span class="token punctuation">[</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>action<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lists<span class="token punctuation">]</span><span class="token comment"># 通过result来获取返回值</span>result<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> all_task<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"result:</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----complete-----"</span><span class="token punctuation">)</span><span class="token comment"># 线程池关闭</span>pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''4523result:[4, 5, 2, 3]----complete-----'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过 <code>with</code> 关键字来管理线程池</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completed<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">return</span> secondlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>all_task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token keyword">for</span> second <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        all_task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>action<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span>        result<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> all_task<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"result:</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>等到所有子线程完成：<strong><code>wait(fs, timeout=None, return_when=ALL_COMPLETED)</code></strong></p><ul><li>fs: 表示需要执行的序列<br>timeout: 等待的最大时间，如果超过这个时间即使线程未执行完成也将返回<br>return_when：表示wait返回结果的条件，默认为 <code>ALL_COMPLETED</code> 全部执行完成再返回，可选 <code>FIRST_COMPLETED</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completedlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>all_task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token keyword">for</span> second <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        all_task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>action<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 主线程等待所有子线程完成</span>    wait<span class="token punctuation">(</span>all_task<span class="token punctuation">,</span> return_when<span class="token operator">=</span>ALL_COMPLETED<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----complete-----"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>等待第一个子线程返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completed<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">return</span> secondlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>all_task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token keyword">for</span> second <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        all_task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>action<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 主线程等待第一个子线程完成</span>    wait<span class="token punctuation">(</span>all_task<span class="token punctuation">,</span> return_when<span class="token operator">=</span>FIRST_COMPLETED<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----complete-----"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''452----complete-----3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>result方法是阻塞的，所以流程会在result这里阻塞直到所有子线程返回，相当于 <code>ALL_COMPLETED</code> 方法</p></li><li><p>每返回一个子线程就立刻处理：<code>as_completed</code>获取每一个线程的返回结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completed<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">return</span> secondlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>all_task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token keyword">for</span> second <span class="token keyword">in</span> lists<span class="token punctuation">:</span>        all_task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>action<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> future <span class="token keyword">in</span> as_completed<span class="token punctuation">(</span>all_task<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> 返回"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----complete-----"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''4524 返回35 返回2 返回3 返回----complete-----'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>as_completed() 方法是一个生成器，在没有任务完成的时候，会一直阻塞。当有某个任务完成的时候，会 yield 这个任务，就能执行 for 循环下面的语句，然后继续阻塞住，循环到所有的任务结束。同时，先完成的任务会先返回给主线程。</p></li><li><p>map 方法是对序列中每一个元素都执行 action 方法</p><ul><li><p>不需要将任务submit到线程池</p></li><li><p>返回结果的顺序和元素的顺序相同，即使子线程先返回也不会获取结果</p></li><li><p><strong>`map(fn, *iterables, timeout=</strong>None<strong>)`</strong></p><ul><li>fn： 第一个参数 fn 是需要线程执行的函数；</li><li>iterables：第二个参数接受一个可迭代对象；</li><li>timeout： 第三个参数 timeout 跟 wait() 的 timeout 一样，但由于 map 是返回线程执行的结果，如果 timeout小于线程执行时间会抛异常 TimeoutError。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>ALL_COMPLETED<span class="token punctuation">,</span>FIRST_COMPLETED<span class="token punctuation">,</span> as_completed<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>second<span class="token punctuation">)</span>    <span class="token keyword">return</span> secondlists<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string"> 返回"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''51235 返回1 返回2 返回3 返回'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="9-进程池"><a href="#9-进程池" class="headerlink" title="9 进程池"></a>9 进程池</h2><ul><li><p><code>concurrent.futures</code> 库中的 <code>ProcessPoolExecutor</code> 类， 可被用来在一个单独的Python解释器中执行计算密集型函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    do work <span class="token keyword">in</span> parallel using pool    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个 <code>ProcessPoolExecutor</code> 创建N个独立的Python解释器， N是系统上面可用CPU的个数。可以通过提供可选参数给 <code>ProcessPoolExecutor(N)</code> 来修改 处理器数量。这个处理池会一直运行到with块中最后一个语句执行完成， 然后处理池被关闭。程序会一直等待直到所有提交的工作被处理完成。</p></li><li><p>被提交到池中的工作必须被定义为一个函数。有两种方法去提交。</p><ul><li><p>想让一个列表推导或一个 <code>map()</code> 操作并行执行的话，使用 <code>pool.map()</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># A function that performs a lot of work</span><span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> result<span class="token comment"># Nonparallel code</span>results <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token comment"># Parallel implementation</span><span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    results <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>pool.submit()</code> 来手动的提交单个任务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Some function</span><span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">when_done</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got:'</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># Example of submitting work to the pool</span>    future_result <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>work<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token comment"># Obtaining the result (blocks until done)</span>    r <span class="token operator">=</span> future_result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 会阻塞进程直到结果被返回来</span>    future_result<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>when_done<span class="token punctuation">)</span> <span class="token comment"># 不阻塞则使用回调函数</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="10全局锁"><a href="#10全局锁" class="headerlink" title="10全局锁"></a>10全局锁</h2><ul><li><p>python解释器被一个全局解释器锁保护着，它确保任何时候都只有一个Python线程执行。 GIL最大的问题就是Python的多线程程序并<strong>不能利用多核CPU的优势</strong>（比如一个使用了多个线程的计算密集型程序只会在一个单CPU上面运行）。</p></li><li><p>解决GIL的缺点：<strong>multiprocessing、C扩展编程</strong></p></li><li><p>使用 <code>multiprocessing</code> 模块来创建进程池</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Processing pool (see below for initiazation)</span>pool <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># Performs a large calculation (CPU bound)</span><span class="token keyword">def</span> <span class="token function">some_work</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> result<span class="token comment"># A thread that calls the above function</span><span class="token keyword">def</span> <span class="token function">some_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        r <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>some_work<span class="token punctuation">,</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># Initiaze the pool</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> multiprocessing    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 当一个线程想要执行CPU密集型工作时，会将任务发给进程池。 然后进程池会在另外一个进程中启动一个单独的Python解释器来工作。 当线程等待结果的时候会释放GIL。能很好的利用多CPU的优势。</p></li><li><p>使用C扩展编程技术：将计算密集型任务转移给C，跟Python独立，在工作的时候在C代码中释放GIL。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在C代码中插入特殊宏</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Python.h"</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>PyObject <span class="token operator">*</span><span class="token function">pyfunc</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>self<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   Py_BEGIN_ALLOW_THREADS   <span class="token comment">// Threaded C code</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   Py_END_ALLOW_THREADS   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://www.cnblogs.com/goldsunshine/p/16878089.html">https://www.cnblogs.com/goldsunshine/p/16878089.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习26-正则表达式</title>
      <link href="/2024/07/12/python-xue-xi-26-zheng-ze-biao-da-shi/"/>
      <url>/2024/07/12/python-xue-xi-26-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>正则表达式是一个特殊的字符序列，它能帮助检查一个字符串是否与某种模式匹配。</li><li>在 Python 中，使用 <strong><code>re</code></strong> 模块来处理正则表达式。<code>re</code> 模块提供了一组函数，允许在字符串中进行模式匹配、搜索和替换操作。</li></ul><h2 id="1-正则匹配"><a href="#1-正则匹配" class="headerlink" title="1 正则匹配"></a>1 正则匹配</h2><blockquote><p><strong>re.match</strong></p></blockquote><ul><li><p><strong><code>re.match</code> 尝试从字符串的==起始位置==匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 None。</strong></p></li><li><p><strong><code>re.match(pattern, string, flags=0)</code></strong></p><p>| 参数    | 描述                                                         |<br>| :——— | :—————————————————————————————- |<br>| pattern | 匹配的正则表达式                                             |<br>| string  | 要匹配的字符串。                                             |<br>| flags   | 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="#26.4 正则表达式修饰符 - 可选标志">正则表达式修饰符 - 可选标志</a> |</p></li><li><p>匹配成功 <strong>re.match</strong> 方法返回一个匹配的对象，否则返回 <strong>None</strong>。</p></li><li><p>使用 <strong>group(num)</strong> 或 <strong>groups()</strong> 匹配对象函数来获取匹配表达式。</p><p>| 匹配对象方法 | 描述                                                         |<br>| :—————- | :—————————————————————————————- |<br>| group(num=0) | 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。 |<br>| groups()     | 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。     |</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span> <span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在起始位置匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 不在起始位置匹配</span><span class="token comment"># (0, 3)</span><span class="token comment"># None</span> line <span class="token operator">=</span> <span class="token string">"Cats are smarter than dogs"</span><span class="token comment"># .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符</span><span class="token comment"># (.*?) 表示"非贪婪"模式，只保存第一个匹配到的子串</span>matchObj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span> <span class="token string">r'(.*) are (.*?) .*'</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">if</span> matchObj<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group() : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(1) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(2) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"No match!!"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''matchObj.group() :  Cats are smarter than dogsmatchObj.group(1) :  CatsmatchObj.group(2) :  smarter'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>re.search</strong> </p></blockquote><ul><li><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p></li><li><p><strong><code>re.search(pattern, string, flags=0)</code></strong></p></li><li><p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p></li><li><p>使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">import</span> re line <span class="token operator">=</span> <span class="token string">"Cats are smarter than dogs"</span> searchObj <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span> <span class="token string">r'(.*) are (.*?) .*'</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">if</span> searchObj<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"searchObj.group() : "</span><span class="token punctuation">,</span> searchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"searchObj.group(1) : "</span><span class="token punctuation">,</span> searchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"searchObj.group(2) : "</span><span class="token punctuation">,</span> searchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Nothing found!!"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''searchObj.group() :  Cats are smarter than dogssearchObj.group(1) :  CatssearchObj.group(2) :  smarter'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>re.match 与 re.search的区别</strong></p></blockquote><ul><li><strong>re.match</strong> 只匹配字符串的==开始==，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None，而 <strong>re.search</strong> 匹配==整个==字符串，直到找到一个匹配。</li></ul><h2 id="2-检索和替换"><a href="#2-检索和替换" class="headerlink" title="2 检索和替换"></a>2 检索和替换</h2><ul><li><p><code>re.sub</code>用于替换字符串中的匹配项。</p></li><li><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p><ul><li>pattern : 正则中的模式字符串。必选</li><li>repl : 替换的字符串，也可为一个函数。必选</li><li>string : 要被查找替换的原始字符串。必选</li><li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。可选</li><li>flags : 编译时用的匹配模式，数字形式。可选</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">import</span> re phone <span class="token operator">=</span> <span class="token string">"2004-959-559 # 这是一个电话号码"</span> <span class="token comment"># 删除注释</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'#.*$'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"电话号码 : "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment"># 移除非数字的内容</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\D'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"电话号码 : "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token comment"># 电话号码 :  2004-959-559 </span><span class="token comment"># 电话号码 :  2004959559</span><span class="token comment"># repl 参数是一个函数</span><span class="token comment"># 将匹配的数字乘以 2</span><span class="token keyword">def</span> <span class="token function">double</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">'A23G4HFD567'</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(?P&lt;value&gt;\d+)'</span><span class="token punctuation">,</span> double<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#  A46G8HFD1134</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>re.sub</code>改变日期的格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'2017-11-27'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(\d{4})-(\d{2})-(\d{2})'</span><span class="token punctuation">,</span><span class="token string">r'\2/\3/\1'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">27</span><span class="token operator">/</span><span class="token number">2017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用 () 来划定原字符串的组，{} 中表示数字的个数，r 即后面的字符串为原始字符串，防止计算机将 \ 理解为转义字符，2，3，1 为输入的字符串三段的序号。</strong></p></li><li><p><code>compile</code> 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p></li><li><p><strong><code>re.compile(pattern[, flags])</code></strong></p><ul><li><p>pattern : 一个字符串形式的正则表达式</p></li><li><p>flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</p><ul><li><strong>re.IGNORECASE</strong> 或 <strong>re.I</strong>- 使匹配对大小写不敏感</li><li>re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</li><li>re.MULTILINE 或 re.M - 多行模式，改变 ^ 和 $ 的行为，使它们匹配字符串的每一行的开头和结尾。</li><li>re.DOTALL 或 re.S - 使 <strong><code>.</code></strong> 匹配包括换行符在内的任意字符。</li><li>re.ASCII - 使 \w, \W, \b, \B, \d, \D, \s, \S 仅匹配 ASCII 字符。</li><li>re.VERBOSE 或 re.X - 忽略空格和注释，可以更清晰地组织复杂的正则表达式。</li></ul><p>这些标志可以单独使用，也可以通过按位或（<code>|</code>）组合使用。例如，re.IGNORECASE | re.MULTILINE 表示同时启用忽略大小写和多行模式。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> re<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">)</span>                    <span class="token comment"># 用于匹配至少一个数字</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'one12twothree34four'</span><span class="token punctuation">)</span>        <span class="token comment"># 查找头部，没有匹配</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span> m <span class="token punctuation">)</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'one12twothree34four'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 从'e'的位置开始匹配，没有匹配</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span> m <span class="token punctuation">)</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">'one12twothree34four'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 从'1'的位置开始匹配，正好匹配</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span> m <span class="token punctuation">)</span>                                        <span class="token comment"># 返回一个 Match 对象</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span> at <span class="token number">0x10a42aac0</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 可省略 0</span><span class="token string">'12'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 可省略 0</span><span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 可省略 0</span><span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 可省略 0</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当匹配成功时返回一个 Match 对象</p><ul><li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li><li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li><li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li><li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li></ul></li><li><p><strong><code>findall</code></strong>在字符串中找到正则表达式所匹配的<strong>所有</strong>子串，并返回一个列表，如果有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。</p></li><li><p><strong><code>re.findall(pattern, string, flags=0)</code></strong>或<strong><code>pattern.findall(string[, pos[, endpos]])</code></strong></p><ul><li><strong>pattern</strong> 匹配模式。</li><li><strong>string</strong> 待匹配的字符串。</li><li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li><li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re result1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span><span class="token string">'runoob 123 google 456'</span><span class="token punctuation">)</span> pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">)</span>   <span class="token comment"># 查找数字</span>result2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'runoob 123 google 456'</span><span class="token punctuation">)</span>result3 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'run88oob123google456'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment"># ['123', '456']</span><span class="token comment"># ['123', '456']</span><span class="token comment"># ['88', '12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多个匹配模式，返回元组列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reresult <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(\w+)=(\d+)'</span><span class="token punctuation">,</span> <span class="token string">'set width=20 and height=10'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># [('width', '20'), ('height', '10')]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>re.finditer</strong>在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p></li><li><p><strong><code>re.finditer(pattern, string, flags=0)</code></strong></p><p>| 参数    | 描述                                                         |<br>| :——— | :—————————————————————————————- |<br>| pattern | 匹配的正则表达式                                             |<br>| string  | 要匹配的字符串。                                             |<br>| flags   | 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="##4 正则表达式修饰符 - 可选标志">正则表达式修饰符 - 可选标志</a> |</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re it <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span><span class="token string">"12a32bc43jf3"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> it<span class="token punctuation">:</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token triple-quoted-string string">'''12 32 43 3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>re.split</strong>按照能够匹配的子串将字符串分割后返回列表</p></li><li><p><strong><code>re.split(pattern, string[, maxsplit=0, flags=0])</code></strong></p><p>| 参数     | 描述                                                         |<br>| :———- | :—————————————————————————————- |<br>| pattern  | 匹配的正则表达式                                             |<br>| string   | 要匹配的字符串。                                             |<br>| maxsplit | 分割次数，maxsplit=1 分割一次，默认为 0，不限制次数。        |<br>| flags    | 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="##4 正则表达式修饰符 - 可选标志">正则表达式修饰符 - 可选标志</a> |</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> re<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\W+'</span><span class="token punctuation">,</span> <span class="token string">'runoob, runoob, runoob.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'(\W+)'</span><span class="token punctuation">,</span> <span class="token string">' runoob, runoob, runoob.'</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">', '</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">', '</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\W+'</span><span class="token punctuation">,</span> <span class="token string">' runoob, runoob, runoob.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'runoob, runoob, runoob.'</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'a*'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span>   <span class="token comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span><span class="token punctuation">[</span><span class="token string">'hello world'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-正则表达式对象"><a href="#3-正则表达式对象" class="headerlink" title="3 正则表达式对象"></a>3 正则表达式对象</h2><ul><li><strong>re.RegexObject</strong>:re.compile() 返回 RegexObject 对象。</li><li><strong>re.MatchObject</strong>:group() 返回被 RE 匹配的字符串。<ul><li><strong>start()</strong> 返回匹配开始的位置</li><li><strong>end()</strong> 返回匹配结束的位置</li><li><strong>span()</strong> 返回一个元组包含匹配 (开始,结束) 的位置</li></ul></li></ul><h2 id="4-正则表达式修饰符-可选标志"><a href="#4-正则表达式修饰符-可选标志" class="headerlink" title="4 正则表达式修饰符 - 可选标志"></a>4 正则表达式修饰符 - 可选标志</h2><ul><li><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。</p></li><li><p>以下标志可以单独使用，也可以通过按位或（|）组合使用。</p><p>| 修饰符                | 描述                                                         | 实例                                                         |<br>| :—————————— | :—————————————————————————————- | :—————————————————————————————- |<br>| re.IGNORECASE 或 re.I | 使匹配对大小写不敏感                                         | import re<br>pattern = re.compile(r’apple’, flags=re.IGNORECASE)<br>result = pattern.match(‘Apple’)<br>print(result.group())  # 输出: ‘Apple’ |<br>| re.MULTILINE 或 re.M  | 多行匹配，影响 <strong>^</strong> 和 <strong>$</strong>，使它们匹配字符串的每一行的开头和结尾。 | import re <br>pattern = re.compile(r’^\d+’, flags=re.MULTILINE) text = ‘123\n456\n789’ <br>result = pattern.findall(text) <br>print(result)  # 输出: [‘123’, ‘456’, ‘789’] |<br>| re.DOTALL 或 re.S：   | 使 <strong>.</strong> 匹配包括换行符在内的任意字符。                      | import re <br>pattern = re.compile(r’a.b’, flags=re.DOTALL) <br>result = pattern.match(‘a\nb’) <br>print(result.group())  # 输出: ‘a\nb’ |<br>| re.ASCII              | 使 \w, \W, \b, \B, \d, \D, \s, \S 仅匹配 ASCII 字符。        | import re <br>pattern = re.compile(r’\w+’, flags=re.ASCII) <br>result = pattern.match(‘Hello123’) <br>print(result.group())  # 输出: ‘Hello123’ |<br>| re.VERBOSE 或 re.X    | 忽略空格和注释，可以更清晰地组织复杂的正则表达式。           | import re <br>pattern = re.compile(r’’’    \d+  # 匹配数字    [a-z]+  # 匹配小写字母 ‘’’, flags=re.VERBOSE) <br>result = pattern.match(‘123abc’) <br>print(result.group())  # 输出: ‘123abc’ |</p></li></ul><h2 id="5-正则表达式模式"><a href="#5-正则表达式模式" class="headerlink" title="5 正则表达式模式"></a>5 正则表达式模式</h2><ol><li><p>模式字符串使用特殊的语法来表示一个正则表达式。</p></li><li><p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p></li><li><p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p></li><li><p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p></li><li><p>反斜杠本身需要使用反斜杠转义。</p></li><li><p>由于正则表达式通常都包含反斜杠，所以最好使用原始字符串来表示它们。模式元素(如 r’\t’，等价于 \\t )匹配相应的特殊字符。</p><p>| 模式         | 描述                                                         |<br>| :—————- | :—————————————————————————————- |<br>| ^            | 匹配字符串的<strong>开头</strong>                                         |<br>| $            | 匹配字符串的<strong>末尾</strong>。                                       |<br>| .            | 匹配<strong>任意字符</strong>，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 |<br>| […]        | 用来匹配所包含的<strong>任意一个字符</strong>，例如 [amk] 匹配 ‘a’，’m’或’k’ |<br>| <sup><a href="#fn_..." id="reffn_...">...</a></sup>       | <strong>不在</strong>[]中的字符：[\^abc] 匹配除了a,b,c之外的字符。        |<br>| re<em>          | 匹配<strong>0个或多个</strong>的表达式。                                  |<br>| re+          | 匹配<strong>1个或多个</strong>的表达式。                                  |<br>| re?          | 匹配0个或1个由前面的正则表达式定义的片段，<strong>非贪婪</strong>方式     |<br>| re{ n}       | 匹配<strong>n个前面表达式</strong>。例如，”o{2}”不能匹配”Bob”中的”o”，但是能匹配”food”中的两个o。 |<br>| re{ n,}      | <strong>精确匹配n个前面表达式</strong>。例如，”o{2,}”不能匹配”Bob”中的”o”，但能匹配”foooood”中的所有o。”o{1,}”等价于”o+”。”o{0,}”则等价于”o</em>“。 |<br>| re{ n, m}    | 匹配 n 到 m 次由前面的正则表达式定义的片段，<strong>贪婪方式</strong>     |<br>| a| b        | 匹配a或b                                                     |<br>| (re)         | <strong>匹配括号内的表达式，也表示一个组</strong>                         |<br>| (?<name>exp) | 匹配 exp表达式,并捕获文本到名称为 name 的组里                |<br>| (?imx)       | 正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。 |<br>| (?-imx)      | 正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。     |<br>| (?: re)      | 类似 (…), 但是不表示一个组                                 |<br>| (?imx: re)   | 在括号中使用i, m, 或 x 可选标志                              |<br>| (?-imx: re)  | 在括号中不使用i, m, 或 x 可选标志                            |<br>| (?#…)      | 注释.                                                        |<br>| (?= re)      | 前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。 |<br>| (?! re)      | 前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。 |<br>| (?&gt; re)      | 匹配的独立模式，省去回溯。                                   |<br>| \w           | 匹配数字字母下划线                                           |<br>| \W           | 匹配非数字字母下划线                                         |<br>| \s           | 匹配任意空白字符，等价于 [\t\n\r\f]。                        |<br>| \S           | 匹配任意非空字符                                             |<br>| \d           | 匹配任意数字，等价于 [0-9]。                                 |<br>| \D           | 匹配任意非数字                                               |<br>| \A           | 匹配字符串开始                                               |<br>| \Z           | 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。 |<br>| \z           | 匹配字符串结束                                               |<br>| \G           | 匹配最后匹配完成的位置。                                     |<br>| \b           | 匹配一个单词边界，也就是指<strong>单词和空格间的位置</strong>包括单词和特殊字符边界，比如 <strong>$，#…</strong> 等。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 |<br>| \B           | 匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 |<br>| \n, \t, 等。 | 匹配一个换行符。匹配一个制表符, 等                           |<br>| \1…\9      | 匹配<strong>第n个分组</strong>的内容。                                    |<br>| \10          | 匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。 |</name></p><p>| 字符匹配实例 | 描述           |<br>| :—————- | :——————- |<br>| python       | 匹配 “python”. |</p><p>| 字符类实例    | 描述                                                         |<br>| :—————— | :—————————————————————————————- |<br>| [Pp]ython     | 匹配 “Python” 或 “python”                                    |<br>| rub[ye]       | 匹配 “ruby” 或 “rube”                                        |<br>| [aeiou]       | 匹配中括号内的任意一个字母                                   |<br>| [0-9]         | 匹配任何数字。类似于 [0123456789]                            |<br>| [a-z]         | 匹配任何小写字母                                             |<br>| [A-Z]         | 匹配任何大写字母                                             |<br>| [a-zA-Z0-9]   | 匹配任何字母及数字                                           |<br>| <sup><a href="#fn_aeiou" id="reffn_aeiou">aeiou</a></sup>      | 除了aeiou字母以外的所有字符                                  |<br>| <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup>        | 匹配除了数字外的字符                                         |<br>| (?P<name>exp) | import re  <br>pattern = re.compile(r’(?P<here>[a-z]+) ([a-z]+)’, re.I) <br>m = pattern.match(‘Hello World word helo’) <br>print (m.group(‘here’)) # 输出：Hello |</here></name></p><p> | 特殊字符类实例 | 描述                                                         |<br> | :——————- | :—————————————————————————————- |<br> | .              | 匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。 |<br> | \d             | 匹配一个数字字符。等价于 [0-9]。                             |<br> | \D             | 匹配一个非数字字符。等价于 [\^0-9]。                         |<br> | \s             | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 |<br> | \S             | 匹配任何非空白字符。等价于 [\^ \f\n\r\t\v]。                 |<br> | \w             | 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。         |<br> | \W             | 匹配任何非单词字符。等价于 ‘[\^A-Za-z0-9_]’。                |</p></li></ol><h2 id="6-常用实例"><a href="#6-常用实例" class="headerlink" title="6 常用实例"></a>6 常用实例</h2><ul><li><p><strong>匹配 IP 地址</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reip <span class="token operator">=</span><span class="token string">'192.168.1.1'</span>trueIp <span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}(25[0-5]|2[0-4]\d|[01]?\d?\d)'</span><span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>trueIp<span class="token punctuation">)</span><span class="token comment"># 192.168.1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>日期转换</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'2017-11-27'</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(\d{4})-(\d{2})-(\d{2})'</span><span class="token punctuation">,</span><span class="token string">r'\2/\3/\1'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 11/27/2017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>找到以小写字母开头的单词</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res<span class="token operator">=</span><span class="token string">"i Am a gOod boy  baby!!"</span>result<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'\b[a-z][a-zA-Z]*\b'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># ['i', 'a', 'gOod', 'boy', 'baby']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>匹配标点符号、换行</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">"you're asking me out.that's so cute.what's your name again?"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"([.!?])"</span><span class="token punctuation">,</span> <span class="token string">r"\1\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># you're asking me out.</span><span class="token comment"># that's so cute.</span><span class="token comment"># what's your name again?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除重复文本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rex<span class="token operator">=</span><span class="token string">'this is is ok ok'</span>y<span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'(\w+)\s\1'</span><span class="token punctuation">,</span><span class="token string">r'\1'</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment"># this is ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>检查一个字符串是否包含数字</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re <span class="token keyword">def</span> <span class="token function">contains_digit</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span>char<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">"Hello123"</span><span class="token keyword">print</span><span class="token punctuation">(</span>contains_digit<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>验证电子邮件地址</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re <span class="token keyword">def</span> <span class="token function">validate_email</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span> email <span class="token operator">=</span> <span class="token string">"test@example.com"</span><span class="token keyword">print</span><span class="token punctuation">(</span>validate_email<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: &lt;re.Match object; span=(0, 15), match='test@example.com'&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>提取URL</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re <span class="token keyword">def</span> <span class="token function">extract_urls</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span> text <span class="token operator">=</span> <span class="token string">"https://www.example.com and http://www.example.org"</span><span class="token keyword">print</span><span class="token punctuation">(</span>extract_urls<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: ['https://www.example.com', 'http://www.example.org']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>替换字符串中的电话号码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re <span class="token keyword">def</span> <span class="token function">replace_phone_number</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\d{3}-\d{2}-\d{4}'</span><span class="token punctuation">,</span> <span class="token string">'******'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">"My phone number is 123-45-6789."</span><span class="token keyword">print</span><span class="token punctuation">(</span>replace_phone_number<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: My phone number is ******.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分割标题大小写的字符串</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re <span class="token keyword">def</span> <span class="token function">split_capitalized_words</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'(?&lt;!^)(?=[A-Z])'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">"HelloWorldXMLHTTPRequest"</span><span class="token keyword">print</span><span class="token punctuation">(</span>split_capitalized_words<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: ['Hello', 'World', 'XML', 'HTTP', 'Request']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习25-错误与异常</title>
      <link href="/2024/07/12/python-xue-xi-25-cuo-wu-yu-yi-chang/"/>
      <url>/2024/07/12/python-xue-xi-25-cuo-wu-yu-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h1><ul><li><p>Python <code>assert</code>（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171111412.webp" alt="img"></p></li><li><p>Python 的语法错误或者称之为解析错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?    <span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span>                   <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行期检测到的错误被称为异常。</p></li><li><p>大多数的异常都不会被程序处理，都以错误信息的形式展现。异常以不同的类型出现，这些类型都作为信息的一部分打印出来。错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment"># 0 不能作为除数，触发异常</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?ZeroDivisionError<span class="token punctuation">:</span> division by zero<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">+</span> spam<span class="token operator">*</span><span class="token number">3</span>             <span class="token comment"># spam 未定义，触发异常</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?NameError<span class="token punctuation">:</span> name <span class="token string">'spam'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'2'</span> <span class="token operator">+</span> <span class="token number">2</span>               <span class="token comment"># int 不能与 str 相加，触发异常</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> can only concatenate <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to <span class="token builtin">str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1 异常处理"></a>1 异常处理</h2><ul><li><p>异常捕捉可以使用 <strong><code>try/except</code></strong> 语句。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171112148.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的不是数字，请再次尝试输入！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句）。</li><li>如果没有异常发生，忽略 except 子句，try 子句执行后结束。</li><li>如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。</li><li>如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。</li></ul></li><li><p>一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。<strong>最多只有一个分支会被执行</strong>。</p></li><li><p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个<strong>元组</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">except</span> <span class="token punctuation">(</span>RuntimeError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> NameError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>最后一个except子句可以忽略异常的名称，它将被当作通配符使用。你可以使用这种方法打印一个错误信息，然后再次把异常抛出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myfile.txt'</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OS error: {0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not convert data to an integer."</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Unexpected error:"</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>try/except</strong> 语句还有一个可选的 <strong>else</strong> 子句，如果使用这个子句，那么必须放在所有的 except 子句之后。<strong>else 子句将在 try 子句没有发生任何异常的时候执行。</strong><br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171111166.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> arg <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cannot open'</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">'has'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lines'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>异常处理并不仅仅处理那些直接发生在 try 子句中的异常，而且<strong>还能处理子句中调用的函数（甚至间接调用的函数）里抛出的异常</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">this_fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>   <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>        this_fails<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Handling run-time error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>   Handling run<span class="token operator">-</span>time error<span class="token punctuation">:</span> <span class="token builtin">int</span> division <span class="token keyword">or</span> modulo by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>try-finally</code> 语句无论是否发生异常都将执行最后的代码。<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171112169.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    runoob<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> AssertionError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.log'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            read_data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> fnf_error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fnf_error<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这句话，无论异常是否发生都会执行。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>as</code>获得被抛出异常的引用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> e<span class="token punctuation">.</span>errno <span class="token operator">==</span> errno<span class="token punctuation">.</span>ENOENT<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'File not found'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> e<span class="token punctuation">.</span>errno <span class="token operator">==</span> errno<span class="token punctuation">.</span>EACCES<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Permission denied'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Unexpected error: %d'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>errno<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过<code>__mro__</code> 属性查看特定异常的类成层级关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> FileNotFoundError<span class="token punctuation">.</span>__mro__<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'FileNotFoundError'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OSError'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'Exception'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BaseException'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>捕获所有异常:<code>Exception</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   log<span class="token punctuation">(</span><span class="token string">'Reason:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>       <span class="token comment"># Important!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个将会捕获除了 <code>SystemExit</code> 、 <code>KeyboardInterrupt</code> 和 <code>GeneratorExit</code> 之外的所有异常。 如果你还想捕获这三个异常，将 <code>Exception</code> 改成 <code>BaseException</code> 即可。</p></li></ul><h2 id="2-抛出异常"><a href="#2-抛出异常" class="headerlink" title="2 抛出异常"></a>2 抛出异常</h2><ul><li><p>Python 使用 raise 语句抛出一个指定的异常。</p></li><li><p><strong><code>raise [Exception [, args [, traceback]]]</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果 x 大于 5 就触发异常</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'x 不能大于 5。x 的值为: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'x 不能大于 5。x 的值为: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> x 不能大于 <span class="token number">5</span>。x 的值为<span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>raise 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类（也就是 <strong>Exception 的子类</strong>）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NameError<span class="token punctuation">(</span><span class="token string">'HiThere'</span><span class="token punctuation">)</span>  <span class="token comment"># 模拟一个异常。</span>    <span class="token keyword">except</span> NameError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception flew by!'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>  <span class="token comment"># 再次抛出</span>   An exception flew by!Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?NameError<span class="token punctuation">:</span> HiThere<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>raise from</code> 语句捕获一个异常后抛出另外一个不同的异常，同时还得在异常回溯中保留两个异常的信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'A parsing error occurred'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> e<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> example<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> exampleValueError<span class="token punctuation">:</span> invalid literal <span class="token keyword">for</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">with</span> base <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'N/A'</span><span class="token comment"># 上面的异常是下面的异常产生的直接原因</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">in</span> exampleRuntimeError<span class="token punctuation">:</span> A parsing error occurred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>忽略掉异常链，可使用 <code>raise from None</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">example3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'A parsing error occurred'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>example3<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">in</span> example3RuntimeError<span class="token punctuation">:</span> A parsing error occurred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3 自定义异常"></a>3 自定义异常</h2><ul><li><p>创建一个新的异常类来拥有自己的异常。<strong>异常类继承自 Exception 类</strong>，可以直接继承，或者间接继承</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>   <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> MyError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My exception occurred, value:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>   My exception occurred<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token string">'oops!'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?__main__<span class="token punctuation">.</span>MyError<span class="token punctuation">:</span> <span class="token string">'oops!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当创建一个模块有可能抛出多种不同的异常时，一种通常的做法是为这个包建立一个<strong>基础异常类</strong>，然后基于这个基础类为不同的错误情况创建不同的子类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Base class for exceptions in this module."""</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">InputError</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Exception raised for errors in the input.    Attributes:        expression -- input expression in which the error occurred        message -- explanation of the error    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> expression<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>expression <span class="token operator">=</span> expression        self<span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token keyword">class</span> <span class="token class-name">TransitionError</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Raised when an operation attempts a state transition that's not    allowed.    Attributes:        previous -- state at beginning of transition        next -- attempted new state        message -- explanation of why the specific transition is not allowed    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> previous<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>previous <span class="token operator">=</span> previous        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>        self<span class="token punctuation">.</span>message <span class="token operator">=</span> message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-清理行为"><a href="#4-清理行为" class="headerlink" title="4 清理行为"></a>4 清理行为</h2><ul><li><p>定义清理行为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">raise</span> KeyboardInterrupt<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Goodbye, world!'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Goodbye<span class="token punctuation">,</span> world!Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyboardInterrupt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个异常在 try 子句里（或者在 except 和 else 子句里）被抛出，而又没有任何的 except 把它截住，那么这个异常<strong>会在 finally 子句执行后被抛出</strong>。</p></li><li><p>预定义的清理行为:<code>with</code></p></li></ul><h2 id="5-断言"><a href="#5-断言" class="headerlink" title="5 断言"></a>5 断言</h2><ul><li><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p></li><li><p>断言可以<strong>在条件不满足程序运行的情况下直接返回错误</strong>，而不必等待程序运行后出现崩溃的情况。</p></li><li><p>语法格式</p><ul><li><p><strong><code>assert expression</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 等价于</span><span class="token keyword">if</span> <span class="token keyword">not</span> expression<span class="token punctuation">:</span>    <span class="token keyword">raise</span> AssertionError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>assert expression [, arguments]</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 等价于</span><span class="token keyword">if</span> <span class="token keyword">not</span> expression<span class="token punctuation">:</span>    <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token boolean">True</span>     <span class="token comment"># 条件为 true 正常执行</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token boolean">False</span>    <span class="token comment"># 条件为 false 触发异常</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AssertionError<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token comment"># 条件为 true 正常执行</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span>    <span class="token comment"># 条件为 false 触发异常</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AssertionError<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1 不等于 2'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AssertionError<span class="token punctuation">:</span> <span class="token number">1</span> 不等于 <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="6-警告信息"><a href="#6-警告信息" class="headerlink" title="6 警告信息"></a>6 警告信息</h2><ul><li><p>使用 <code>warning.warn()</code> 函数输出一个警告消息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> warnings<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> logfile<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> logfile <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>         warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'logfile argument deprecated'</span><span class="token punctuation">,</span> DeprecationWarning<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>warn()</code> 的参数是一个警告消息和一个警告类，警告类有如下几种：UserWarning, DeprecationWarning, SyntaxWarning, RuntimeWarning, ResourceWarning, 或 FutureWarning.</p></li><li><p>对警告的处理取决于你如何运行解释器以及一些其他配置。 例如，如果你使用 <code>-W all</code> 选项去运行Python，你会得到如下的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> % python3 <span class="token parameter variable">-W</span> all example.pyexample.py:5: DeprecationWarning: logfile argument is deprecated  warnings.warn<span class="token punctuation">(</span><span class="token string">'logfile argument is deprecated'</span>, DeprecationWarning<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>-W error</code> 选项将警告转换为异常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> % python3 <span class="token parameter variable">-W</span> error example.pyTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"example.py"</span>, line <span class="token number">10</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    func<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">3</span>, <span class="token assign-left variable">logfile</span><span class="token operator">=</span><span class="token string">'log.txt'</span><span class="token punctuation">)</span>  File <span class="token string">"example.py"</span>, line <span class="token number">5</span>, <span class="token keyword">in</span> func    warnings.warn<span class="token punctuation">(</span><span class="token string">'logfile argument is deprecated'</span>, DeprecationWarning<span class="token punctuation">)</span>DeprecationWarning: logfile argument is deprecated<span class="token function">bash</span> %<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>-W</code> 选项能控制警告消息的输出。 <code>-W all</code> 会输出所有警告消息，<code>-W ignore</code> 忽略掉所有警告，<code>-W error</code> 将警告转换成异常。 另外一种选择，你还可以使用 <code>warnings.simplefilter()</code> 函数控制输出。 <code>always</code> 参数会让所有警告消息出现，<code>`ignore</code> 忽略调所有的警告，<code>error</code> 将警告转换成异常。</p></li></ul><h2 id="7-内置异常类型"><a href="#7-内置异常类型" class="headerlink" title="7 内置异常类型"></a>7 内置异常类型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">BaseException <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SystemExit <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyboardInterrupt <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> GeneratorExit <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> Exception      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopIteration      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopAsyncIteration      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ArithmeticError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FloatingPointError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OverflowError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ZeroDivisionError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> AssertionError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> AttributeError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BufferError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> EOFError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ImportError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ModuleNotFoundError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> LookupError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IndexError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> MemoryError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NameError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnboundLocalError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OSError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BlockingIOError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ChildProcessError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionError      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BrokenPipeError      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionAbortedError      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionRefusedError      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionResetError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileExistsError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileNotFoundError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> InterruptedError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IsADirectoryError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NotADirectoryError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> PermissionError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ProcessLookupError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TimeoutError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ReferenceError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RuntimeError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NotImplementedError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RecursionError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SyntaxError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IndentationError      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TabError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SystemError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TypeError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ValueError      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeError      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeDecodeError      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeEncodeError      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeTranslateError      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> Warning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> DeprecationWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> PendingDeprecationWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RuntimeWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SyntaxWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UserWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FutureWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ImportWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BytesWarning           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ResourceWarning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习24-模块</title>
      <link href="/2024/07/11/python-xue-xi-24-mo-kuai/"/>
      <url>/2024/07/11/python-xue-xi-24-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能。</li></ul><h2 id="1-导入模块"><a href="#1-导入模块" class="headerlink" title="1 导入模块"></a>1 导入模块</h2><ul><li><p><strong>import 语句</strong>：<code>import module1[, module2[,... moduleN]</code></p><ul><li><p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p></li><li><p>搜索路径时一个解释器会先进行搜索的所有目录的列表。</p></li><li><p>一般把命令放在脚本的顶端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># Filename: support.py</span> <span class="token keyword">def</span> <span class="token function">print_func</span><span class="token punctuation">(</span> par <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello : "</span><span class="token punctuation">,</span> par<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># Filename: test.py</span> <span class="token comment"># 导入模块</span><span class="token keyword">import</span> support <span class="token comment"># 现在可以调用模块里包含的函数了</span>support<span class="token punctuation">.</span>print_func<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span>$ python3 test<span class="token punctuation">.</span>py Hello <span class="token punctuation">:</span>  Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>无论执行多少次<code>import</code>，一个模块只会被<strong>导入一次</strong></p></li></ul></li><li><p><strong>搜索路径</strong>：由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。可以通过定义环境变量的方式来确定搜索路径。搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 sys 模块中的 <code>path</code>变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3.4'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3.4/plat-x86_64-linux-gnu'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3.4/lib-dynload'</span><span class="token punctuation">,</span> <span class="token string">'/usr/local/lib/python3.4/dist-packages'</span><span class="token punctuation">,</span> <span class="token string">'/usr/lib/python3/dist-packages'</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''sys.path 输出是一个列表，其中第一项是空串 ''，代表当前目录（若是从一个脚本中打印出来的话，可以更清楚地看出是哪个目录），亦即我们执行python解释器的目录（对于脚本的话就是运行的脚本所在的目录）。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>from … import 语句</strong>：<code>from modname import name1[, name2[, ... nameN]]</code></p><ul><li>从模块中导入一个指定的部分到当前命名空间中</li></ul></li><li><p><strong>from … import * 语句</strong>：<code>from modname import *</code></p><ul><li>把一个模块的所有内容全都导入到当前的命名空间</li></ul></li><li><p><strong>重新加载模块</strong></p><p>由于修改源码，<code>imp.reload()</code>来重新加载已经加载的模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> spam<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> imp<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> imp<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token operator">&lt;</span>module <span class="token string">'spam'</span> <span class="token keyword">from</span> <span class="token string">'./spam.py'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在生产环境中可能需要避免重新加载模块。</p></li><li><p><strong>运行目录</strong></p><p>如果你的应用程序已经有多个文件，你可以把你的应用程序放进它自己的目录并添加一个<code>__main__.py</code>文件。</p><pre class="line-numbers language-none"><code class="language-none">myapplication/    spam.py    bar.py    grok.py    __main__.py    bash % python3 myapplication<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释器将执行<code>__main__.py</code>文件作为主程序。</p></li></ul><h2 id="2-模块"><a href="#2-模块" class="headerlink" title="2 模块"></a>2 模块</h2><ul><li><p>模块除了<strong>方法定义</strong>，还可以包括<strong>可执行的代码</strong>。这些代码一般用来初始化这个模块。这些代码只有<strong>在第一次被导入时才会被执行</strong>。</p></li><li><p>每个模块有<strong>各自独立的符号表</strong>，在模块内部为所有的函数当作全局符号表来使用。</p></li><li><p>模块可以导入其他模块。在一个模块（或者脚本，或者其他地方）的最前面使用 import 来导入一个模块</p></li><li><p>使用 import 直接把模块内（函数，变量的）名称导入到当前操作模块不会把被导入的模块的名称放在当前的字符表中</p></li><li><p><strong>from … import *</strong>可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表，但是那些由单一下划线（_）开头的名字不在此例。</p></li><li><p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用<code>__name__</code>属性来使该程序块仅在该模块自身运行时执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token comment"># Filename: using_name.py</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序自身在运行'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我来自另一模块'</span><span class="token punctuation">)</span>$ python using_name<span class="token punctuation">.</span>py程序自身在运行$ python<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> using_name我来自另一模块<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每个模块都有一个<code>__name__</code>属性，当其值是’<code>__main__</code>‘时，表明该模块自身在运行，否则是被引入。</li><li><strong><code>__name__</code></strong> 与 <strong><code>__main__</code></strong> 底下是双下划线， <strong><code>_ _</code></strong> 是这样去掉中间的那个空格。</li></ul></li><li><p>内置的函数 <code>dir()</code> 可以找到模块内<strong>定义的所有名称</strong>并以一个字符串列表的形式返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> fibo<span class="token punctuation">,</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>fibo<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'fib'</span><span class="token punctuation">,</span> <span class="token string">'fib2'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'__displayhook__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__excepthook__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__stderr__'</span><span class="token punctuation">,</span> <span class="token string">'__stdin__'</span><span class="token punctuation">,</span> <span class="token string">'__stdout__'</span><span class="token punctuation">,</span> <span class="token string">'_clear_type_cache'</span><span class="token punctuation">,</span> <span class="token string">'_current_frames'</span><span class="token punctuation">,</span> <span class="token string">'_debugmallocstats'</span><span class="token punctuation">,</span> <span class="token string">'_getframe'</span><span class="token punctuation">,</span> <span class="token string">'_home'</span><span class="token punctuation">,</span> <span class="token string">'_mercurial'</span><span class="token punctuation">,</span> <span class="token string">'_xoptions'</span><span class="token punctuation">,</span> <span class="token string">'abiflags'</span><span class="token punctuation">,</span> <span class="token string">'api_version'</span><span class="token punctuation">,</span> <span class="token string">'argv'</span><span class="token punctuation">,</span> <span class="token string">'base_exec_prefix'</span><span class="token punctuation">,</span> <span class="token string">'base_prefix'</span><span class="token punctuation">,</span> <span class="token string">'builtin_module_names'</span><span class="token punctuation">,</span> <span class="token string">'byteorder'</span><span class="token punctuation">,</span> <span class="token string">'call_tracing'</span><span class="token punctuation">,</span> <span class="token string">'callstats'</span><span class="token punctuation">,</span> <span class="token string">'copyright'</span><span class="token punctuation">,</span> <span class="token string">'displayhook'</span><span class="token punctuation">,</span> <span class="token string">'dont_write_bytecode'</span><span class="token punctuation">,</span> <span class="token string">'exc_info'</span><span class="token punctuation">,</span> <span class="token string">'excepthook'</span><span class="token punctuation">,</span> <span class="token string">'exec_prefix'</span><span class="token punctuation">,</span> <span class="token string">'executable'</span><span class="token punctuation">,</span> <span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token string">'flags'</span><span class="token punctuation">,</span> <span class="token string">'float_info'</span><span class="token punctuation">,</span> <span class="token string">'float_repr_style'</span><span class="token punctuation">,</span> <span class="token string">'getcheckinterval'</span><span class="token punctuation">,</span> <span class="token string">'getdefaultencoding'</span><span class="token punctuation">,</span> <span class="token string">'getdlopenflags'</span><span class="token punctuation">,</span> <span class="token string">'getfilesystemencoding'</span><span class="token punctuation">,</span> <span class="token string">'getobjects'</span><span class="token punctuation">,</span> <span class="token string">'getprofile'</span><span class="token punctuation">,</span> <span class="token string">'getrecursionlimit'</span><span class="token punctuation">,</span> <span class="token string">'getrefcount'</span><span class="token punctuation">,</span> <span class="token string">'getsizeof'</span><span class="token punctuation">,</span> <span class="token string">'getswitchinterval'</span><span class="token punctuation">,</span> <span class="token string">'gettotalrefcount'</span><span class="token punctuation">,</span> <span class="token string">'gettrace'</span><span class="token punctuation">,</span> <span class="token string">'hash_info'</span><span class="token punctuation">,</span> <span class="token string">'hexversion'</span><span class="token punctuation">,</span> <span class="token string">'implementation'</span><span class="token punctuation">,</span> <span class="token string">'int_info'</span><span class="token punctuation">,</span> <span class="token string">'intern'</span><span class="token punctuation">,</span> <span class="token string">'maxsize'</span><span class="token punctuation">,</span> <span class="token string">'maxunicode'</span><span class="token punctuation">,</span> <span class="token string">'meta_path'</span><span class="token punctuation">,</span> <span class="token string">'modules'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">,</span> <span class="token string">'path_hooks'</span><span class="token punctuation">,</span> <span class="token string">'path_importer_cache'</span><span class="token punctuation">,</span> <span class="token string">'platform'</span><span class="token punctuation">,</span> <span class="token string">'prefix'</span><span class="token punctuation">,</span> <span class="token string">'ps1'</span><span class="token punctuation">,</span> <span class="token string">'setcheckinterval'</span><span class="token punctuation">,</span> <span class="token string">'setdlopenflags'</span><span class="token punctuation">,</span> <span class="token string">'setprofile'</span><span class="token punctuation">,</span> <span class="token string">'setrecursionlimit'</span><span class="token punctuation">,</span> <span class="token string">'setswitchinterval'</span><span class="token punctuation">,</span> <span class="token string">'settrace'</span><span class="token punctuation">,</span> <span class="token string">'stderr'</span><span class="token punctuation">,</span> <span class="token string">'stdin'</span><span class="token punctuation">,</span> <span class="token string">'stdout'</span><span class="token punctuation">,</span> <span class="token string">'thread_info'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'version_info'</span><span class="token punctuation">,</span> <span class="token string">'warnoptions'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有给定参数，那么 <code>dir()</code> 函数会罗列出当前定义的所有名称</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> fibo<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fib <span class="token operator">=</span> fibo<span class="token punctuation">.</span>fib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 得到一个当前模块中定义的属性列表</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'fib'</span><span class="token punctuation">,</span> <span class="token string">'fibo'</span><span class="token punctuation">,</span> <span class="token string">'sys'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment"># 建立一个新的变量 'a'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'sys'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> a <span class="token comment"># 删除变量名a</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'sys'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>标准模块</strong>：Python 本身带着一些标准的模块库，直接被构建在解析器里， <code>sys</code>模块，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>ps1<span class="token string">'&gt;&gt;&gt; '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>ps2<span class="token string">'... '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>ps1 <span class="token operator">=</span> <span class="token string">'C&gt; '</span>C<span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob!'</span><span class="token punctuation">)</span>Runoob!C<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-包"><a href="#3-包" class="headerlink" title="3 包"></a>3 包</h2><ul><li><p>包是一种管理 Python 模块命名空间的形式，采用”<strong>点模块名称</strong>“。</p></li><li><p>比如一个模块的名称是 <strong>A.B</strong>， 那么他表示一个<strong>包 A中的子模块 B</strong> 。</p></li><li><p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。</p></li><li><p>目录只有包含一个叫做 <strong>init</strong>.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</p></li><li><p>使用 <strong>from package import item</strong> 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。</p></li><li><p>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 <strong>:exc:ImportError</strong> 异常。</p></li><li><p>使用形如 <strong>import item.subitem.subsubitem</strong> 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</p></li><li><p>导入语句遵循如下规则：如果包定义文件 <strong><code>__init__.py</code></strong> 存在一个叫做 <strong><code>__all__</code></strong> 的列表变量，那么在使用 <strong>from package import *</strong> 的时候就<strong>把这个列表中的所有名字作为包内容导入</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"surround"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>使用from sound.effects import *只会导入包里面这三个子模块</li><li>如果 <strong><code>__all__</code></strong> 真的没有定义，那么使用<strong>from sound.effects import *</strong>这种语法的时候，就不会导入包 sound.effects 里的任何子模块。他只是把包sound.effects和它里面定义的所有内容导入进来（可能运行<code>__init__.py</code>里定义的初始化代码）。</li></ol></li><li><p>加载子模块：<code>from . import submodule</code></p></li><li><p><strong>读取包中数据文件</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mypackage<span class="token operator">/</span>    __init__<span class="token punctuation">.</span>py    somedata<span class="token punctuation">.</span>dat    spam<span class="token punctuation">.</span>py    <span class="token comment"># spam.py</span><span class="token keyword">import</span> pkgutildata <span class="token operator">=</span> pkgutil<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span>__package__<span class="token punctuation">,</span> <span class="token string">'somedata.dat'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此产生的变量是<strong>包含该文件的原始内容的字节字符串</strong></p><p>get_data()的第一个参数是包含包名的字符串。你可以直接使用包名，也可以使用特殊的变量，比如<code>__package__</code>。第二个参数是包内文件的<strong>相对名称</strong>。</p></li></ul><h2 id="4-相对路径导入"><a href="#4-相对路径导入" class="headerlink" title="4 相对路径导入"></a>4 相对路径导入</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">mypackage<span class="token operator">/</span>    __init__<span class="token punctuation">.</span>py    A<span class="token operator">/</span>        __init__<span class="token punctuation">.</span>py        spam<span class="token punctuation">.</span>py        grok<span class="token punctuation">.</span>py    B<span class="token operator">/</span>        __init__<span class="token punctuation">.</span>py        bar<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mypackage/A/spam.py</span><span class="token comment"># 使用相对路径</span><span class="token comment"># 同级目录</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> grok<span class="token comment"># 不同目录</span><span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>B <span class="token keyword">import</span> bar<span class="token comment"># 绝对路径</span><span class="token keyword">from</span> mypackage<span class="token punctuation">.</span>A <span class="token keyword">import</span> grok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用绝对路径名的不利之处是这将顶层包名硬编码到你的源码中。不便于重新组织。</p><h2 id="5-模块分割"><a href="#5-模块分割" class="headerlink" title="5 模块分割"></a>5 模块分割</h2><ul><li><p>将一个模块分割成多个文件变成包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mymodule.py</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A.spam'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B.bar'</span><span class="token punctuation">)</span>        mymodule<span class="token operator">/</span>    __init__<span class="token punctuation">.</span>py    a<span class="token punctuation">.</span>py    b<span class="token punctuation">.</span>py<span class="token comment"># a.py</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A.spam'</span><span class="token punctuation">)</span>        <span class="token comment"># b.py</span><span class="token keyword">from</span> <span class="token punctuation">.</span>a <span class="token keyword">import</span> A<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B.bar'</span><span class="token punctuation">)</span>        <span class="token comment"># __init__.py</span><span class="token keyword">from</span> <span class="token punctuation">.</span>a <span class="token keyword">import</span> A<span class="token keyword">from</span> <span class="token punctuation">.</span>b <span class="token keyword">import</span> B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 产生的包MyModule将作为一个单一的逻辑模块</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> mymodule<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> mymodule<span class="token punctuation">.</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>spam<span class="token punctuation">(</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span>spam<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> mymodule<span class="token punctuation">.</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>B<span class="token punctuation">.</span>bar<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>延迟导入</strong>:组件在需要时被加载</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># __init__.py</span><span class="token keyword">def</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> <span class="token punctuation">.</span>a <span class="token keyword">import</span> A    <span class="token keyword">return</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> <span class="token punctuation">.</span>b <span class="token keyword">import</span> B    <span class="token keyword">return</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> mymodule<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> mymodule<span class="token punctuation">.</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>spam<span class="token punctuation">(</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-统一命名空间"><a href="#6-统一命名空间" class="headerlink" title="6 统一命名空间"></a>6 统一命名空间</h2><ul><li><p>在统一不同的目录里统一相同的命名空间，但是要删去用来将组件联合起来的<code>__init__.py</code>文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">foo<span class="token operator">-</span>package<span class="token operator">/</span>    spam<span class="token operator">/</span>        blah<span class="token punctuation">.</span>pybar<span class="token operator">-</span>package<span class="token operator">/</span>    spam<span class="token operator">/</span>        grok<span class="token punctuation">.</span>py        <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo-package'</span><span class="token punctuation">,</span> <span class="token string">'bar-package'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> spam<span class="token punctuation">.</span>blah<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> spam<span class="token punctuation">.</span>grok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包命名空间是一种特殊的封装设计，为合并不同的目录的代码到一个<strong>共同的命名空间</strong>。它允许一个框架的部分被单独地安装下载。它也使人们能够轻松地为这样的框架编写第三方附加组件和其他扩展。</p></li><li><p>包命名空间的关键是确保顶级目录中<strong>没有<code>__init__.py</code>文件</strong>来作为共同的命名空间。</p></li><li><p>缺失<code>__init__.py</code>文件使得在导入包的时候，解释器创建了一个由所有包含匹配包名的目录组成的列表。特殊的包命名空间模块被创建，只读的目录列表副本被存储在其<code>__path__</code>变量中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> spam<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>__path___NamespacePath<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo-package/spam'</span><span class="token punctuation">,</span> <span class="token string">'bar-package/spam'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>包命名空间的一个重要特点是<strong>任何人都可以用自己的代码来扩展命名空间</strong>。需要将你的代码目录和其他包一起添加到<strong>sys.path</strong></p></li><li><p>一个包是否被作为一个包命名空间的主要方法是检查其<code>__file__</code>属性。如果没有，那包是个命名空间。这也可以由其字符表现形式中的“<code>namespace</code>”这个词体现出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>__file__Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'module'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'__file__'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token operator">&lt;</span>module <span class="token string">'spam'</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将文件夹加入到sys.path</p><ol><li><p>使用PYTHONPATH环境变量来添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bash <span class="token operator">%</span> env PYTHONPATH<span class="token operator">=</span><span class="token operator">/</span>some<span class="token operator">/</span><span class="token builtin">dir</span><span class="token punctuation">:</span><span class="token operator">/</span>other<span class="token operator">/</span><span class="token builtin">dir</span> python3Python <span class="token number">3.3</span><span class="token number">.0</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Oct <span class="token number">4</span> <span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">[</span>GCC <span class="token number">4.2</span><span class="token number">.1</span> <span class="token punctuation">(</span>Apple Inc<span class="token punctuation">.</span> build <span class="token number">5666</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dot <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on darwinType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/some/dir'</span><span class="token punctuation">,</span> <span class="token string">'/other/dir'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个.pth文件，将目录列举出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myapplication.pth</span><span class="token operator">/</span>some<span class="token operator">/</span><span class="token builtin">dir</span><span class="token operator">/</span>other<span class="token operator">/</span><span class="token builtin">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>.pth文件需要放在某个Python的site-packages目录，通常位于/usr/local/lib/python3.3/site-packages 或者 ~/.local/lib/python3.3/sitepackages。当解释器启动时，.pth文件里列举出来的存在于文件系统的目录将被添加到sys.path。安装一个.pth文件可能需要管理员权限，如果它被添加到系统级的Python解释器。</p></li><li><p>代码手动调节sys.path的值：在不修改源代码的情况下，将path配置到其他地方。如果您使用模块级的变量来精心构造一个适当的绝对路径，有时你可以解决硬编码目录的问题，比如<code>__file__</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> abspath<span class="token punctuation">,</span> join<span class="token punctuation">,</span> dirnamesys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> join<span class="token punctuation">(</span>abspath<span class="token punctuation">(</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>将src目录添加到path里，和执行插入步骤的代码在同一个目录里</strong></p></li></ol></li></ul><h2 id="7-字符串名导入模块"><a href="#7-字符串名导入模块" class="headerlink" title="7 字符串名导入模块"></a>7 字符串名导入模块</h2><ul><li><p>使用<strong><code>importlib.import_module()</code></strong>函数来手动导入<strong>名字为字符串</strong>给出的一个模块或者包的一部分。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> importlib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">0.9092974268256817</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mod <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span><span class="token string">'urllib.request'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> u <span class="token operator">=</span> mod<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.python.org'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>import_module()也可相对导入。但是需要一个额外的参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> importlib<span class="token comment"># Same as 'from . import b'</span>b <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span><span class="token string">'.b'</span><span class="token punctuation">,</span> __package__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-分发包"><a href="#8-分发包" class="headerlink" title="8 分发包"></a>8 分发包</h2><ul><li><p>典型的函数库包</p><pre class="line-numbers language-none"><code class="language-none">projectname/    README.txt    Doc/        documentation.txt    projectname/        __init__.py        foo.py        bar.py        utils/            __init__.py            spam.py            grok.py    examples/        helloworld.py        ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要让包可以发布出去，首先要编写一个 <code>setup.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># setup.py</span><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'projectname'</span><span class="token punctuation">,</span>    version<span class="token operator">=</span><span class="token string">'1.0'</span><span class="token punctuation">,</span>    author<span class="token operator">=</span><span class="token string">'Your Name'</span><span class="token punctuation">,</span>    author_email<span class="token operator">=</span><span class="token string">'you@youraddress.com'</span><span class="token punctuation">,</span>    url<span class="token operator">=</span><span class="token string">'http://www.you.com/projectname'</span><span class="token punctuation">,</span>    packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'projectname'</span><span class="token punctuation">,</span> <span class="token string">'projectname.utils'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下一步创建一个 <code>MANIFEST.in</code> 文件，列出所有在包中需要包含进来的非源码文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># MANIFEST.in</span>include <span class="token operator">*</span><span class="token punctuation">.</span>txtrecursive<span class="token operator">-</span>include examples <span class="token operator">*</span>recursive<span class="token operator">-</span>include Doc <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>确保 <code>setup.py</code> 和 <code>MANIFEST.in</code> 文件放在包的最顶级目录中。</p></li><li><p>执行命令创建源码分发包:<strong><code>% bash python3 setup.py sdist</code></strong></p></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习23-命名空间和作用域</title>
      <link href="/2024/07/11/python-xue-xi-23-ming-ming-kong-jian-he-zuo-yong-yu/"/>
      <url>/2024/07/11/python-xue-xi-23-ming-ming-kong-jian-he-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h1><h2 id="1-命名空间"><a href="#1-命名空间" class="headerlink" title="1 命名空间"></a>1 命名空间</h2><ul><li>命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python <strong>字典</strong>来实现的。</li><li>命名空间提供了在项目中<strong>避免名字冲突</strong>的一种方法。<strong>各个命名空间是独立的</strong>，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。</li><li>三种命名空间<ul><li><strong>内置名称（built-in names</strong>）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</li><li><strong>全局名称（global names）</strong>，模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li><li><strong>局部名称（local names）</strong>，函数（类）中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。</li></ul></li></ul><ul><li><p>命名空间查找顺序：<strong>局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</strong>。找不到则NameError 异常。<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171104657.png" alt="types_namespace-1" style="zoom:50%;"></p></li><li><p>命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。无法从外部命名空间访问内部命名空间的对象。</p></li></ul><h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2 作用域"></a>2 作用域</h2><ul><li><p>作用域就是一个 Python 程序可以<strong>直接访问命名空间的正文区域</strong>。</p></li><li><p>在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。</p></li><li><p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。</p></li><li><p>四种作用域</p><ul><li><strong>L（Local）</strong>：最内层，包含局部变量，比如一个函数/方法内部。</li><li><strong>E（Enclosing）</strong>：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li><li><strong>G（Global）</strong>：当前脚本的最外层，比如当前模块的全局变量。</li><li><strong>B（Built-in）</strong>： 包含了内建的变量/关键字等，最后被搜索。</li></ul></li><li><p>规则顺序： <strong>L –&gt; E –&gt; G –&gt; B</strong>。在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407171104512.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 全局作用域</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    o_count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 闭包函数外的函数中</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i_count <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 局部作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内置作用域是通过一个名为 <strong>builtin</strong> 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须<strong>导入这个文件</strong>才能够使用它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看预定义变量:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> builtins<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Python 中只有<strong>模块（module），类（class）以及函数（def、lambda）</strong>才会引入新的作用域，其它的代码块（如 <strong>if/elif/else/、try/except、for/while</strong>等）是不会引入新的作用域的，也就是说这些语句内定义的变量，<strong>外部也可以访问</strong>。</p></li></ul><h2 id="3-全局变量和局部变量"><a href="#3-全局变量和局部变量" class="headerlink" title="3 全局变量和局部变量"></a>3 全局变量和局部变量</h2><ul><li><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p></li><li><p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 这是一个全局变量</span><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#返回2个参数的和."</span>    total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment"># total在这里是局部变量.</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内是局部变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> total <span class="token comment">#调用sum函数</span><span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外是全局变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token comment"># 函数内是局部变量 :  30</span><span class="token comment"># 函数外是全局变量 :  0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-global-和-nonlocal关键字"><a href="#4-global-和-nonlocal关键字" class="headerlink" title="4 global 和 nonlocal关键字"></a>4 global 和 nonlocal关键字</h2><ul><li>修改全局变量 <code>global</code> </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num  <span class="token comment"># 需要使用 global 关键字声明</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>     num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 1</span><span class="token comment"># 123</span><span class="token comment"># 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量<code>nonlocal</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> num   <span class="token comment"># nonlocal关键字声明</span>        num <span class="token operator">=</span> <span class="token number">100</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 100</span><span class="token comment"># 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习22-面向对象</title>
      <link href="/2024/07/10/python-xue-xi-22-mian-xiang-dui-xiang/"/>
      <url>/2024/07/10/python-xue-xi-22-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li><p><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p></li><li><p><strong>方法：</strong>类中定义的函数。</p></li><li><p><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p></li><li><p><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</p></li><li><p><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p></li><li><p><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</p></li><li><p><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</p></li><li><p><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</p></li><li><p><strong>实例化：</strong>创建一个类的实例，类的具体对象。</p></li><li><p><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p></li><li><p>Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类名应采用<strong>驼峰命名</strong>法，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。</p></li><li><p>通常认为首字母大写的名称（如Dog）指的是类，而小写的名称（如my_dog）指的是根据类创建的实例。</p></li></ul><h2 id="1-类对象"><a href="#1-类对象" class="headerlink" title="1 类对象"></a>1 类对象</h2><ul><li><p>类对象支持两种操作：<strong>属性引用和实例化</strong>。</p></li><li><p>属性引用使用和 Python 中所有的属性引用一样的标准语法：<strong>obj.name</strong>。</p></li><li><p>类对象创建后，类命名空间中所有的命名都是有效属性名。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一个简单的类实例"""</span>    i <span class="token operator">=</span> <span class="token number">12345</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'hello world'</span> <span class="token comment"># 实例化类</span>x <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 访问类的属性和方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MyClass 类的属性 i 为："</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MyClass 类的方法 f 输出为："</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 <code>__str__()</code> 和 <code>__repr__()</code> 方法自定义对象输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Pair({0.x!r}, {0.y!r})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'({0.x!s}, {0.y!s})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Pair<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pPair<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># __repr__() output</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># __str__() output</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Pair<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># !r 格式化代码指明输出使用 __repr__() 来代替默认的 __str__() </span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p is {0!r}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token keyword">is</span> Pair<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p is {0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token keyword">is</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>__repr__()</code> 方法返回一个实例的代码表示形式，通常用来重新构造这个实例。 内置的 <code>repr()</code> 函数返回这个字符串，与交互式解释器显示的值相同。 </li><li><code>__str__()</code> 方法将实例转换为一个字符串，使用 <code>str()</code> 或 <code>print()</code> 函数会输出这个字符串。</li><li>如果 <code>__str__()</code> 没有被定义，那么就会使用 <code>__repr__()</code> 来代替输出。</li></ol></li><li><p>自定义字符串的格式化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_formats <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'ymd'</span> <span class="token punctuation">:</span> <span class="token string">'{d.year}-{d.month}-{d.day}'</span><span class="token punctuation">,</span>    <span class="token string">'mdy'</span> <span class="token punctuation">:</span> <span class="token string">'{d.month}/{d.day}/{d.year}'</span><span class="token punctuation">,</span>    <span class="token string">'dmy'</span> <span class="token punctuation">:</span> <span class="token string">'{d.day}/{d.month}/{d.year}'</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>month <span class="token operator">=</span> month        self<span class="token punctuation">.</span>day <span class="token operator">=</span> day    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            code <span class="token operator">=</span> <span class="token string">'ymd'</span>        fmt <span class="token operator">=</span> _formats<span class="token punctuation">[</span>code<span class="token punctuation">]</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token operator">=</span>self<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> Date<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token string">'2012-12-21'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">'mdy'</span><span class="token punctuation">)</span><span class="token string">'12/21/2012'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The date is {:ymd}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token string">'The date is 2012-12-21'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The date is {:mdy}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token string">'The date is 12/21/2012'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 <code>__slots__</code> 属性减少大量对象占用的内存： 实例通过一个很小的<strong>固定大小的数组</strong>来构建，而不是为每个实例定义一个字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>month <span class="token operator">=</span> month        self<span class="token punctuation">.</span>day <span class="token operator">=</span> day<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>__slots__</code> 中列出的属性名在内部被映射到这个数组的指定小标上。但是，不能再给实例添加新的属性，只能使用在 <code>__slots__</code> 中定义的那些属性名。更多作为一个内存优化工具。</p></li></ul><h2 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2 构造方法"></a>2 构造方法</h2><ul><li><p>类中 <code>__init__()</code>方法称为<strong>构造方法</strong>，在类实例化时会自动调用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> realpart<span class="token punctuation">,</span> imagpart<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>r <span class="token operator">=</span> realpart        self<span class="token punctuation">.</span>i <span class="token operator">=</span> imagpartx <span class="token operator">=</span> Complex<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>r<span class="token punctuation">,</span> x<span class="token punctuation">.</span>i<span class="token punctuation">)</span>   <span class="token comment"># 输出结果：3.0 -4.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">prt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span> t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># &lt;__main__.Test instance at 0x100771878&gt;</span><span class="token comment">#__main__.Test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类</strong></p></li><li><p>self 不是 python 关键字，可以换成任意名字</p></li><li><p>在 Python中，self 是一个惯用的名称，用于表示类的实例（对象）自身。它是一个指向<strong>实例的引用</strong>，使得类的方法能够<strong>访问和操作实例的属性</strong>。</p></li></ul><blockquote><p><strong>公用__init__方法</strong></p></blockquote> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">class</span> <span class="token class-name">Structure1</span><span class="token punctuation">:</span>    <span class="token comment"># Class variable that specifies expected fields</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected {} arguments'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Set the arguments</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token comment"># Example class definitions</span><span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span>Structure1<span class="token punctuation">)</span><span class="token punctuation">:</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>Structure1<span class="token punctuation">)</span><span class="token punctuation">:</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>Structure1<span class="token punctuation">)</span><span class="token punctuation">:</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'radius'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"structure.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __init__        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected {} arguments'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Expected <span class="token number">3</span> arguments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>支持关键字参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Structure2</span><span class="token punctuation">:</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected {} arguments'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Set all of the positional arguments</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token comment"># Set the remaining keyword arguments</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> self<span class="token punctuation">.</span>_fields<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Check for any remaining unknown arguments</span>        <span class="token keyword">if</span> kwargs<span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Invalid argument(s): {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Example use</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span>Structure2<span class="token punctuation">)</span><span class="token punctuation">:</span>        _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span>    s1 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">91.1</span><span class="token punctuation">)</span>    s3 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">91.1</span><span class="token punctuation">)</span>    <span class="token comment"># s3 = Stock('ACME', shares=50, price=91.1, aa=1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将不在 <code>_fields</code> 中的名称加入到属性中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Structure3</span><span class="token punctuation">:</span>    <span class="token comment"># Class variable that specifies expected fields</span>    _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected {} arguments'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Set the arguments</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token comment"># Set the additional arguments (if any)</span>        extra_args <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>_fields        <span class="token keyword">for</span> name <span class="token keyword">in</span> extra_args<span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> kwargs<span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Duplicate values for {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Example use</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span>Structure3<span class="token punctuation">)</span><span class="token punctuation">:</span>        _fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span>    s1 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">,</span> date<span class="token operator">=</span><span class="token string">'8/2/2012'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>类方法实现多个构造器</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""方法一：使用类方法"""</span>    <span class="token comment"># Primary constructor</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>month <span class="token operator">=</span> month        self<span class="token punctuation">.</span>day <span class="token operator">=</span> day    <span class="token comment"># Alternate constructor</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">today</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>t<span class="token punctuation">.</span>tm_year<span class="token punctuation">,</span> t<span class="token punctuation">.</span>tm_mon<span class="token punctuation">,</span> t<span class="token punctuation">.</span>tm_mday<span class="token punctuation">)</span>a <span class="token operator">=</span> Date<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment"># Primary</span>b <span class="token operator">=</span> Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Alternate</span><span class="token keyword">class</span> <span class="token class-name">NewDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>c <span class="token operator">=</span> Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Creates an instance of Date (cls=Date)</span>d <span class="token operator">=</span> NewDate<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Creates an instance of NewDate (cls=NewDate)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>通过 __new()__ 方法创建一个未初始化的实例</strong></p></blockquote><p>通过 <code>__new__()</code> 方法创建一个未初始化的实例，绕过执行 <code>__init__()</code> 方法，但需要需要手动初始化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>month <span class="token operator">=</span> month        self<span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> Date<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Date<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Date <span class="token builtin">object</span> at <span class="token number">0x1006716d0</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>yearTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Date'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'year'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'year'</span><span class="token punctuation">:</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">setattr</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>year<span class="token number">2012</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>month<span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>反序列对象</strong>或者<strong>实现某个类方法构造函数</strong>时需要绕过 <code>__init__()</code> 方法来创建对象</p><h2 id="3-类方法"><a href="#3-类方法" class="headerlink" title="3 类方法"></a>3 类方法</h2><p>在类的内部，使用 <strong>def</strong> 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 实例化类</span>p <span class="token operator">=</span> people<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-继承"><a href="#4-继承" class="headerlink" title="4 继承"></a>4 继承</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class DerivedClassName(modname.BaseClassName):</span><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>BaseClassName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#单继承示例</span><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#调用父类的构函</span>        people<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> g    <span class="token comment">#覆写父类的方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span>   s <span class="token operator">=</span> student<span class="token punctuation">(</span><span class="token string">'ken'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>多继承</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>Base1<span class="token punctuation">,</span> Base2<span class="token punctuation">,</span> Base3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#单继承示例</span><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#调用父类的构函</span>        people<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> g    <span class="token comment">#覆写父类的方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#另一个类，多继承之前的准备</span><span class="token keyword">class</span> <span class="token class-name">speaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    topic <span class="token operator">=</span> <span class="token string">''</span>    name <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>topic <span class="token operator">=</span> t    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫 %s，我是一个演说家，我演讲的主题是 %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#多继承</span><span class="token keyword">class</span> <span class="token class-name">sample</span><span class="token punctuation">(</span>speaker<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        student<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span>        speaker<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span> test <span class="token operator">=</span> sample<span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Python"</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span><span class="token comment"># 我叫 Tim，我是一个演说家，我演讲的主题是 Python</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>方法重写</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>        <span class="token comment"># 定义父类</span>   <span class="token keyword">def</span> <span class="token function">myMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'调用父类方法'</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义子类</span>   <span class="token keyword">def</span> <span class="token function">myMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'调用子类方法'</span><span class="token punctuation">)</span> c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 子类实例</span>c<span class="token punctuation">.</span>myMethod<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 子类调用重写方法</span><span class="token builtin">super</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>myMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#用子类对象调用父类已被覆盖的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>子类继承父类构造函数</strong></p></blockquote><ul><li><p>如果在子类中需要父类的构造方法就需要显式地调用父类的构造方法，或者不重写父类的构造方法。</p></li><li><p>子类不重写 <strong>__init__</strong>，实例化子类时，会自动调用父类定义的 <strong>__init__</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">"name: %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Father '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name <span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Son '</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    son<span class="token operator">=</span>Son<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> son<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment"># name: runoob</span><span class="token comment"># Son runoob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果重写了<strong>__init__</strong> 时，实例化子类，就不会调用父类已经定义的 <strong>__init__</strong>。如果重写了<strong>__init__</strong> 时，要继承父类的构造方法，可以使用 <strong>super</strong> 关键字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">"name: %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Father '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name <span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">"hi"</span> <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span>  name    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Son '</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    son<span class="token operator">=</span>Son<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> son<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment"># hi</span><span class="token comment"># Son runoob</span><span class="token builtin">super</span><span class="token punctuation">(</span>子类，self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment"># 建议使用</span>父类名称<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>参数<span class="token number">1</span>，参数<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Base.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Base<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Base<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        A<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        B<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C.__init__'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>Base<span class="token punctuation">.</span>__init__A<span class="token punctuation">.</span>__init__Base<span class="token punctuation">.</span>__init__  <span class="token comment"># 父类init调用两次</span>B<span class="token punctuation">.</span>__init__C<span class="token punctuation">.</span>__init__<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Base.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B.__init__'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Only one call to super() here</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C.__init__'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>Base<span class="token punctuation">.</span>__init__  <span class="token comment"># 父类init调用一次</span>B<span class="token punctuation">.</span>__init__A<span class="token punctuation">.</span>__init__C<span class="token punctuation">.</span>__init__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-类属性与方法"><a href="#5-类属性与方法" class="headerlink" title="5 类属性与方法"></a>5 类属性与方法</h2><ul><li><p>类的私有属性：<strong><code>__private_attrs</code></strong>，两个下划线开头，声明该属性为私有，<strong>不能在类的外部被使用或直接访问</strong>。在类内部的方法中使用时 self.__private_attrs。</p></li><li><p>类的方法：在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。<strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定使用 <strong>self</strong>。</p></li><li><p>类的私有方法：<strong><code>__private_method</code></strong>，两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。<strong>self.__private_methods</strong>。<strong>私有属性和方法通过继承无法被覆盖。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">class</span> <span class="token class-name">JustCounter</span><span class="token punctuation">:</span>    __secretCount <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 私有变量</span>    publicCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 公开变量</span>     <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__secretCount <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>publicCount <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__secretCount<span class="token punctuation">)</span> counter <span class="token operator">=</span> JustCounter<span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span>publicCount<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span>__secretCount<span class="token punctuation">)</span>  <span class="token comment"># 报错，实例不能访问私有变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类的专有方法</p><ul><li><strong><code>__init__</code>:</strong> 构造函数，在生成对象时调用</li><li><strong><code>__del__</code> :</strong> 析构函数，释放对象时使用</li><li><strong><code>__repr__</code> :</strong> 打印，转换</li><li><strong><code>__setitem__</code> :</strong> 按照索引赋值</li><li><strong><code>__getitem__</code>:</strong> 按照索引获取值</li><li><strong><code>__len__</code>:</strong> 获得长度</li><li><strong><code>__cmp__</code>:</strong> 比较运算</li><li><strong><code>__call__</code>:</strong> 函数调用</li><li><strong><code>__add__</code>:</strong> 加运算</li><li><strong><code>__sub__</code>:</strong> 减运算</li><li><strong><code>__mul__</code>:</strong> 乘运算</li><li><strong><code>__truediv__</code>:</strong> 除运算</li><li><strong><code>__mod__</code>:</strong> 求余运算</li><li><strong><code>__pow__</code>:</strong> 乘方</li></ul></li><li><p>运算符重载</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>a <span class="token operator">=</span> a      self<span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'Vector (%d, %d)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">+</span> other<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">+</span> other<span class="token punctuation">.</span>b<span class="token punctuation">)</span> v1 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token comment"># Vector(7,8)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>属性修改</p><ul><li>直接修改</li><li>方法修改</li></ul></li></ul><h2 id="6-单方法的类转换为函数"><a href="#6-单方法的类转换为函数" class="headerlink" title="6 单方法的类转换为函数"></a>6 单方法的类转换为函数</h2><ul><li><p>除 <code>__init__()</code> 方法外只定义了一个方法的类,使用闭包来将该类转换成函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">class</span> <span class="token class-name">UrlTemplate</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>template <span class="token operator">=</span> template    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urlopen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>template<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Example use. Download stock data from yahoo</span>yahoo <span class="token operator">=</span> UrlTemplate<span class="token punctuation">(</span><span class="token string">'http://finance.yahoo.com/d/quotes.csv?s={names}&amp;f={fields}'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> yahoo<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>names<span class="token operator">=</span><span class="token string">'IBM,AAPL,FB'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'sl1c1v'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 函数替代 </span><span class="token keyword">def</span> <span class="token function">urltemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">opener</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urlopen<span class="token punctuation">(</span>template<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> opener<span class="token comment"># Example use</span>yahoo <span class="token operator">=</span> urltemplate<span class="token punctuation">(</span><span class="token string">'http://finance.yahoo.com/d/quotes.csv?s={names}&amp;f={fields}'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> yahoo<span class="token punctuation">(</span>names<span class="token operator">=</span><span class="token string">'IBM,AAPL,FB'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'sl1c1v'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-上下文管理协议"><a href="#7-上下文管理协议" class="headerlink" title="7 上下文管理协议"></a>7 上下文管理协议</h2><ul><li><p>实现 <code>__enter__()</code> 和 <code>__exit__()</code> 方法让对象支持上下文管理协议(<strong>with语句</strong>)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> socket<span class="token punctuation">,</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token keyword">class</span> <span class="token class-name">LazyConnection</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> address<span class="token punctuation">,</span> family<span class="token operator">=</span>AF_INET<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>address <span class="token operator">=</span> address        self<span class="token punctuation">.</span>family <span class="token operator">=</span> family        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> <span class="token builtin">type</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>sock <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already connected'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">(</span>self<span class="token punctuation">.</span>family<span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sock    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_ty<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> partialconn <span class="token operator">=</span> LazyConnection<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'www.python.org'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Connection closed</span><span class="token keyword">with</span> conn <span class="token keyword">as</span> s<span class="token punctuation">:</span>    <span class="token comment"># conn.__enter__() executes: connection open</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'GET /index.html HTTP/1.0\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'Host: www.python.org\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\r\n'</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>partial<span class="token punctuation">(</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># conn.__exit__() executes: connection closed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写上下文管理器的主要原理是你的代码会放到 <code>with</code> 语句块中执行。 当出现 <code>with</code> 语句的时候，对象的 <code>__enter__()</code> 方法被触发， 它返回的值(如果有的话)会被赋值给 <code>as</code> 声明的变量。然后，<code>with</code> 语句块里面的代码开始执行。 最后，<code>__exit__()</code> 方法被触发进行清理工作。</p></li><li><p>不管 <code>with</code> 代码块中发生什么，上面的控制流<strong>都会执行完</strong>，就算代码块中发生了异常也是一样的。 事实上，<code>__exit__()</code> 方法的三个参数包含了异常类型、异常值和追溯信息(如果有的话)。 <code>__exit__()</code> 方法能自己决定怎样利用这个异常信息，或者忽略它并返回一个None值。 如果 <code>__exit__()</code> 返回 <code>True</code> ，那么异常会被清空，就好像什么都没发生一样， <code>with</code> 语句后面的程序继续在正常执行。</p></li><li><p>上面的定义中一次只能允许一个socket连接，如果正在使用一个socket的时候又重复使用 <code>with</code> 语句， 就会产生异常。<code>self.connections = []</code>解决。</p></li></ul><h2 id="6-属性管理"><a href="#6-属性管理" class="headerlink" title="6 属性管理"></a>6 属性管理</h2><ul><li><p>使用装饰器给attribute增加除访问与修改之外的其他处理逻辑，比如类型检查或合法性验证。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_first_name <span class="token operator">=</span> first_name    <span class="token comment"># Getter function</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_first_name    <span class="token comment"># Setter function</span>    <span class="token decorator annotation punctuation">@first_name<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected a string'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_first_name <span class="token operator">=</span> value    <span class="token comment"># Deleter function (optional)</span>    <span class="token decorator annotation punctuation">@first_name<span class="token punctuation">.</span>deleter</span>    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">"Can't delete attribute"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Guido'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>first_name <span class="token comment"># Calls the getter</span><span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>first_name <span class="token operator">=</span> <span class="token number">42</span> <span class="token comment"># Calls the setter</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"prop.py"</span><span class="token punctuation">,</span> line <span class="token number">14</span><span class="token punctuation">,</span> <span class="token keyword">in</span> first_name        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected a string'</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Expected a string<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> a<span class="token punctuation">.</span>first_nameTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AttributeError<span class="token punctuation">:</span> can`t delete attribute<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这三个方法的<strong>名字都必须一样</strong>。 第一个方法是一个 <code>getter</code> 函数，它使得 <code>first_name</code> 成为一个属性。 其他两个方法给 <code>first_name</code> 属性添加了 <code>setter</code> 和 <code>deleter</code> 函数。 需要强调的是只有在 <code>first_name</code> 属性被创建后， 后面的两个装饰器 <code>@first_name.setter</code> 和 <code>@first_name.deleter</code> 才能被定义。</li><li>访问该属性的时候会自动触发 <code>getter</code> 、<code>setter</code> 和 <code>deleter</code> 方法。</li></ol></li><li><p>在已存在的get和set方法基础上定义property</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>set_first_name<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span>    <span class="token comment"># Getter function</span>    <span class="token keyword">def</span> <span class="token function">get_first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_first_name    <span class="token comment"># Setter function</span>    <span class="token keyword">def</span> <span class="token function">set_first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected a string'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_first_name <span class="token operator">=</span> value    <span class="token comment"># Deleter function (optional)</span>    <span class="token keyword">def</span> <span class="token function">del_first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">"Can't delete attribute"</span><span class="token punctuation">)</span>    <span class="token comment"># Make a property from existing get/set methods</span>    name <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>get_first_name<span class="token punctuation">,</span> set_first_name<span class="token punctuation">,</span> del_first_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-描述器"><a href="#7-描述器" class="headerlink" title="7 描述器"></a>7 描述器</h2><ul><li><p>使用描述器创建一个新的拥有一些额外功能的实例属性类型，比如类型检查</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Descriptor attribute for an integer type-checked attribute</span><span class="token keyword">class</span> <span class="token class-name">Integer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected an int'</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个描述器就是一个实现了三个核心的属性访问操作(get, set, delete)的类， 分别为 <code>__get__()</code> 、<code>__set__()</code> 和 <code>__delete__()</code> 这三个特殊的方法。 这些方法接受一个实例作为输入，之后相应的操作实例底层的字典。</p></li><li><p>使用一个描述器，需将这个描述器的实例作为<strong>类属性</strong>放到一个类的定义中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> Integer<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> Integer<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>x <span class="token comment"># Calls Point.x.__get__(p,Point)</span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment"># Calls Point.y.__set__(p, 5)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2.3</span> <span class="token comment"># Calls Point.x.__set__(p, 2.3)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"descrip.py"</span><span class="token punctuation">,</span> line <span class="token number">12</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected an int'</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Expected an <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>描述器只能在类级别被定义，而不能为每个实例单独定义。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Does NOT work</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> Integer<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token comment"># No! Must be a class variable</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> Integer<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-延迟属性"><a href="#8-延迟属性" class="headerlink" title="8 延迟属性"></a>8 延迟属性</h2><ul><li><p>使用描述器将一个只读属性定义成一个property，并且只在访问的时候才会计算结果。 被访问后将结果值被缓存起来，不用每次计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">lazyproperty</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self        <span class="token keyword">else</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> self<span class="token punctuation">.</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> value<span class="token keyword">import</span> math<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius    <span class="token decorator annotation punctuation">@lazyproperty</span>    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Computing area'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>    <span class="token decorator annotation punctuation">@lazyproperty</span>    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Computing perimeter'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>radius<span class="token number">4.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>areaComputing area<span class="token number">50.26548245743669</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>area<span class="token number">50.26548245743669</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>perimeterComputing perimeter<span class="token number">25.132741228718345</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>perimeter<span class="token number">25.132741228718345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个描述器仅仅只定义了一个 <code>__get__()</code> 方法的话，它比通常的具有更弱的绑定。 特别地，只有当被访问属性不在实例底层的字典中时 <code>__get__()</code> 方法才会被触发。</p></li><li><p>上述方案计算出的值被创建后是可以被修改的。</p></li><li><p>解决</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lazyproperty</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'_lazy_'</span> <span class="token operator">+</span> func<span class="token punctuation">.</span>__name__    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">lazy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> func<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> value    <span class="token keyword">return</span> lazy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有get操作都必须被定向到属性的 <code>getter</code> 函数上去。效率更低。</p></li></ul><h2 id="9-抽象类"><a href="#9-抽象类" class="headerlink" title="9 抽象类"></a>9 抽象类</h2><ul><li><p>使用 <code>abc</code> 模块定义抽象基类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">IStream</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maxbytes<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SocketStream</span><span class="token punctuation">(</span>IStream<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maxbytes<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象基类的一个主要用途是在代码中检查某些类是否为特定类型，实现了特定接口</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> IStream<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected an IStream'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过注册方式来让某个类实现抽象基类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token comment"># Register the built-in I/O classes as supporting our interface</span>IStream<span class="token punctuation">.</span>register<span class="token punctuation">(</span>io<span class="token punctuation">.</span>IOBase<span class="token punctuation">)</span><span class="token comment"># Open a normal file and type check</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> IStream<span class="token punctuation">)</span> <span class="token comment"># Returns True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@abstractmethod</code> 还能注解静态方法、类方法和 <code>properties</code> 。 你只需保证这个注解紧靠在函数定义前即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>setter</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10-属性约束"><a href="#10-属性约束" class="headerlink" title="10 属性约束"></a>10 属性约束</h2><ul><li><p><strong>使用描述器实现系统类型和赋值验证框架</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#=======基础构建模块============</span><span class="token comment"># Base class. Uses a descriptor to set a value</span><span class="token keyword">class</span> <span class="token class-name">Descriptor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> opts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token comment"># Descriptor for enforcing types</span><span class="token keyword">class</span> <span class="token class-name">Typed</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    expected_type <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> self<span class="token punctuation">.</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'expected '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token comment"># Descriptor for enforcing values</span><span class="token keyword">class</span> <span class="token class-name">Unsigned</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Expected &gt;= 0'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MaxSized</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'size'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> opts<span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'missing size option'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'size must be &lt; '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token comment">#========实际定义的各种不同的数据类型=========</span><span class="token keyword">class</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>Typed<span class="token punctuation">)</span><span class="token punctuation">:</span>    expected_type <span class="token operator">=</span> <span class="token builtin">int</span><span class="token keyword">class</span> <span class="token class-name">UnsignedInteger</span><span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> Unsigned<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Float</span><span class="token punctuation">(</span>Typed<span class="token punctuation">)</span><span class="token punctuation">:</span>    expected_type <span class="token operator">=</span> <span class="token builtin">float</span><span class="token keyword">class</span> <span class="token class-name">UnsignedFloat</span><span class="token punctuation">(</span>Float<span class="token punctuation">,</span> Unsigned<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Typed<span class="token punctuation">)</span><span class="token punctuation">:</span>    expected_type <span class="token operator">=</span> <span class="token builtin">str</span><span class="token keyword">class</span> <span class="token class-name">SizedString</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> MaxSized<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment">#=======使用自定义数据类型============</span><span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">:</span>    <span class="token comment"># Specify constraints</span>    name <span class="token operator">=</span> SizedString<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    shares <span class="token operator">=</span> UnsignedInteger<span class="token punctuation">(</span><span class="token string">'shares'</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> UnsignedFloat<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> shares<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>shares <span class="token operator">=</span> shares        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>name<span class="token string">'ACME'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>shares <span class="token operator">=</span> <span class="token number">75</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>shares <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">17</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">23</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Expected &gt;= 0'</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> Expected <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token string">'a lot'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'expected '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> expected <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ABRACADABRA'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">17</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">35</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __set__        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'size must be &lt; '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> size must be <span class="token operator">&lt;</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用类装饰器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Class decorator to apply constraints</span><span class="token keyword">def</span> <span class="token function">check_attributes</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorate</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>                value<span class="token punctuation">.</span>name <span class="token operator">=</span> key                <span class="token builtin">setattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token builtin">setattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cls    <span class="token keyword">return</span> decorate<span class="token comment"># Example</span><span class="token decorator annotation punctuation">@check_attributes</span><span class="token punctuation">(</span>name<span class="token operator">=</span>SizedString<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  shares<span class="token operator">=</span>UnsignedInteger<span class="token punctuation">,</span>                  price<span class="token operator">=</span>UnsignedFloat<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> shares<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>shares <span class="token operator">=</span> shares        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用元类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># A metaclass that applies checking</span><span class="token keyword">class</span> <span class="token class-name">checkedmeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> clsname<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> methods<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Attach attribute names to the descriptors</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> methods<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>                value<span class="token punctuation">.</span>name <span class="token operator">=</span> key        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> clsname<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> methods<span class="token punctuation">)</span><span class="token comment"># Example</span><span class="token keyword">class</span> <span class="token class-name">Stock2</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>checkedmeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> SizedString<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    shares <span class="token operator">=</span> UnsignedInteger<span class="token punctuation">(</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> UnsignedFloat<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> shares<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>shares <span class="token operator">=</span> shares        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类装饰器方案应该是最灵活和最高明的</p></li><li><p>装饰器还能作为混入类的替代技术</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Decorator for applying type checking</span><span class="token keyword">def</span> <span class="token function">Typed</span><span class="token punctuation">(</span>expected_type<span class="token punctuation">,</span> cls<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cls <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> cls<span class="token punctuation">:</span> Typed<span class="token punctuation">(</span>expected_type<span class="token punctuation">,</span> cls<span class="token punctuation">)</span>    super_set <span class="token operator">=</span> cls<span class="token punctuation">.</span>__set__    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> expected_type<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'expected '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>expected_type<span class="token punctuation">)</span><span class="token punctuation">)</span>        super_set<span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    cls<span class="token punctuation">.</span>__set__ <span class="token operator">=</span> __set__    <span class="token keyword">return</span> cls<span class="token comment"># Decorator for unsigned values</span><span class="token keyword">def</span> <span class="token function">Unsigned</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    super_set <span class="token operator">=</span> cls<span class="token punctuation">.</span>__set__    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Expected &gt;= 0'</span><span class="token punctuation">)</span>        super_set<span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    cls<span class="token punctuation">.</span>__set__ <span class="token operator">=</span> __set__    <span class="token keyword">return</span> cls<span class="token comment"># Decorator for allowing sized values</span><span class="token keyword">def</span> <span class="token function">MaxSized</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    super_init <span class="token operator">=</span> cls<span class="token punctuation">.</span>__init__    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'size'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> opts<span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'missing size option'</span><span class="token punctuation">)</span>        super_init<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">)</span>    cls<span class="token punctuation">.</span>__init__ <span class="token operator">=</span> __init__    super_set <span class="token operator">=</span> cls<span class="token punctuation">.</span>__set__    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'size must be &lt; '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        super_set<span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    cls<span class="token punctuation">.</span>__set__ <span class="token operator">=</span> __set__    <span class="token keyword">return</span> cls<span class="token comment"># Specialized descriptors</span><span class="token decorator annotation punctuation">@Typed</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@Unsigned</span><span class="token keyword">class</span> <span class="token class-name">UnsignedInteger</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@Typed</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Float</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@Unsigned</span><span class="token keyword">class</span> <span class="token class-name">UnsignedFloat</span><span class="token punctuation">(</span>Float<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@Typed</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Descriptor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@MaxSized</span><span class="token keyword">class</span> <span class="token class-name">SizedString</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="11-状态类"><a href="#11-状态类" class="headerlink" title="11 状态类"></a>11 状态类</h2><p>在不同状态下执行操作—》<strong>为每个状态定义一个对象</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Connection</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""普通方案，好多个判断语句，效率低下~~"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'CLOSED'</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token string">'OPEN'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Not open'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'reading'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token string">'OPEN'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Not open'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'writing'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'OPEN'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already open'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'OPEN'</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'CLOSED'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already closed'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'CLOSED'</span>        <span class="token keyword">class</span> <span class="token class-name">Connection1</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""新方案——对每个状态定义一个类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>new_state<span class="token punctuation">(</span>ClosedConnectionState<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> newstate<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> newstate        <span class="token comment"># Delegate to the state class</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>close<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment"># Connection state base class</span><span class="token keyword">class</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Implementation of different states</span><span class="token keyword">class</span> <span class="token class-name">ClosedConnectionState</span><span class="token punctuation">(</span>ConnectionState<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Not open'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Not open'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>new_state<span class="token punctuation">(</span>OpenConnectionState<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already closed'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OpenConnectionState</span><span class="token punctuation">(</span>ConnectionState<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'reading'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'writing'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Already open'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>new_state<span class="token punctuation">(</span>ClosedConnectionState<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> Connection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>_state<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.ClosedConnectionState'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> read        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    File <span class="token string">"example.py"</span><span class="token punctuation">,</span> line <span class="token number">43</span><span class="token punctuation">,</span> <span class="token keyword">in</span> read        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Not open'</span><span class="token punctuation">)</span>RuntimeError<span class="token punctuation">:</span> Not <span class="token builtin">open</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>_state<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.OpenConnectionState'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>reading<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>writing<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>_state<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.ClosedConnectionState'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-比较类"><a href="#12-比较类" class="headerlink" title="12 比较类"></a>12 比较类</h2><ul><li><p>装饰器 <code>functools.total_ordering</code> 来装饰一个类，你只需定义一个 <code>__eq__()</code> 方法， 外加其他方法(<code>__lt__, __le__, __gt__, or __ge__</code>)中的一个即可。 然后装饰器会自动为你填充其它比较方法。</p></li><li><p>比较房子大小</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> total_ordering<span class="token keyword">class</span> <span class="token class-name">Room</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> length<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width        self<span class="token punctuation">.</span>square_feet <span class="token operator">=</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>width<span class="token decorator annotation punctuation">@total_ordering</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>style <span class="token operator">=</span> style        self<span class="token punctuation">.</span>rooms <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">living_space_footage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>square_feet <span class="token keyword">for</span> r <span class="token keyword">in</span> self<span class="token punctuation">.</span>rooms<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_room</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> room<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>rooms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>room<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'{}: {} square foot {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                self<span class="token punctuation">.</span>living_space_footage<span class="token punctuation">,</span>                self<span class="token punctuation">.</span>style<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>living_space_footage <span class="token operator">==</span> other<span class="token punctuation">.</span>living_space_footage    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>living_space_footage <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>living_space_footage    <span class="token comment"># Build a few houses, and add rooms to them</span>h1 <span class="token operator">=</span> House<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'Cape'</span><span class="token punctuation">)</span>h1<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Master Bedroom'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h1<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Living Room'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h1<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Kitchen'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h1<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Office'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h2 <span class="token operator">=</span> House<span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token string">'Ranch'</span><span class="token punctuation">)</span>h2<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Master Bedroom'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h2<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Living Room'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h2<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Kitchen'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h3 <span class="token operator">=</span> House<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token string">'Split'</span><span class="token punctuation">)</span>h3<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Master Bedroom'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h3<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Living Room'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h3<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Office'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h3<span class="token punctuation">.</span>add_room<span class="token punctuation">(</span>Room<span class="token punctuation">(</span><span class="token string">'Kitchen'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>houses <span class="token operator">=</span> <span class="token punctuation">[</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Is h1 bigger than h2?'</span><span class="token punctuation">,</span> h1 <span class="token operator">&gt;</span> h2<span class="token punctuation">)</span> <span class="token comment"># prints True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Is h2 smaller than h3?'</span><span class="token punctuation">,</span> h2 <span class="token operator">&lt;</span> h3<span class="token punctuation">)</span> <span class="token comment"># prints True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Is h2 greater than or equal to h1?'</span><span class="token punctuation">,</span> h2 <span class="token operator">&gt;=</span> h1<span class="token punctuation">)</span> <span class="token comment"># Prints False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Which one is biggest?'</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>houses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Prints 'h3: 1101-square-foot Split'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Which is smallest?'</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>houses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Prints 'h2: 846-square-foot Ranch'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习21-XML解析</title>
      <link href="/2024/07/10/python-xue-xi-21-xml-jie-xi/"/>
      <url>/2024/07/10/python-xue-xi-21-xml-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h1><ul><li>XML 指可扩展标记语言（eXtensible Markup Language），标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。 </li><li>XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。用于传输和存储数据。</li><li>常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。</li><li>Python 有三种方法解析 XML<ul><li><strong>ElementTree</strong>：标准库。</li><li><strong>SAX </strong>：事件驱动模型，通过在解析 XML 的过程中触发一个个的事件并调用用户定义的回调函数来处理 XML 文件。</li><li><strong>DOM</strong>：将 XML 数据在内存中解析成一个树，通过对树的操作来操作 XML。</li></ul></li></ul><h2 id="1-ElementTree-解析-xml"><a href="#1-ElementTree-解析-xml" class="headerlink" title="1 ElementTree 解析 xml"></a>1 ElementTree 解析 xml</h2><ul><li><strong>ElementTree</strong>： ElementTree 类是 XML 文档的<strong>树形表示</strong>。它包含一个或多个 Element 对象，代表整个 XML 文档。</li><li><strong>Element</strong>： Element 对象是 <strong>XML 文档中元素的表示</strong>。每个元素都有<em>一个标签、一组属性和零个或多个子元素</em>。</li></ul><blockquote><p><strong>解析 XML</strong></p></blockquote><ul><li><p><strong><code>fromstring()</code></strong>： 将包含XML数据的字符串转换为 Element 对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ETxml_string <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;bookstore&gt;    &lt;book&gt;        &lt;title&gt;Introduction to Python&lt;/title&gt;        &lt;author&gt;John Doe&lt;/author&gt;        &lt;price&gt;29.99&lt;/price&gt;    &lt;/book&gt;    &lt;book&gt;        &lt;title&gt;Data Science with Python&lt;/title&gt;        &lt;author&gt;Jane Smith&lt;/author&gt;        &lt;price&gt;39.95&lt;/price&gt;    &lt;/book&gt;&lt;/bookstore&gt;'''</span>root <span class="token operator">=</span> ET<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>xml_string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>parse()</code></strong>： 解析 XML 文档</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'example.xml'</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>遍历 XML 树</strong></p></blockquote><ul><li><p><strong><code>find()</code></strong>：查找具有指定标签的第一个子元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">title_element <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong><code>findall()</code></strong>：查找具有指定标签的所有子元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">book_elements <span class="token operator">=</span> root<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'book'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p><strong>访问元素的属性和文本内容</strong></p></blockquote><ul><li><p><strong><code>attrib</code></strong>：元素属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">price <span class="token operator">=</span> book_element<span class="token punctuation">.</span>attrib<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong><code>text</code></strong>：元素的文本内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">title_text <span class="token operator">=</span> title_element<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p><strong>创建 XML</strong></p></blockquote><ul><li><p><strong><code>Element()</code></strong>：构造函数，创建元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">new_element <span class="token operator">=</span> ET<span class="token punctuation">.</span>Element<span class="token punctuation">(</span><span class="token string">'new_element'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong><code>SubElement()</code></strong> ：创建具有指定标签的子元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">new_sub_element <span class="token operator">=</span> ET<span class="token punctuation">.</span>SubElement<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">'new_sub_element'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p><strong>修改 XML</strong></p></blockquote><ul><li><p>修改元素的属性和文本内容： 直接修改元素的 attrib 和 text 属性。</p></li><li><p><strong><code>remove()</code></strong> ：删除元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">root<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>title_element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p><strong>字典转XML</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">import</span> Element<span class="token keyword">def</span> <span class="token function">dict_to_xml</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Turn a simple dict of key/value pairs into XML    '''</span>    elem <span class="token operator">=</span> Element<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        child <span class="token operator">=</span> Element<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        child<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        elem<span class="token punctuation">.</span>append<span class="token punctuation">(</span>child<span class="token punctuation">)</span>    <span class="token keyword">return</span> elem<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'GOOG'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">490.1</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> e <span class="token operator">=</span> dict_to_xml<span class="token punctuation">(</span><span class="token string">'stock'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> e<span class="token operator">&lt;</span>Element <span class="token string">'stock'</span> at <span class="token number">0x1004b64c8</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给某个元素添加属性值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> e<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'_id'</span><span class="token punctuation">,</span><span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tostring<span class="token punctuation">(</span>e<span class="token punctuation">)</span>b'<span class="token operator">&lt;</span>stock _id<span class="token operator">=</span><span class="token string">"1234"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>price<span class="token operator">&gt;</span><span class="token number">490.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>price<span class="token operator">&gt;</span><span class="token operator">&lt;</span>shares<span class="token operator">&gt;</span><span class="token number">100</span><span class="token operator">&lt;</span><span class="token operator">/</span>shares<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>GOOG<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>stock<span class="token operator">&gt;</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>保存xml</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">import</span> parse<span class="token punctuation">,</span> Element<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> doc <span class="token operator">=</span> parse<span class="token punctuation">(</span><span class="token string">'pred.xml'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Write back to a file</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> doc<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'newpred.xml'</span><span class="token punctuation">,</span> xml_declaration<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-SAX-解析-xml"><a href="#2-SAX-解析-xml" class="headerlink" title="2 SAX 解析 xml"></a>2 SAX 解析 xml</h2><ul><li>两部分： <strong>解析器</strong>和<strong>事件处理器</strong><ul><li>解析器负责读取 XML 文档，并向事件处理器发送事件，如元素开始跟元素结束事件</li><li>事件处理器则负责对事件作出响应，对传递的 XML 数据进行处理<ul><li>对大型文件进行处理；</li><li>只需要文件的部分内容，或者只需从文件中得到特定信息。</li><li>想建立自己的对象模型的时候。</li></ul></li></ul></li><li>在 Python 中使用 sax 方式处理 xml 要先引入 xml.sax 中的 parse 函数，还有xml.sax.handler 中的 ContentHandler。</li><li><a href="https://docs.python.org/library/xml.sax.html">Python SAX APIs</a></li></ul><h2 id="3-DOM解析xml"><a href="#3-DOM解析xml" class="headerlink" title="3 DOM解析xml"></a>3 DOM解析xml</h2><ul><li>DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把文档中所有元素保存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函数来读取或修改文档的内容和结构，也可以把修改过的内容写入xml文件。</li><li><a href="http://docs.python.org/library/xml.dom.html">Python DOM APIs</a></li></ul><h2 id="4-增量解析"><a href="#4-增量解析" class="headerlink" title="4 增量解析"></a>4 增量解析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">import</span> iterparse<span class="token keyword">def</span> <span class="token function">parse_and_remove</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    path_parts <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    doc <span class="token operator">=</span> iterparse<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Skip the root element</span>    <span class="token builtin">next</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    tag_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    elem_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> event<span class="token punctuation">,</span> elem <span class="token keyword">in</span> doc<span class="token punctuation">:</span>        <span class="token keyword">if</span> event <span class="token operator">==</span> <span class="token string">'start'</span><span class="token punctuation">:</span>            tag_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>            elem_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>        <span class="token keyword">elif</span> event <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> tag_stack <span class="token operator">==</span> path_parts<span class="token punctuation">:</span>                <span class="token keyword">yield</span> elem                elem_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>   <span class="token comment"># 删除元素</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                tag_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                elem_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>                <span class="token keyword">pass</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterpotholes_by_zip <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> parse_and_remove<span class="token punctuation">(</span><span class="token string">'potholes.xml'</span><span class="token punctuation">,</span> <span class="token string">'row/row'</span><span class="token punctuation">)</span><span class="token keyword">for</span> pothole <span class="token keyword">in</span> data<span class="token punctuation">:</span>    potholes_by_zip<span class="token punctuation">[</span>pothole<span class="token punctuation">.</span>findtext<span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> zipcode<span class="token punctuation">,</span> num <span class="token keyword">in</span> potholes_by_zip<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>zipcode<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>iterparse()</code> 方法允许对XML文档进行增量操作，需要提供文件名和一个包含下面一种或多种类型的事件列表： <code>start</code> , <code>end</code>, <code>start-ns</code> 和 <code>end-ns</code> 。 由 <code>iterparse()</code> 创建的迭代器会产生形如 <code>(event, elem)</code> 的元组， 其中 <code>event</code> 是上述事件列表中的某一个，而 <code>elem</code> 是相应的XML元素。</p><ul><li><code>start</code> 事件在某个元素第一次被创建并且还没有被插入其他数据(如子元素)时被创建。 </li><li><code>end</code> 事件在某个元素已经完成时被创建。</li><li><code>start-ns</code> 和 <code>end-ns</code> 事件被用来处理XML文档命名空间的声明。</li></ul><p>该方法内存占用低，但速度慢。</p><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习20-文件</title>
      <link href="/2024/07/09/python-xue-xi-20-wen-jian/"/>
      <url>/2024/07/09/python-xue-xi-20-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1 打开文件"></a>1 打开文件</h2><ul><li><p><code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code>：打开一个文件，并返回文件对象，如果该文件无法被打开，会抛出 <strong>OSError</strong>。</p><ul><li>file：必需，文件路径（相对或者绝对路径）。</li><li>mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li></ul></li><li><p>文件打开模式</p><p>| 模式 | 描述                                                         |<br>| :—- | :—————————————————————————————- |<br>| t    | 文本模式 (默认)。                                            |<br>| x    | 写模式，新建一个文件，如果该文件已存在则会报错。不允许覆盖已存在的文件内容 |<br>| b    | 二进制模式。                                                 |<br>| +    | 打开一个文件进行更新(可读可写)。                             |<br>| U    | 通用换行模式（<strong>Python 3 不支持</strong>）。                        |<br>| r    | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |<br>| rb   | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。 |<br>| r+   | 打开一个文件用于读写。文件指针将会放在文件的开头。           |<br>| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 |<br>| w    | 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |<br>| wb   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |<br>| w+   | 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |<br>| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |<br>| a    | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |<br>| ab   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |<br>| a+   | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |<br>| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 |</p></li><li><p>使用 <strong>open()</strong> 方法一定要保证关闭文件对象，即调用 <strong>close()</strong> 方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">############################</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pi_digits.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>  contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关键字with在不再需要访问文件后将其关闭，无需手动关闭file</p></li><li><p><code>print()</code> 函数的输出重定向到文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'d:/work/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span> <span class="token comment"># 文件必须是以文本模式打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="2-文件对象的方法"><a href="#2-文件对象的方法" class="headerlink" title="2 文件对象的方法"></a>2 文件对象的方法</h2><ul><li><p><strong><code>f.read([,size])</code></strong>：读取一个文件的内容，当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Python 是一个非常好的语言。是的，的确非常好!!'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>f.readline()</code></strong>：从文件中读取单独的一行。换行符为 ‘\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Python 是一个非常好的语言。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>f.readlines([,sizehint])</code></strong>：以列表形式返回该文件中包含的所有行。sizehint指定长度的字节, 并且将这些字节按行分割。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['Python 是一个非常好的语言。\n', '是的，的确非常好!!\n']'''</span><span class="token comment"># 迭代一个文件对象然后读取每行</span><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Python 是一个非常好的语言。是的，的确非常好!!'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>f.write(string)</code></strong>：将 string 写入到文件中, 然后返回写入的字符数。非字符串内容需要先转换成字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''29'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>file.writelines(sequence)</code></strong>：向文件中写入一序列的字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开文件</span>fo <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"菜鸟教程 1\n"</span><span class="token punctuation">,</span> <span class="token string">"菜鸟教程 2"</span><span class="token punctuation">]</span>fo<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span> seq <span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><strong><code>f.tell()</code></strong>：返回文件当前的读/写位置（即文件指针的位置）。文件指针表示从文件开头开始的字节数偏移量。f.tell() 返回一个整数，表示文件指针的当前位置。</p></li><li><p><strong><code>file.truncate([size])</code></strong>：从文件的首行首字节开始截断，截断文件为 size 个字节，无 size 表示从当前位置截断；截断之后 V 后面的所有字节被删除，其中 Widnows 系统下的换行代表2个字节大小。</p></li><li><p><strong><code>f.seek(offset, from_what)</code></strong>：改变文件指针当前的位置，from_what 值为默认为0，即文件开头。</p><ul><li><p>seek(x,0) ： 从<strong>起始位置</strong>即文件首行首字符开始移动 x 个字符</p></li><li><p>seek(x,1) ： 表示从<strong>当前位置</strong>往后移动x个字符</p></li><li><p>seek(-x,2)：表示从<strong>文件的结尾</strong>往前移动x个字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/tmp/foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb+'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'0123456789abcdef'</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>     <span class="token comment"># 移动到文件的第六个字节</span><span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">b'5'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 移动到文件的倒数第三字节</span><span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">b'd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>file.flush()</code></strong>：刷新缓冲区，将缓冲区中的数据立刻写入文件，同时清空缓冲区</p></li><li><p><strong><code>f.close()</code></strong>：关闭文件，释放系统的资源</p></li></ul><h2 id="3-数据序列和反序列化"><a href="#3-数据序列和反序列化" class="headerlink" title="3 数据序列和反序列化"></a>3 数据序列和反序列化</h2><ul><li><p><code>pickle</code>模块实现了基本的数据序列和反序列化</p><ul><li>序列化操作能够将程序中运行的对象信息保存到文件中去，永久存储.</li><li>反序列化操作从文件中创建上一次程序保存的对象</li></ul></li><li><p><code>pickle.dump(obj, file, [,protocol])</code>:将一个对象保存到一个文件</p></li><li><p><code>s=pickle.dumps(obj)</code>：将一个对象转储为一个字符串</p></li><li><p><code>x = pickle.load(file)</code>：从 file 中读取一个字符串，并将它重构为原来的python对象</p></li><li><p><code>x=pickle.loads(s)</code>：将字符串重构为python对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token comment"># 使用pickle模块将数据对象保存到文件</span>data1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">6j</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">u'Unicode string'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>selfref_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>selfref_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>selfref_list<span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># Pickle dictionary using protocol 0.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token comment"># Pickle the list using the highest protocol available.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>selfref_list<span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> pprint<span class="token punctuation">,</span> pickle<span class="token comment">#使用pickle模块从文件中重构python对象</span>pkl_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>pkl_file<span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>data1<span class="token punctuation">)</span>data2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>pkl_file<span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>data2<span class="token punctuation">)</span>pkl_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>pickle</code> 是一种Python特有的自描述的数据编码。 通过自描述，被序列化后的数据包含每个对象开始和结束以及它的类型信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pickle<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somedata'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Pear'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somedata'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token string">'hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Pear'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><blockquote><p>千万不要对不信任的数据使用pickle.load()。<br>pickle在加载时有一个副作用就是它会<strong>自动加载相应模块并构造实例对象</strong>。<br>但是某个坏人如果知道pickle的工作原理，<br>他就可以创建一个恶意的数据导致Python执行随意指定的系统命令。<br>因此，一定要保证pickle只在相互之间可以认证对方的解析器的内部使用。</p></blockquote></li><li><p>有些类型的对象是不能被序列化的。这些通常是那些依赖外部系统状态的对象， 比如打开的文件，网络连接，线程，进程，栈帧等等。</p></li><li><p>用户自定义类可以通过提供 <code>__getstate__()</code> 和 <code>__setstate__()</code> 方法来绕过这些限制。 如果定义了这两个方法，<code>pickle.dump()</code> 就会调用 <code>__getstate__()</code> 获取序列化的对象。 类似的，<code>__setstate__()</code> 在反序列化时被调用。</p></li></ul><h2 id="4-文件-目录方法"><a href="#4-文件-目录方法" class="headerlink" title="4  文件/目录方法"></a>4  文件/目录方法</h2><blockquote><p><strong>OS模块</strong></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法及描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-access.html">os.access(path, mode)</a> 检验权限模式</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-chdir.html">os.chdir(path)</a> 改变当前工作目录</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-chflags.html">os.chflags(path, flags)</a> 设置路径的标记为数字标记。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-chmod.html">os.chmod(path, mode)</a> 更改权限</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-chown.html">os.chown(path, uid, gid)</a> 更改文件所有者</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-chroot.html">os.chroot(path)</a> 改变当前进程的根目录</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-close.html">os.close(fd)</a> 关闭文件描述符 fd</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-closerange.html">os.closerange(fd_low, fd_high)</a> 关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-dup.html">os.dup(fd)</a> 复制文件描述符 fd</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-dup2.html">os.dup2(fd, fd2)</a> 将一个文件描述符 fd 复制到另一个 fd2</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fchdir.html">os.fchdir(fd)</a> 通过文件描述符改变当前工作目录</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fchmod.html">os.fchmod(fd, mode)</a> 改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fchown.html">os.fchown(fd, uid, gid)</a> 修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fdatasync.html">os.fdatasync(fd)</a> 强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fdopen.html">os.fdopen(fd[, mode[, bufsize]])</a> 通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fpathconf.html">os.fpathconf(fd, name)</a> 返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fstat.html">os.fstat(fd)</a> 返回文件描述符fd的状态，像stat()。</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fstatvfs.html">os.fstatvfs(fd)</a> 返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-fsync.html">os.fsync(fd)</a> 强制将文件描述符为fd的文件写入硬盘。</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-ftruncate.html">os.ftruncate(fd, length)</a> 裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-getcwd.html">os.getcwd()</a> 返回当前工作目录</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-getcwdb.html">os.getcwdb()</a> 返回一个当前工作目录的Unicode对象</td></tr><tr><td style="text-align:left">23</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-isatty.html">os.isatty(fd)</a> 如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-lchflags.html">os.lchflags(path, flags)</a> 设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td></tr><tr><td style="text-align:left">25</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-lchmod.html">os.lchmod(path, mode)</a> 修改连接文件权限</td></tr><tr><td style="text-align:left">26</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-lchown.html">os.lchown(path, uid, gid)</a> 更改文件所有者，类似 chown，但是不追踪链接。</td></tr><tr><td style="text-align:left">27</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-link.html">os.link(src, dst)</a> 创建硬链接，名为参数 dst，指向参数 src</td></tr><tr><td style="text-align:left">28</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-listdir.html">os.listdir(path)</a> 返回path指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td style="text-align:left">29</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-lseek.html">os.lseek(fd, pos, how)</a> 设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-lstat.html">os.lstat(path)</a> 像stat(),但是没有软链接</td></tr><tr><td style="text-align:left">31</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-major.html">os.major(device)</a> 从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td></tr><tr><td style="text-align:left">32</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-makedev.html">os.makedev(major, minor)</a> 以major和minor设备号组成一个原始设备号</td></tr><tr><td style="text-align:left">33</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-makedirs.html">os.makedirs(path[, mode])</a> 递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td></tr><tr><td style="text-align:left">34</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-minor.html">os.minor(device)</a> 从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td></tr><tr><td style="text-align:left">35</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-mkdir.html">os.mkdir(path[, mode])</a> 以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td></tr><tr><td style="text-align:left">36</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-mkfifo.html">os.mkfifo(path[, mode])</a> 创建命名管道，mode 为数字，默认为 0666 (八进制)</td></tr><tr><td style="text-align:left">37</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-mknod.html">os.mknod(filename[, mode=0600, device])</a> 创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</td></tr><tr><td style="text-align:left">38</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-open.html">os.open(file, flags[, mode])</a> 打开一个文件，并且设置需要的打开选项，mode参数是可选的</td></tr><tr><td style="text-align:left">39</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-openpty.html">os.openpty()</a> 打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td></tr><tr><td style="text-align:left">40</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-pathconf.html">os.pathconf(path, name)</a> 返回相关文件的系统配置信息。</td></tr><tr><td style="text-align:left">41</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-pipe.html">os.pipe()</a> 创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td></tr><tr><td style="text-align:left">42</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-popen.html">os.popen(command[, mode[, bufsize]])</a> 从一个 command 打开一个管道</td></tr><tr><td style="text-align:left">43</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-read.html">os.read(fd, n)</a> 从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td></tr><tr><td style="text-align:left">44</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-readlink.html">os.readlink(path)</a> 返回软链接所指向的文件</td></tr><tr><td style="text-align:left">45</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-remove.html">os.remove(path)</a> 删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td></tr><tr><td style="text-align:left">46</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-removedirs.html">os.removedirs(path)</a> 递归删除目录。</td></tr><tr><td style="text-align:left">47</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-rename.html">os.rename(src, dst)</a> 重命名文件或目录，从 src 到 dst</td></tr><tr><td style="text-align:left">48</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-renames.html">os.renames(old, new)</a> 递归地对目录进行更名，也可以对文件进行更名。</td></tr><tr><td style="text-align:left">49</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-rmdir.html">os.rmdir(path)</a> 删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td></tr><tr><td style="text-align:left">50</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-stat.html">os.stat(path)</a> 获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td></tr><tr><td style="text-align:left">51</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-stat_float_times.html">os.stat_float_times([newvalue])</a> 决定stat_result是否以float对象显示时间戳</td></tr><tr><td style="text-align:left">52</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-statvfs.html">os.statvfs(path)</a> 获取指定路径的文件系统统计信息</td></tr><tr><td style="text-align:left">53</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-symlink.html">os.symlink(src, dst)</a> 创建一个软链接</td></tr><tr><td style="text-align:left">54</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-tcgetpgrp.html">os.tcgetpgrp(fd)</a> 返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td></tr><tr><td style="text-align:left">55</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-tcsetpgrp.html">os.tcsetpgrp(fd, pg)</a> 设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td></tr><tr><td style="text-align:left">56</td><td style="text-align:left">os.tempnam([dir[, prefix]]) <strong>Python3 中已删除。</strong>返回唯一的路径名用于创建临时文件。</td></tr><tr><td style="text-align:left">57</td><td style="text-align:left">os.tmpfile() <strong>Python3 中已删除。</strong>返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</td></tr><tr><td style="text-align:left">58</td><td style="text-align:left">os.tmpnam() <strong>Python3 中已删除。</strong>为创建一个临时文件返回一个唯一的路径</td></tr><tr><td style="text-align:left">59</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-ttyname.html">os.ttyname(fd)</a> 返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td></tr><tr><td style="text-align:left">60</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-unlink.html">os.unlink(path)</a> 删除文件路径</td></tr><tr><td style="text-align:left">61</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-utime.html">os.utime(path, times)</a> 返回指定的path文件的访问和修改的时间。</td></tr><tr><td style="text-align:left">62</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-walk.html">os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</a> 输出在文件夹中的文件名通过在树中游走，向上或者向下。</td></tr><tr><td style="text-align:left">63</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-write.html">os.write(fd, str)</a> 写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td></tr><tr><td style="text-align:left">64</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-path.html">os.path 模块</a> 获取文件的属性信息。</td></tr><tr><td style="text-align:left">65</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-pardir.html">os.pardir()</a> 获取当前目录的父目录，以字符串形式显示目录名。</td></tr><tr><td style="text-align:left">66</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-os-replace.html">os.replace()</a> 重命名文件或目录。</td></tr></tbody></table></div><blockquote><p><strong>os.path模块</strong></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>os.path.abspath(path)</code></td><td style="text-align:left">返回绝对路径字符串。</td></tr><tr><td style="text-align:left"><code>os.path.basename(path)</code></td><td style="text-align:left">返回路径中的文件名部分。</td></tr><tr><td style="text-align:left"><code>os.path.commonpath(paths)</code></td><td style="text-align:left">返回指定路径序列中的共同基础路径。</td></tr><tr><td style="text-align:left"><code>os.path.commonprefix(list)</code></td><td style="text-align:left">返回指定路径序列中的共同前缀。</td></tr><tr><td style="text-align:left"><code>os.path.dirname(path)</code></td><td style="text-align:left">返回路径中的目录部分。</td></tr><tr><td style="text-align:left"><code>os.path.exists(path)</code></td><td style="text-align:left">判断路径是否存在。</td></tr><tr><td style="text-align:left"><code>os.path.lexists(path)</code></td><td style="text-align:left">判断路径是否存在，会解析符号链接。</td></tr><tr><td style="text-align:left"><code>os.path.getatime(path)</code></td><td style="text-align:left">返回路径的最后访问时间（浮点数形式的时间戳）。</td></tr><tr><td style="text-align:left"><code>os.path.getmtime(path)</code></td><td style="text-align:left">返回路径的最后修改时间（浮点数形式的时间戳）。</td></tr><tr><td style="text-align:left"><code>os.path.getctime(path)</code></td><td style="text-align:left">返回路径的创建时间（浮点数形式的时间戳）。</td></tr><tr><td style="text-align:left"><code>os.path.getsize(path)</code></td><td style="text-align:left">返回路径指定的文件的大小，以字节为单位。</td></tr><tr><td style="text-align:left"><code>os.path.isabs(path)</code></td><td style="text-align:left">判断路径是否为绝对路径。</td></tr><tr><td style="text-align:left"><code>os.path.isfile(path)</code></td><td style="text-align:left">判断路径是否为文件。</td></tr><tr><td style="text-align:left"><code>os.path.isdir(path)</code></td><td style="text-align:left">判断路径是否为目录。</td></tr><tr><td style="text-align:left"><code>os.path.islink(path)</code></td><td style="text-align:left">判断路径是否为符号链接。</td></tr><tr><td style="text-align:left"><code>os.path.ismount(path)</code></td><td style="text-align:left">判断路径是否为挂载点。</td></tr><tr><td style="text-align:left"><code>os.path.join(path1, path2)</code></td><td style="text-align:left">将两个路径组合成一个。</td></tr><tr><td style="text-align:left"><code>os.path.normcase(path)</code></td><td style="text-align:left">规范化路径的大小写。</td></tr><tr><td style="text-align:left"><code>os.path.normpath(path)</code></td><td style="text-align:left">规范化路径字符串。</td></tr><tr><td style="text-align:left"><code>os.path.realpath(path)</code></td><td style="text-align:left">返回规范化的绝对路径。</td></tr><tr><td style="text-align:left"><code>os.path.relpath(path, start)</code></td><td style="text-align:left">返回从 start 路径到 path 的相对路径。</td></tr><tr><td style="text-align:left"><code>os.path.samefile(path1, path2)</code></td><td style="text-align:left">判断两个路径是否指向同一个文件。</td></tr><tr><td style="text-align:left"><code>os.path.sameopenfile(fp1, fp2)</code></td><td style="text-align:left">判断两个打开的文件是否指向同一个文件。</td></tr><tr><td style="text-align:left"><code>os.path.samestat(stat1, stat2)</code></td><td style="text-align:left">判断两个 stat tuple 是否引用同一个文件。</td></tr><tr><td style="text-align:left"><code>os.path.split(path)</code></td><td style="text-align:left">返回路径的目录和文件名。</td></tr><tr><td style="text-align:left"><code>os.path.splitdrive(path)</code></td><td style="text-align:left">返回驱动器名称和路径组成的元组。</td></tr><tr><td style="text-align:left"><code>os.path.splitext(path)</code></td><td style="text-align:left">分割路径的文件名和扩展名。</td></tr><tr><td style="text-align:left"><code>os.path.splitunc(path)</code></td><td style="text-align:left">将路径分为共享设备和文件部分。</td></tr><tr><td style="text-align:left"><code>os.path.walk(top, func, arg)</code></td><td style="text-align:left">为 top 目录树中的每个目录调用 func，并向其传递 arg。</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> path <span class="token operator">=</span> <span class="token string">'/Users/beazley/Data/data.csv'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Get the last component of the path</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token string">'data.csv'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Get the directory name</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token string">'/Users/beazley/Data'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Join path components together</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'tmp/data/data.csv'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Expand the user's home directory</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> path <span class="token operator">=</span> <span class="token string">'~/Data/data.csv'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token string">'/Users/beazley/Data/data.csv'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Split the file extension</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'~/Data/data'</span><span class="token punctuation">,</span> <span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token comment"># Get all regular files</span>names <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># Get all dirs</span>dirnames <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>glob 模块</strong></p></blockquote><ul><li><p>glob 模块提供了一个函数用于从目录通配符搜索中生成文件列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> glob<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.py'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'primes.py'</span><span class="token punctuation">,</span> <span class="token string">'random.py'</span><span class="token punctuation">,</span> <span class="token string">'quote.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>fnmatch 模块</strong></p></blockquote><ul><li><p>更加灵活的文件名匹配</p></li><li><p>支持的通配符<br><img src="https://gitee.com/joy-j/my-drawing-bed/raw/master/img/202407071616755.png" alt="img"></p></li><li><p>函数</p><ul><li><code>fnmatch</code>：判断文件名是否符合特定的模式。</li><li><code>fnmatchcase</code>：判断文件名是否符合特定的模式，区分大小写。</li><li><code>filter</code>：返回输入列表中，符合特定模式的文件名列表。</li><li><code>translate</code>：将通配符模式转换成正则表达式。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fnmatch <span class="token keyword">import</span> fnmatchpyfiles <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> fnmatch<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'*.py'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-二进制文件"><a href="#5-二进制文件" class="headerlink" title="5 二进制文件"></a>5 二进制文件</h2><ul><li><p>从二进制模式的文件中读取或写入文本数据，必须确保要进行<strong>解码和编码</strong>操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.bin'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.bin'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">'Hello World'</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>二进制I/O能直接写入数组和C结构体类型，不需要中间转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> arraynums <span class="token operator">=</span> array<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.bin'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用文件对象的 <code>readinto()</code> 方法直接读取二进制数据到其底层的内存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> array<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> array<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.bin'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>readinto<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> aarray<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>固定大小记录迭代文件</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partialRECORD_SIZE <span class="token operator">=</span> <span class="token number">32</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    records <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>partial<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">,</span> RECORD_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> records<span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>records</code> 对象是一个可迭代对象，它会不断的产生固定大小的数据块，直到文件末尾</p></li><li><p><code>functools.partial</code> 用来创建一个每次被调用时从文件中读取固定数目字节的可调用对象。 标记值 <code>b''</code> 就是当到达文件结尾时的返回值。</p></li><li><p>给<code>iter()</code> 函数传递一个可调用对象和一个标记值，它会创建一个迭代器。 这个迭代器会一直调用传入的可调用对象直到它返回标记值为止，这时候迭代终止。</p></li></ul></li><li><p>直接读取二进制数据到一个可变缓冲区即<strong>原地修改</strong>数据并将它写回到一个文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">read_into_buffer</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>readinto<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Write a sample file</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sample.bin'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf <span class="token operator">=</span> read_into_buffer<span class="token punctuation">(</span><span class="token string">'sample.bin'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf<span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'Hello World'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf<span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'Hello World'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'newsample.bin'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><code>readinto()</code> 方法能被用来为预先分配内存的数组填充数据，甚至包括由 <code>array</code> 模块或 <code>numpy</code> 库创建的数组。</p></li><li><p>和普通 <code>read()</code> 方法不同的是， <code>readinto()</code> 填充已存在的缓冲区而不是为新对象重新分配内存再返回它们。 避免大量的内存分配操作</p></li><li><p>读取一个由相同大小的记录组成的二进制文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">record_size <span class="token operator">=</span> <span class="token number">32</span> <span class="token comment"># Size of each record (adjust value)</span>buf <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>record_size<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> f<span class="token punctuation">.</span>readinto<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> record_size<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment"># Use the contents of buf</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>memoryview</code> :它可以通过零复制的方式对已存在的缓冲区执行切片操作，甚至还能修改它的内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf<span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'Hello World'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m1 <span class="token operator">=</span> <span class="token builtin">memoryview</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m2 <span class="token operator">=</span> m1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m2<span class="token operator">&lt;</span>memory at <span class="token number">0x100681390</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b'WORLD'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> buf<span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'Hello WORLD'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>f.readinto()</code> 时需要注意它的返回值即实际读取的字节数。如果字节数小于缓冲区大小，表明数据被截断或者被破坏了</p></li></ol></li><li><p>将字节写入文本文件:将字节数据直接写入文件的<strong>缓冲区</strong>即可，同样通过读取文本文件的 <code>buffer</code> 属性来读取二进制数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'Hello\n'</span><span class="token punctuation">)</span> <span class="token comment">#  默认情况下，sys.stdout 总是以文本模式打开的。</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> must be <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token builtin">bytes</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'Hello\n'</span><span class="token punctuation">)</span>Hello<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I/O系统以层级结构的形式构建而成。 <strong>文本文件是通过在一个拥有缓冲的二进制模式文件上增加一个Unicode编码/解码层来创建。</strong> buffer 属性指向对应的底层文件。如果你直接访问它的话就会绕过文本编码/解码层。</p></li></ul><h2 id="6-模拟文件"><a href="#6-模拟文件" class="headerlink" title="6 模拟文件"></a>6 模拟文件</h2><ul><li><p>使用 <code>io.StringIO()</code> 和 <code>io.BytesIO()</code> 类来创建类文件对象操作字符串数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is a test'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>s<span class="token punctuation">)</span><span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Get all of the data written so far</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World\nThis is a test\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Wrap a file interface around an existing string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token string">'Hello\nWorld\n'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token string">'Hell'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'o\nWorld\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'binary data'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">b'binary data'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>StringIO</code> 和 <code>BytesIO</code> 实例并没有正确的整数类型的文件描述符。 因此，它们不能在那些需要使用真实的系统级文件如文件，管道或者是套接字的程序中使用</p></li></ul><h2 id="7-压缩文件"><a href="#7-压缩文件" class="headerlink" title="7 压缩文件"></a>7 压缩文件</h2><ul><li><p><code>gzip</code> 和 <code>bz2</code> 模块读写gzip或bz2格式的压缩文件，使用<code>open()</code>函数</p></li><li><p>以文本形式读写压缩文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># gzip compression</span><span class="token keyword">import</span> gzip<span class="token keyword">with</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.gz'</span><span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># bz2 compression</span><span class="token keyword">import</span> bz2<span class="token keyword">with</span> bz2<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.bz2'</span><span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># gzip compression</span><span class="token keyword">import</span> gzip<span class="token keyword">with</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.gz'</span><span class="token punctuation">,</span> <span class="token string">'wt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># bz2 compression</span><span class="token keyword">import</span> bz2<span class="token keyword">with</span> bz2<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.bz2'</span><span class="token punctuation">,</span> <span class="token string">'wt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>gzip.open()</code> 和 <code>bz2.open()</code> 接受跟内置的 <code>open()</code> 函数一样的参数， 包括 <code>encoding</code>，<code>errors</code>，<code>newline</code> 等</p></li><li><p>使用 <code>compresslevel</code> 可选的关键字参数来指定压缩级别写入压缩数据。默认的等级是9，也是最高的压缩等级。等级越低性能越好，但是数据压缩程度也越低。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.gz'</span><span class="token punctuation">,</span> <span class="token string">'wt'</span><span class="token punctuation">,</span> compresslevel<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>gzip.open()</code> 和 <code>bz2.open()</code>可以作用在一个<strong>已存在并以二进制模式打开的文件</strong>上。允许 <code>gzip</code> 和 <code>bz2</code> 模块可以工作在许多类文件对象上，比如套接字，管道和内存中文件等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gzipf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.gz'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">with</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> g<span class="token punctuation">:</span>    text <span class="token operator">=</span> g<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-内存映射"><a href="#8-内存映射" class="headerlink" title="8 内存映射"></a>8 内存映射</h2><ul><li><p>为了<strong>随机访问</strong>内容或者是<strong>原地修改</strong>，使用 <code>mmap</code> 模块来内存映射一个二进制文件到一个可变字节数组中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> mmap<span class="token keyword">def</span> <span class="token function">memory_map</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> access<span class="token operator">=</span>mmap<span class="token punctuation">.</span>ACCESS_WRITE<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    fd <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">)</span>    <span class="token keyword">return</span> mmap<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span>fd<span class="token punctuation">,</span> size<span class="token punctuation">,</span> access<span class="token operator">=</span>access<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该函数要求文件<strong>已创建并且内容不为空</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size <span class="token operator">=</span> <span class="token number">1000000</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> memory_map<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token number">1000000</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token string">b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Reassign a slice</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Verify that changes were made</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">b'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>mmap()</code> 返回的 <code>mmap</code> 对象同样也可以作为一个上下文管理器来使用， 这时候底层的文件会被自动关闭。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> memory_map<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1000000</span><span class="token string">b'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>closed<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认情况下， <code>memeory_map()</code> 函数打开的文件同时支持读和写操作。 任何的修改内容都会复制回原来的文件中。 如果需要只读的访问模式，可以给参数 <code>access</code> 赋值为 <code>mmap.ACCESS_READ</code> 。如果你想在本地修改数据，但是又不想将修改写回到原始文件中，可以使用 <code>mmap.ACCESS_COPY</code></p></li><li><p>为了随机访问文件的内容，使用 <code>mmap</code> 将文件映射到内存中是一个高效和优雅的方法。 例如，你无需打开一个文件并执行大量的 <code>seek()</code> ， <code>read()</code> ， <code>write()</code> 调用， 只需要简单的映射文件并使用切片操作访问数据即可。</p></li><li><p>内存映射一个文件并<strong>不会导致整个文件被读取到内存中</strong>。 也就是说，文件并没有被复制到内存缓存或数组中。相反，操作系统仅仅为文件内容保留了一段虚拟内存。 当你访问文件的不同区域时，这些区域的内容才根据需要被读取并映射到内存区域中。 而那些从没被访问到的部分还是留在磁盘上。所有这些过程是透明的，在幕后完成！</p></li><li><p>如果多个Python解释器内存映射同一个文件，得到的 <code>mmap</code> 对象能够被用来在解释器直接交换数据。 也就是说，<strong>所有解释器都能同时读写数据，并且其中一个解释器所做的修改会自动呈现在其他解释器中</strong>。 很明显，这里需要考虑同步的问题。但是这种方法有时候可以用来在管道或套接字间传递数据。</p></li></ul><h2 id="9-临时文件-目录"><a href="#9-临时文件-目录" class="headerlink" title="9 临时文件/目录"></a>9 临时文件/目录</h2><ul><li><p>使用 <code>tempfile.TemporaryFile</code>创建一个<strong>匿名的临时文件</strong>，使用完之后可以<strong>自动销毁掉</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryFile<span class="token keyword">with</span> TemporaryFile<span class="token punctuation">(</span><span class="token string">'w+t'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment"># Read/write to the file</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Testing\n'</span><span class="token punctuation">)</span>    <span class="token comment"># Seek back to beginning and read the data</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Temporary file is destroyed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>TemporaryFile()</code> 的第一个参数是文件模式，通常来讲文本模式使用 <code>w+t</code> ，二进制模式使用 <code>w+b</code> ,同时支持读和写操作</p></li><li><p>非匿名临时文件<code>NamedTemporaryFile()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> NamedTemporaryFile<span class="token keyword">with</span> NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">'w+t'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'filename is:'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># File automatically destroyed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>临时目录 <code>tempfile.TemporaryDirectory()</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tempfile <span class="token keyword">import</span> TemporaryDirectory<span class="token keyword">with</span> TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dirname<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dirname is:'</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span>    <span class="token comment"># Use the directory</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># Directory and all contents destroyed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10-CSV文件"><a href="#10-CSV文件" class="headerlink" title="10 CSV文件"></a>10 CSV文件</h2><ul><li><p>对于大多数的CSV格式的数据读写问题，都可以使用 <code>csv</code> 库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''Symbol,Price,Date,Time,Change,Volume"AA",39.48,"6/11/2007","9:36am",-0.18,181800"AIG",71.38,"6/11/2007","9:36am",-0.15,195500"AXP",62.58,"6/11/2007","9:36am",-0.46,935000"BA",98.31,"6/11/2007","9:36am",+0.12,104800"C",53.08,"6/11/2007","9:36am",-0.25,360900"CAT",78.29,"6/11/2007","9:36am",-0.23,225400'''</span><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>f_csv<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> f_csv<span class="token punctuation">:</span>        <span class="token comment"># Process row</span>        <span class="token comment"># row 是一个列表 使用下标访问，如 row[0] 访问Symbol， row[4] 访问Change</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 使用命名元组</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stock.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    headings <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>f_csv<span class="token punctuation">)</span>    Row <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Row'</span><span class="token punctuation">,</span> headings<span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> f_csv<span class="token punctuation">:</span>        row <span class="token operator">=</span> Row<span class="token punctuation">(</span><span class="token operator">*</span>r<span class="token punctuation">)</span>        <span class="token comment"># Process row </span>        <span class="token comment"># 使用列名如 row.Symbol 和 row.Change 代替下标访问</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将数据读取到一个字典序列中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> f_csv<span class="token punctuation">:</span>        <span class="token comment"># process row</span>        <span class="token comment"># row['Symbol'] 或者 row['Change']</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>写入CSV数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token string">'Price'</span><span class="token punctuation">,</span><span class="token string">'Date'</span><span class="token punctuation">,</span><span class="token string">'Time'</span><span class="token punctuation">,</span><span class="token string">'Change'</span><span class="token punctuation">,</span><span class="token string">'Volume'</span><span class="token punctuation">]</span>rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token number">39.48</span><span class="token punctuation">,</span> <span class="token string">'6/11/2007'</span><span class="token punctuation">,</span> <span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.18</span><span class="token punctuation">,</span> <span class="token number">181800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">'AIG'</span><span class="token punctuation">,</span> <span class="token number">71.38</span><span class="token punctuation">,</span> <span class="token string">'6/11/2007'</span><span class="token punctuation">,</span> <span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token number">195500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">'AXP'</span><span class="token punctuation">,</span> <span class="token number">62.58</span><span class="token punctuation">,</span> <span class="token string">'6/11/2007'</span><span class="token punctuation">,</span> <span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.46</span><span class="token punctuation">,</span> <span class="token number">935000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>       f_csv<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>headers<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>rows<span class="token punctuation">)</span>    <span class="token comment"># 写入字典数据</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'Time'</span><span class="token punctuation">,</span> <span class="token string">'Change'</span><span class="token punctuation">,</span> <span class="token string">'Volume'</span><span class="token punctuation">]</span>rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'Symbol'</span><span class="token punctuation">:</span><span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span><span class="token number">39.48</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span><span class="token string">'6/11/2007'</span><span class="token punctuation">,</span>        <span class="token string">'Time'</span><span class="token punctuation">:</span><span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token string">'Change'</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.18</span><span class="token punctuation">,</span> <span class="token string">'Volume'</span><span class="token punctuation">:</span><span class="token number">181800</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'Symbol'</span><span class="token punctuation">:</span><span class="token string">'AIG'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span> <span class="token number">71.38</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span><span class="token string">'6/11/2007'</span><span class="token punctuation">,</span>        <span class="token string">'Time'</span><span class="token punctuation">:</span><span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token string">'Change'</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token string">'Volume'</span><span class="token punctuation">:</span> <span class="token number">195500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'Symbol'</span><span class="token punctuation">:</span><span class="token string">'AXP'</span><span class="token punctuation">,</span> <span class="token string">'Price'</span><span class="token punctuation">:</span> <span class="token number">62.58</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span><span class="token string">'6/11/2007'</span><span class="token punctuation">,</span>        <span class="token string">'Time'</span><span class="token punctuation">:</span><span class="token string">'9:36am'</span><span class="token punctuation">,</span> <span class="token string">'Change'</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0.46</span><span class="token punctuation">,</span> <span class="token string">'Volume'</span><span class="token punctuation">:</span> <span class="token number">935000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读取以tab分割的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Example of reading tab-separated values</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stock.tsv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_tsv <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> f_tsv<span class="token punctuation">:</span>        <span class="token comment"># Process row</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>csv产生的数据都是<strong>字符串</strong>类型的，它不会做任何其他类型的转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">col_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>f_csv<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> f_csv<span class="token punctuation">:</span>        <span class="token comment"># Apply conversions to the row items</span>        row <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>convert<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> convert<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>col_types<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换字典中特定字段'</span><span class="token punctuation">)</span>field_types <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'Price'</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span><span class="token string">'Change'</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">(</span><span class="token string">'Volume'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stocks.csv'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>        row<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> conversion<span class="token punctuation">(</span>row<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> key<span class="token punctuation">,</span> conversion <span class="token keyword">in</span> field_types<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据分析和统计： <code>Pandas</code> </p></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习19-装饰器</title>
      <link href="/2024/07/09/python-xue-xi-19-zhuang-shi-qi/"/>
      <url>/2024/07/09/python-xue-xi-19-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><ul><li>装饰器（decorators）是 Python 中的一种高级功能，它允许<strong>动态地修改函数或类的行为</strong>。</li><li>装饰器是一种<strong>函数</strong>，它接受一个<strong>函数作为参数</strong>，并<strong>返回一个新的函数或修改原来的函数</strong>。</li><li>装饰器的语法使用 <strong><code>@decorator_name</code></strong> 来应用在<strong>函数或方法</strong>上</li><li>内置的装饰器，比如 <strong>@staticmethod</strong> 和 <strong>@classmethod</strong>，用于定义静态方法和类方法</li><li>装饰器的应用场景<ul><li><strong>日志记录</strong>: 装饰器可用于==记录函数的调用信息、参数和返回值==。</li><li><strong>性能分析</strong>: 可以使用装饰器来==测量函数的执行时间==。</li><li><strong>权限控制</strong>: 装饰器可用于限制对某些函数的==访问权限==。</li><li><strong>缓存</strong>: 装饰器可用于实现==函数结果的缓存==，以提高性能。</li></ul></li></ul><h2 id="1-定义装饰器"><a href="#1-定义装饰器" class="headerlink" title="1 定义装饰器"></a>1 定义装饰器</h2><p>Python 装饰器允许<strong>在不修改原有函数代码的基础上，动态地增加或修改函数的功能</strong>，装饰器本质上是一个接收函数作为输入并返回一个新的包装过后的函数的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decorator_function</span><span class="token punctuation">(</span>original_function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 这里是在调用原始函数前添加的新功能</span>        before_call_code<span class="token punctuation">(</span><span class="token punctuation">)</span>                result <span class="token operator">=</span> original_function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token comment"># 这里是在调用原始函数后添加的新功能</span>        after_call_code<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper<span class="token comment"># 使用装饰器</span><span class="token decorator annotation punctuation">@decorator_function</span><span class="token keyword">def</span> <span class="token function">target_function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token comment"># 原始函数的实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>decorator_function</code> 是装饰器，它接收一个函数 <code>original_function</code> 作为参数。</li><li><code>wrapper</code> 是内部函数，它是实际会被调用的新函数，它包裹了原始函数的调用，并在其前后增加了额外的行为。</li><li>当我们使用 <code>@decorator_function</code> 前缀在 <code>target_function</code> 定义前，Python会自动将 <code>target_function</code> 作为参数传递给 <code>decorator_function</code>，然后将返回的 <code>wrapper</code> 函数替换掉原来的 <code>target_function</code>。</li></ul><h2 id="2-使用装饰器"><a href="#2-使用装饰器" class="headerlink" title="2 使用装饰器"></a>2 使用装饰器</h2><p>装饰器通过 <strong>@</strong> 符号应用在函数定义之前</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@time_logger</span><span class="token keyword">def</span> <span class="token function">target_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># =========等价=============</span><span class="token keyword">def</span> <span class="token function">target_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>target_function <span class="token operator">=</span> time_logger<span class="token punctuation">(</span>target_function<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-装饰器参数"><a href="#3-装饰器参数" class="headerlink" title="3 装饰器参数"></a>3 装饰器参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator<span class="token decorator annotation punctuation">@repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span>greet<span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以上代码中 repeat 函数是一个带参数的装饰器，它接<strong>受一个整数参数 n，然后返回一个装饰器函数。该装饰器函数内部定义了 wrapper 函数</strong>，在调用原始函数之前重复执行 n 次</li></ul><h2 id="4-类装饰器"><a href="#4-类装饰器" class="headerlink" title="4 类装饰器"></a>4 类装饰器</h2><p>类装饰器是包含 <strong>__call__</strong> 方法的类，它接受一个函数作为参数，并返回一个新的函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DecoratorClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在调用原始函数之前/之后执行的代码</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 在调用原始函数之后执行的代码</span>        <span class="token keyword">return</span> result<span class="token decorator annotation punctuation">@DecoratorClass</span><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习18-函数</title>
      <link href="/2024/07/08/python-xue-xi-18-han-shu/"/>
      <url>/2024/07/08/python-xue-xi-18-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。用来提高应用的模块性，和代码的重复利用率。</li></ul><h2 id="1-函数定义与调用"><a href="#1-函数定义与调用" class="headerlink" title="1 函数定义与调用"></a>1 函数定义与调用</h2><ul><li><p>函数代码块以 <strong><code>def</code></strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</p></li><li><p>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</p></li><li><p>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</p></li><li><p>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</p></li><li><p><strong><code>return [表达式]</code></strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment"># 定义函数</span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> <span class="token builtin">str</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 打印任何传入的字符串</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用函数</span>printme<span class="token punctuation">(</span><span class="token string">"我要调用用户自定义函数!"</span><span class="token punctuation">)</span>printme<span class="token punctuation">(</span><span class="token string">"再次调用同一函数"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2 参数传递"></a>2 参数传递</h2><ul><li><p>在 python 中，<strong>类型属于对象，对象有不同类型的区分，变量没有类型</strong></p></li><li><p><strong>可更改(mutable)与不可更改(immutable)对象</strong></p><ul><li>在 python 中，<code>strings, tuples, 和 numbers</code> 是不可更改的对象，而 <code>list,dict</code> 等则是可以修改的对象。</li><li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于<strong>新生成</strong>了 a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul></li><li><p>函数参数传递</p><ul><li><strong>不可变类型：</strong>类似 C++ 的<code>值传递</code>，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li><li><strong>可变类型：</strong>类似 C++ 的<code>引用传递</code>，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul></li><li><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p></li><li><p><strong>python 传不可变对象</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 指向的是同一个对象</span>    a<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 一个新对象</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 4379369136</span><span class="token comment"># 4379369136</span><span class="token comment"># 4379369424</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用函数前后，形参和实参指向的是同一个对象（对象 id 相同），在函数内部修改形参后，形参指向的是不同的 id</p></li><li><p><strong>python 传可变对象</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"修改传入的列表"</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用changeme函数</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span><span class="token comment"># 函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span><span class="token comment"># 函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入函数的和在末尾添加新内容的对象用的是同一个引用</p></li></ul><h2 id="3-参数"><a href="#3-参数" class="headerlink" title="3 参数"></a>3 参数</h2><ul><li><p><strong><code>必需参数</code></strong>：须<strong>以正确的顺序传入函数</strong>。调用时的数量必须和声明时的一样。</p></li><li><p><strong><code>关键字参数</code></strong></p><ul><li><p>和函数调用关系紧密，函数调用<strong>使用关键字参数来确定传入的参数值</strong></p></li><li><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>默认参数</code></strong></p><ul><li><p>调用函数时，如果没有传递参数，则会使用默认参数</p></li><li><p>在形参列表中必须<strong>先列出没有默认值的形参，再列出有默认值的实参</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不提供默认值，仅测试某个默认参数是不是有传递进来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_no_value <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span>_no_value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token keyword">is</span> _no_value<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No b value supplied'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>No b value supplied<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># b = 2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment"># b = None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>默认参数的值仅仅在函数定义的时候赋值一次</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">23</span> <span class="token comment"># Has no effect</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认参数的值应该是<strong>不可变的对象，比如None、True、False、数字或字符串</strong></p></li><li><p><code>None</code>值测试应用<code>is</code>操作符</p></li></ul></li><li><p><strong><code>不定长参数</code></strong></p><ul><li><p>函数能处理比当初声明时更多的参数,不定长参数声明时<strong>不会命名</strong></p></li><li><p><strong>加了星号 *</strong> 的参数会以<strong>元组(tuple)</strong>的形式导入，存放所有未命名的<strong>位置参数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>  <span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token triple-quoted-string string">'''70(60, 50)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>加了两个星号 <em>\</em></strong> 的参数会以<strong>字典</strong>的形式导入，存放<strong>关键字参数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>  <span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1{'a': 2, 'b': 3}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>声明函数时，参数中星号 <strong>*</strong> 可以单独出现。如果单独出现星号 <strong>*</strong>，则星号 <strong>*</strong> 后的参数必须<strong>用关键字传入</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 报错</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 正常</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个*参数只能出现在函数定义中最后一个位置参数后面，而 [**]参数只能出现在最后一个参数。 在*参数后面仍然可以定义其他参数</p></li><li><p><strong>强制关键字参数：</strong>将强制关键字参数放到某个*参数或者单个*后面</p></li></ul></li></ul><h2 id="4-匿名函数"><a href="#4-匿名函数" class="headerlink" title="4 匿名函数"></a>4 匿名函数</h2><ul><li><p>Python 使用 <strong>lambda</strong> 来创建匿名函数（不再使用 <strong>def</strong> 语句形式定义一个函数）</p></li><li><p><strong>lambda 函数是一种小型、匿名的、内联函数，它可以具有任意数量的参数，但只能有一个表达式。</strong></p></li><li><p>lambda 函数拥有自己的命名空间，且<strong>不能访问自己参数列表之外或全局命名空间里的参数</strong>。</p></li><li><p>lambda 函数通常用于编写简单的、单行的函数，通常在需要<strong>函数作为参数传递</strong>的情况下使用，例如在 <strong>map()、filter()、reduce()</strong> 等函数中。</p></li><li><p>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，内联函数的目的是调用小函数时不占用栈内存从而减少函数调用的开销，提高代码的执行速度。</p></li><li><p>lambda 函数的语法只包含一个语句：<strong><code>lambda [arg1 [,arg2,.....argn]]:expression</code></strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token string">"Hello, world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello, world!</span>x <span class="token operator">=</span> <span class="token keyword">lambda</span> a <span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 15</span><span class="token comment"># 可写函数说明</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment"># 调用sum函数</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 相加后的值为 :  30</span><span class="token comment"># 相加后的值为 :  40</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>squared <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 4, 9, 16, 25]</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>even_numbers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>even_numbers<span class="token punctuation">)</span>  <span class="token comment"># 输出：[2, 4, 6, 8]</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment"># 使用 reduce() 和 lambda 函数计算乘积</span>product <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span>  <span class="token comment"># 输出：120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将匿名函数封装在一个函数内,可以使用同样的代码来创建多个匿名函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将匿名函数封装在 myfunc 函数中，通过传入不同的参数来创建不同的匿名函数</span><span class="token keyword">def</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token keyword">lambda</span> a <span class="token punctuation">:</span> a <span class="token operator">*</span> n mydoubler <span class="token operator">=</span> myfunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>mytripler <span class="token operator">=</span> myfunc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>mydoubler<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mytripler<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 22</span><span class="token comment"># 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匿名函数捕获变量值</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">30</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>lambda表达式中的x是一个自由变量， <strong>在运行时绑定值</strong>，而不是定义时就绑定</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匿名函数在定义时就捕获到值，可以将那个参数值<strong>定义成默认参数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> x<span class="token operator">=</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> x<span class="token operator">=</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">20</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在一个循环或列表推导中创建一个lambda表达式列表，并期望函数能在定义时就记住每次的迭代值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> funcs<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 4 4 4 4 4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> n<span class="token operator">=</span>n<span class="token punctuation">:</span> x<span class="token operator">+</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> funcs<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 0 1 2 3 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="5-return语句"><a href="#5-return语句" class="headerlink" title="5 return语句"></a>5 return语句</h2><ul><li><p><strong>return [表达式]</strong> 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的 return 语句返回 None。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 返回2个参数的和."</span>   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>   <span class="token keyword">return</span> total <span class="token comment"># 调用sum函数</span>total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token comment"># 函数内 :  30</span><span class="token comment"># 函数外 :  30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用返回值的函数时，需要提供一个变量，用于存储返回的值。</p></li><li><p><strong>多值返回</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>   <span class="token comment"># 返回元组</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> myfun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> myfun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-强制位置参数"><a href="#6-强制位置参数" class="headerlink" title="6 强制位置参数"></a>6 强制位置参数</h2><p>Python3.8 新增了一个函数形参语法 <code>/</code> 用来<strong>指明函数形参必须使用指定位置参数</strong>，不能使用关键字参数的形式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参    '''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token comment"># 正确调用</span>f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>   <span class="token comment"># b 不能使用关键字参数的形式</span>f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>           <span class="token comment"># e 必须使用关键字参数的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-编写规范"><a href="#7-编写规范" class="headerlink" title="7 编写规范"></a>7 编写规范</h2><ul><li><p>函数命名：<strong>描述性名称，使用小写字母和下划线。</strong></p></li><li><p>给形参指定默认值时，<strong>等号两边不要有空格</strong>。</p></li><li><p>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用<strong>文档字符串</strong>格式。</p></li><li><p>函数定义过长，可在函数定义中<strong>输入左括号后按回车键，并在下一行按两次Tab键</strong>，从而将形参列表和只缩进一层的函数体区分开来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span> parameter_0<span class="token punctuation">,</span> parameter_1<span class="token punctuation">,</span> parameter_2<span class="token punctuation">,</span> parameter_3<span class="token punctuation">,</span> parameter_4<span class="token punctuation">,</span> parameter_5<span class="token punctuation">)</span><span class="token punctuation">:</span> function body<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>程序或模块包含多个函数，使用<strong>两个空行</strong>将相邻的函数分开</p></li></ul><h2 id="8-函数参数注解"><a href="#8-函数参数注解" class="headerlink" title="8 函数参数注解"></a>8 函数参数注解</h2><ul><li><p>函数参数注解为函数的参数增加一些额外的信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>python解释器不会对这些注解添加任何的语义</p></li><li><p>函数注解只存储在函数的 <code>__annotations__</code> 属性中</p></li></ul><h2 id="9-固定参数值"><a href="#9-固定参数值" class="headerlink" title="9 固定参数值"></a>9 固定参数值</h2><ul><li>函数参数过多，可以通过 <code>functools.partial()</code>给一个或多个参数设<strong>置固定的值</strong>来减少参数个数，并返回一个<strong>新的callable对象</strong>，这个新的callable接受未赋值的参数， 然后跟之前已经赋值过的参数合并起来，最后将所有参数传递给原始函数。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> partial<span class="token punctuation">(</span>spam<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># a = 1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> partial<span class="token punctuation">(</span>spam<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment"># d = 42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> partial<span class="token punctuation">(</span>spam<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment"># a = 1, b = 2, d = 42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>坐标距离排序:列表的 <code>sort()</code> 方法接受一个关键字参数来自定义排序逻辑， 但是它只能接受一个<strong>单个参数</strong>的函数。 通过使用 <code>partial()</code> 来解决这个问题</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">points <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">distance</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>    x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> p1    x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> p2    <span class="token keyword">return</span> math<span class="token punctuation">.</span>hypot<span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">,</span> y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> points<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>partial<span class="token punctuation">(</span>distance<span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> points<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-内嵌函数"><a href="#10-内嵌函数" class="headerlink" title="10 内嵌函数"></a>10 内嵌函数</h2><ul><li><p>内嵌函数是<strong>一个函数定义在另一个函数内部的函数</strong>。</p></li><li><p>内嵌函数可以访问其<strong>所属函数的参数和局部变量</strong>，并且可以<strong>独立执行</strong>。</p></li><li><p>内嵌函数的定义方式与普通函数相同，只是将其放在另一个函数的内部。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>        <span class="token keyword">def</span> <span class="token function">inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># nonlocal 声明x为非局部变量。</span> <span class="token comment"># 如果没有这个声明，代码会报错</span>        <span class="token keyword">nonlocal</span> x        x <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    inner_func<span class="token punctuation">(</span><span class="token punctuation">)</span>outer_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>嵌套作用域：定义在内部代码块中的变量只在<strong>该代码块及其子代码块</strong>中可见</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>        <span class="token keyword">def</span> <span class="token function">inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    inner_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>outer_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 20</span><span class="token comment"># 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="11-闭包"><a href="#11-闭包" class="headerlink" title="11 闭包"></a>11 闭包</h2><ul><li><p>闭包指的是满足以下几个条件的函数</p><ol><li><strong>必须有一个内嵌函数。</strong></li><li><strong>内嵌函数必须引用外部函数中的变量。</strong></li><li><strong>外部函数的返回值必须是内嵌函数。</strong></li></ol></li><li><p>闭包就是<strong>由函数以及创建该函数时存在的自由变量组成的实体</strong></p></li><li><p>闭包的作用</p><ul><li><strong>数据封装</strong>：闭包可以用于封装私有数据，只暴露有限的接口供外界访问。</li><li><strong>保持变量状态</strong>：闭包允许函数记住和访问其词法作用域中的变量，即使函数在其作用域之外执行。</li><li><strong>延迟计算</strong>：通过闭包可以推迟计算的执行，直到真正需要结果时。</li></ul></li><li><p>使用场景</p><ul><li><strong>装饰器</strong>：在不修改原有函数代码的情况下，增加额外的功能。</li><li><strong>回调函数</strong>：封装了状态的函数可以作为回调函数传递给某些操作。</li><li><strong>函数工厂</strong>：根据输入参数的不同返回不同行为的函数。</li></ul></li><li><p>语法规范</p><ol><li>定义外部函数。</li><li>在外部函数内定义内部函数。</li><li>内部函数引用外部函数的变量。</li><li>外部函数返回内部函数。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer_function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 外部函数的变量</span>    message <span class="token operator">=</span> msg    <span class="token comment"># 内部函数</span>    <span class="token keyword">def</span> <span class="token function">inner_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 内部函数使用了外部函数的变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token comment"># 外部函数返回内部函数,但没有执行它</span>    <span class="token keyword">return</span> inner_function<span class="token comment"># 创建闭包实例</span>my_func <span class="token operator">=</span> outer_function<span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token comment"># 调用内部函数</span>my_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">counter</span><span class="token punctuation">(</span>initial_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token punctuation">[</span>initial_value<span class="token punctuation">]</span>  <span class="token comment"># 使用列表来存储计数值，以便在内部函数中修改</span>    <span class="token keyword">def</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 增加计数</span>        count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 减少计数</span>        count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 返回两个内部函数</span>    <span class="token keyword">return</span> increment<span class="token punctuation">,</span> decrement<span class="token comment"># 创建闭包实例</span>inc<span class="token punctuation">,</span> dec <span class="token operator">=</span> counter<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 使用闭包</span><span class="token keyword">print</span><span class="token punctuation">(</span>inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 11</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>总结闭包和全局变量的区别</p><p>| 特性         | 闭包                                                         | 全局变量                                                     |<br>| —————— | —————————————————————————————— | —————————————————————————————— |<br>| <strong>封装性</strong>   | 高。闭包可以封装状态，外部代码无法直接访问内部变量。         | 低。全局变量在整个程序中都可见，容易被任意修改，封装性差。   |<br>| <strong>内存管理</strong> | 由于闭包保持对环境的引用，可能会导致内存占用较高，但只要闭包存在，其状态就会一直保持。 | 全局变量始终占用内存，直到程序结束或者变量被显式删除。       |<br>| <strong>可维护性</strong> | 高。闭包通过减少全局变量的使用，使得代码更加模块化和可维护。 | 低。过多的全局变量会使得代码难以追踪和维护。                 |<br>| <strong>复用性</strong>   | 高。闭包可以根据不同的外部函数参数动态生成具有不同状态的函数。 | 中等。全局变量可以在多个函数间共享，但缺乏灵活性。           |<br>| <strong>调试难度</strong> | 中等到高。闭包的调试可能比较复杂，特别是当闭包嵌套层次较深时。 | 低。全局变量相对容易跟踪，但在大型项目中可能仍然困难。       |<br>| <strong>风险控制</strong> | 高。闭包提供了更好的控制，因为它限制了状态的访问。           | 低。全局变量可能被程序中任何部分意外修改，增加了出错的风险。 |</p></li><li><p>闭包提供了更好的封装性和模块化能力，有助于提高代码的可维护性和复用性，但可能会增加内存使用和调试的复杂性。</p></li><li><p>访问闭包中定义的变量：访问函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># Closure function</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n='</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token comment"># Accessor methods for n</span>    <span class="token keyword">def</span> <span class="token function">get_n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">set_n</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> n        n <span class="token operator">=</span> value    <span class="token comment"># Attach as function attributes</span>    func<span class="token punctuation">.</span>get_n <span class="token operator">=</span> get_n    func<span class="token punctuation">.</span>set_n <span class="token operator">=</span> set_n    <span class="token keyword">return</span> func<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>set_n<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>get_n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-回调函数"><a href="#12-回调函数" class="headerlink" title="12 回调函数"></a>12 回调函数</h2><ul><li><p>当从<strong>另一个函数调用一个函数</strong>时，它被称为回调函数。回调函数是<strong>作为参数传递给另一个函数的函数</strong></p></li><li><p>实现方式</p><ul><li><p><strong>函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">callback_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Callback function called."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_with_callback</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>call_with_callback<span class="token punctuation">(</span>callback_func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CallbackClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">callback_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Callback method called."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_with_callback</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>callback_obj <span class="token operator">=</span> CallbackClass<span class="token punctuation">(</span><span class="token punctuation">)</span>call_with_callback<span class="token punctuation">(</span>callback_obj<span class="token punctuation">.</span>callback_method<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类实例</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CallbackClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Callback instance called."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_with_callback</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>callback_obj <span class="token operator">=</span> CallbackClass<span class="token punctuation">(</span><span class="token punctuation">)</span>call_with_callback<span class="token punctuation">(</span>callback_obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>应用场景</p><ul><li><p><strong>异步编程</strong>：处理异步操作完成后的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">handle_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Response received:"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    callback<span class="token punctuation">(</span>response<span class="token punctuation">)</span>make_request<span class="token punctuation">(</span><span class="token string">"https://example.com"</span><span class="token punctuation">,</span> handle_response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>事件驱动编程</strong>：处理用户输入、系统事件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> Tk<span class="token punctuation">,</span> Button<span class="token keyword">def</span> <span class="token function">handle_button_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>button <span class="token operator">=</span> Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click Me"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>handle_button_click<span class="token punctuation">)</span>button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>图形界面编程</strong>：处理用户交互事件，例如按钮点击、菜单选择等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">def</span> <span class="token function">handle_button_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click Me"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>handle_button_click<span class="token punctuation">)</span>button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p><strong>带额外状态信息的回调函数</strong>：让回调函数访问外部信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">apply_async</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Compute the result</span>    result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token comment"># Invoke the callback with the result</span>    callback<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">print_result</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>print_result<span class="token punctuation">)</span>Got<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>print_result<span class="token punctuation">)</span>Got<span class="token punctuation">:</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①使用一个<strong>绑定方法</strong>来代替一个简单函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 保存一个内部序列号，每次接收到一个 result 的时候序列号加1</span>    <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sequence <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[{}] Got: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>sequence<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> ResultHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>r<span class="token punctuation">.</span>handler<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>r<span class="token punctuation">.</span>handler<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②作为类的替代，可以使用一个<strong>闭包</strong>捕获状态值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sequence <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># nonlocal 声明语句用来指示接下来的变量会在回调函数中被修改。</span><span class="token comment"># 如果没有这个声明，代码会报错</span>        <span class="token keyword">nonlocal</span> sequence        sequence <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[{}] Got: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> handler<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> handler <span class="token operator">=</span> make_handler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③使用<strong>协程</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sequence <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token keyword">yield</span>        sequence <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[{}] Got: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> handler <span class="token operator">=</span> make_handler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment"># Advance to the yield</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">.</span>send<span class="token punctuation">)</span> <span class="token comment"># 使用 send() 方法作为回调函数</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">.</span>send<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://blog.csdn.net/qq_35716085/article/details/136027158">https://blog.csdn.net/qq_35716085/article/details/136027158</a></li><li><a href="https://blog.csdn.net/wuShiJingZuo/article/details/136304660">https://blog.csdn.net/wuShiJingZuo/article/details/136304660</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习17-生成器</title>
      <link href="/2024/07/07/python-xue-xi-17-sheng-cheng-qi/"/>
      <url>/2024/07/07/python-xue-xi-17-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><ul><li>在 Python 中，使用了 <code>yield</code> 的函数被称为<strong>生成器（generator）</strong>。</li><li><code>yield</code> 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中<strong>逐步产生值</strong>，而不是一次性返回所有结果。</li><li><strong>生成器是一个返回迭代器的函数，只能用于迭代操作</strong></li><li>当在生成器函数中使用 <code>yield</code> 语句时，函数的<strong>执行将会暂停</strong>，并<strong>将 <code>yield</code> 后面的表达式作为当前迭代的值返回</strong>。然后，每次调用生成器的 <strong>next()</strong> 方法或使用 <strong>for</strong> 循环进行迭代时，函数会<strong>从上次暂停的地方继续执行</strong>，直到再次遇到 <code>yield</code> 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</li></ul><h2 id="1-生成器使用"><a href="#1-生成器使用" class="headerlink" title="1 生成器使用"></a>1 生成器使用</h2><ul><li><p>调用一个生成器函数，返回的是一个迭代器对象.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countdown</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> n        n <span class="token operator">-=</span> <span class="token number">1</span> <span class="token comment"># 创建生成器对象</span>generator <span class="token operator">=</span> countdown<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 通过迭代生成器获取值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>generator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>generator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 4</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>generator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 3</span> <span class="token comment"># 使用 for 循环迭代生成器</span><span class="token keyword">for</span> value <span class="token keyword">in</span> generator<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 输出: 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成器函数的优势是它们可以按需生成值，避免一次性生成大量数据并占用大量内存。此外，生成器还可以与其他迭代工具（如for循环）无缝配合使用，提供简洁和高效的迭代方式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">import</span> sys <span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生成器函数 - 斐波那契</span>    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        counter <span class="token operator">+=</span> <span class="token number">1</span>f <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># f 是一个迭代器，由生成器返回生成</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-yield-from"><a href="#2-yield-from" class="headerlink" title="2 yield from"></a>2 yield from</h2><ul><li><p><code>yield from</code>后面加上可迭代对象，把可迭代对象里的每个元素一个一个的yield出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">alist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> alist<span class="token punctuation">:</span>    <span class="token keyword">yield</span> item<span class="token keyword">yield</span> <span class="token keyword">from</span> alist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>深度优先遍历树</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> value        self<span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Node({!r})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_child</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_children<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">depth_first</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> self        <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token keyword">from</span> c<span class="token punctuation">.</span>depth_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Example</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    child1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    child2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>child1<span class="token punctuation">)</span>    root<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>child2<span class="token punctuation">)</span>    child1<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>Node<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    child1<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>Node<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    child2<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>Node<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> root<span class="token punctuation">.</span>depth_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token comment"># Outputs Node(0), Node(1), Node(3), Node(4), Node(2), Node(5)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>将一个多层嵌套的序列展开成一个单层列表</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable<span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> ignore_types<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> ignore_types<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token keyword">from</span> flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> xitems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment"># Produces 1 2 3 4 5 6 7 8</span><span class="token keyword">for</span> x <span class="token keyword">in</span> flatten<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习16-迭代器</title>
      <link href="/2024/07/07/python-xue-xi-16-die-dai-qi/"/>
      <url>/2024/07/07/python-xue-xi-16-die-dai-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><ul><li><p>迭代是访问<strong>集合元素</strong>的一种方式。</p></li><li><p>迭代器是一个可以记住<strong>遍历的位置</strong>的对象。</p></li><li><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能<strong>往前不会后退</strong>。</p></li><li><p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code></p></li><li><p><strong>字符串，列表或元组对象</strong>都可用于创建迭代器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token comment"># 创建迭代器对象</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出迭代器的下一个元素</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-迭代器遍历"><a href="#1-迭代器遍历" class="headerlink" title="1 迭代器遍历"></a>1 迭代器遍历</h2><ul><li><p>迭代器对象可以使用<strong>常规for语句进行遍历</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token comment"># 创建迭代器对象</span><span class="token keyword">for</span> x <span class="token keyword">in</span> it<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>next()</code>函数遍历:在迭代操作时不使用for循环语句，那么得先调用 <strong>iter() 函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">import</span> sys         <span class="token comment"># 引入 sys 模块</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token comment"># 创建迭代器对象</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-创建迭代器"><a href="#2-创建迭代器" class="headerlink" title="2 创建迭代器"></a>2 创建迭代器</h2><ul><li><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与 <code>__next__()</code></p><ul><li><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__()</code>方法并通过 <strong>StopIteration</strong> 异常标识迭代的完成。</li><li><code>__next__() 方法</code>（Python 2 里是 next()）会返回下一个迭代器对象</li></ul></li><li><p>创建一个返回数字的迭代器，初始值为 1，逐步递增 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> self   <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> self<span class="token punctuation">.</span>a    self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> x myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>iter</code> 函数一个鲜为人知的特性是它接受一个可选的 <code>callable</code> 对象和一个标记(结尾)值作为输入参数。 当以这种方式使用的时候，它会创建一个迭代器， 这个迭代器会不断调用 <code>callable</code> 对象直到返回值和标记值相等为止。</p></li><li><p>代替while无限循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">CHUNKSIZE <span class="token operator">=</span> <span class="token number">8192</span><span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>CHUNKSIZE<span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">b''</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        process_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">reader2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> chunk <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment"># process_data(data)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-迭代完成标识"><a href="#3-迭代完成标识" class="headerlink" title="3 迭代完成标识"></a>3 迭代完成标识</h2><p><strong>StopIteration</strong> 异常用于<strong>标识迭代的完成</strong>，防止出现无限循环的情况，在 <code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> self   <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>  <span class="token comment"># 迭代20次后停止</span>      x <span class="token operator">=</span> self<span class="token punctuation">.</span>a      self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> StopIteration myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> myiter<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-代理迭代"><a href="#4-代理迭代" class="headerlink" title="4 代理迭代"></a>4 代理迭代</h2><ul><li><p>自定义容器对象，里面包含有列表、元组或其他可迭代对象，直接在新容器对象上执行迭代操作</p></li><li><p>定义一个 <code>__iter__()</code> 方法，将迭代操作代理到容器内部的对象</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> value        self<span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Node({!r})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_child</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_children<span class="token punctuation">)</span><span class="token comment"># Example</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    child1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    child2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    root<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>child1<span class="token punctuation">)</span>    root<span class="token punctuation">.</span>add_child<span class="token punctuation">(</span>child2<span class="token punctuation">)</span>    <span class="token comment"># Outputs Node(1), Node(2)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> root<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python的迭代器协议需要 <code>__iter__()</code> 方法返回一个实现了 <code>__next__()</code> 方法的迭代器对象。 如果你只是迭代遍历其他容器的内容，你无须担心底层是怎样实现的。你所要做的只是传递迭代请求既可。</p><h2 id="5-反向迭代"><a href="#5-反向迭代" class="headerlink" title="5 反向迭代"></a>5 反向迭代</h2><p>在自定义类上实现 <code>__reversed__()</code> 方法来实现反向迭代</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Countdown</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start    <span class="token comment"># Forward iterator</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> n            n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token comment"># Reverse iterator</span>    <span class="token keyword">def</span> <span class="token function">__reversed__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> n <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>start<span class="token punctuation">:</span>            <span class="token keyword">yield</span> n            n <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> rr <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>Countdown<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span class="token keyword">for</span> rr <span class="token keyword">in</span> Countdown<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-itertools-模块"><a href="#6-itertools-模块" class="headerlink" title="6 itertools 模块"></a>6 itertools 模块</h2><blockquote><p><strong>迭代器切片</strong></p></blockquote><ul><li><p>迭代器不支持标准切片操作</p></li><li><p>函数 <code>itertools.islice()</code> 适用于在迭代器和生成器上做切片操作:返回一个可以<strong>生成指定元素的迭代器</strong>，它通过遍历并丢弃直到切片开始索引位置的所有元素。 然后才开始一个个的返回元素，并直到切片结束索引位置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">yield</span> n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>    File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'generator'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Now using islice()</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> itertools<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 10 11 12 ... 19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>islice()</code> 会消耗掉传入的迭代器中的数据。<strong>迭代器是不可逆的</strong></p></li></ul><blockquote><p><strong>跳过可迭代对象的开始部分</strong></p></blockquote><ul><li><p><code>itertools.dropwhile()</code> :传递一个函数对象和一个可迭代对象。 返回一个迭代器对象，<strong>丢弃原有序列中直到函数返回Flase之前的所有元素</strong>，然后返回后面所有元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 跳过文件开始注释</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> dropwhile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> line<span class="token punctuation">:</span> <span class="token keyword">not</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>排列组合</strong></p></blockquote><ul><li><p><code>itertools.permutations()</code>:接受一个集合并产生一个元组序列，每个元组由集合中所有元素的一个可能排列组成.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># 指定长度</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>itertools.combinations()</code> ：得到输入集合中元素的所有的组合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinations<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对于 <code>combinations()</code>来讲，元素的顺序不重要。组合<code>('a', 'b')</code>跟<code>('b', 'a')</code>是一样的</p></li><li><p>函数 <code>itertools.combinations_with_replacement()</code> 允许同一个元素被选择多次</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> combinations_with_replacement<span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>同时迭代多个序列</strong></p></blockquote><ul><li><p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象</p></li><li><p><code>zip(a, b)</code> 会生成一个可返回元组 <code>(x, y)</code> 的迭代器，其中x来自a，y来自b。 一旦其中某个序列到底结尾，迭代宣告结束。 因此迭代长度跟参数中最短序列长度一致。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>zip()</code> 可以接受多个的序列的参数，此外<code>zip()</code> 会创建一个迭代器来作为结果返回。 如果你需要将结对的值存储在列表中，要使用 <code>list()</code> 函数。</p></li><li><p><code>itertools.zip_longest()</code> 函数迭代长度与最长序列长度一致</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longest<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>头列表和一个值列表生成字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">490.1</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>不同集合上元素的迭代</strong></p></blockquote><p><code>itertools.chain()</code>:接受一个或多个可迭代对象列表作为输入，并返回一个迭代器。适用于<strong>对不同的集合中所有元素执行某些操作</strong>的场景。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> chain<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span>xyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-索引值迭代"><a href="#7-索引值迭代" class="headerlink" title="7 索引值迭代"></a>7 索引值迭代</h2><p><code>enumerate(sequence, [start=0])</code>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>seasons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>seasons<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 下标从 1 开始</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token comment"># Correct!</span><span class="token keyword">for</span> n<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习15-循环语句</title>
      <link href="/2024/07/06/python-xue-xi-15-xun-huan-yu-ju/"/>
      <url>/2024/07/06/python-xue-xi-15-xun-huan-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1 while 循环"></a>1 while 循环</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>：    执行语句<span class="token punctuation">(</span>statements<span class="token punctuation">)</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407162155416.jpeg" alt="while 循环"></p><ul><li><p>在 Python 中没有 do..while 循环</p></li><li><p>while 循环使用 else 语句</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>expr<span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>additional_statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)</p><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2 for循环"></a>2 for循环</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>variable<span class="token operator">&gt;</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>sequence<span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407162155107.jpeg" alt="for循环"></p><p><strong>for…else</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>    <span class="token comment"># 循环主体</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 循环结束后执行的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，如果在循环过程中遇到了 break 语句，则会中断循环，此时不会执行 else 子句</p><h2 id="3-break与continue"><a href="#3-break与continue" class="headerlink" title="3 break与continue"></a>3 break与continue</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407162155968.png" alt="break与continue"></p></li><li><p>while 语句代码执行过程</p><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407162156737.webp" alt="while 语句代码执行过程"></p></li><li><p>for 语句代码执行过程<br><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407162156643.png" alt="for 语句代码执行过程"></p></li><li><p>break 语句可以<strong>跳出 for 和 while 的循环体</strong>。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p></li><li><p>continue 语句被用来告诉 Python <strong>跳过当前循环块中的剩余语句</strong>，然后继续进行下一轮循环。</p></li></ul><h2 id="4-pass-语句"><a href="#4-pass-语句" class="headerlink" title="4 pass 语句"></a>4 pass 语句</h2><p>pass是空语句，是为了保持程序结构的完整性, 不做任何事情，一般用做占位语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span> <span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'执行 pass 块'</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'当前字母 :'</span><span class="token punctuation">,</span> letter<span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Good bye!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-用户输入与while循环"><a href="#5-用户输入与while循环" class="headerlink" title="5 用户输入与while循环"></a>5 用户输入与while循环</h2><ul><li>函数input()让程序<strong>暂停运行</strong>，<strong>等待用户输入</strong>一些文本。获取用户输入后，Python将其存储在一个<strong>变量</strong>中。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Tell me something, and I will repeat it back to you: "</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment"># Tell me something, and I will repeat it back to you: Hello everyone! </span><span class="token comment"># Hello everyone!</span>prompt <span class="token operator">=</span> <span class="token string">"If you tell us who you are, we can personalize the messages you see."</span> prompt <span class="token operator">+=</span> <span class="token string">"\nWhat is your first name? "</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nHello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取数值输入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"How old are you? "</span><span class="token punctuation">)</span> How old are you? <span class="token number">21</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token string">'21'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户输入结合while循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"\nTell me something, and I will repeat it back to you:"</span> prompt <span class="token operator">+=</span> <span class="token string">"\nEnter 'quit' to end the program. "</span> message <span class="token operator">=</span> <span class="token string">""</span> <span class="token keyword">while</span> message <span class="token operator">!=</span> <span class="token string">'quit'</span><span class="token punctuation">:</span> message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span> <span class="token keyword">if</span> message <span class="token operator">!=</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> message <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习14-条件语句</title>
      <link href="/2024/07/06/python-xue-xi-14-tiao-jian-yu-ju/"/>
      <url>/2024/07/06/python-xue-xi-14-tiao-jian-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><ul><li>条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>    statement_block_1<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>    statement_block_2<span class="token keyword">else</span><span class="token punctuation">:</span>    statement_block_3<span class="token comment"># Python并不要求if-elif结构后面必须有else代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>if 嵌套</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>    语句    <span class="token keyword">if</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>        语句    <span class="token keyword">elif</span> 表达式<span class="token number">3</span><span class="token punctuation">:</span>        语句    <span class="token keyword">else</span><span class="token punctuation">:</span>        语句<span class="token keyword">elif</span> 表达式<span class="token number">4</span><span class="token punctuation">:</span>    语句<span class="token keyword">else</span><span class="token punctuation">:</span>    语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 Python 中没有 <strong>switch…case</strong> 语句，但在 Python3.10 版本添加了 <strong>match…case</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">match</span> subject<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token operator">&lt;</span>pattern_1<span class="token operator">&gt;</span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>action_1<span class="token operator">&gt;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;</span>pattern_2<span class="token operator">&gt;</span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>action_2<span class="token operator">&gt;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;</span>pattern_3<span class="token operator">&gt;</span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>action_3<span class="token operator">&gt;</span>    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>  <span class="token comment"># 类似default</span>        <span class="token operator">&lt;</span>action_wildcard<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用变量</span><span class="token keyword">def</span> <span class="token function">match_example</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> item<span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"匹配到相等的元组: </span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"匹配到元组: </span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配到其他情况"</span><span class="token punctuation">)</span>match_example<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 匹配到相等的元组: (1, 1)</span>match_example<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 匹配到元组: (1, 2)</span>match_example<span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span> <span class="token comment"># 输出: 匹配到其他情况</span><span class="token comment"># 类型匹配</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token keyword">def</span> <span class="token function">match_shape</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> shape<span class="token punctuation">:</span>        <span class="token keyword">case</span> Circle<span class="token punctuation">(</span>radius<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配到半径为1的圆"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Rectangle<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配到宽度为1，高度为2的矩形"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"匹配到其他形状"</span><span class="token punctuation">)</span>match_shape<span class="token punctuation">(</span>Circle<span class="token punctuation">(</span>radius<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 输出: 匹配到半径为1的圆</span>match_shape<span class="token punctuation">(</span>Rectangle<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出: 匹配到宽度为1，高度为2的矩形</span>match_shape<span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>                    <span class="token comment"># 输出: 匹配到其他形状</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习13-运算符</title>
      <link href="/2024/07/06/python-xue-xi-13-yun-suan-fu/"/>
      <url>/2024/07/06/python-xue-xi-13-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1 算术运算符"></a>1 算术运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加 - 两个对象相加</td><td style="text-align:left">a + b 输出结果 31</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td><td style="text-align:left">a - b 输出结果 -11</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td style="text-align:left">a * b 输出结果 210</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除 - x 除以 y</td><td style="text-align:left">b / a 输出结果 2.1</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模 - 返回除法的余数</td><td style="text-align:left">b % a 输出结果 1</td></tr><tr><td style="text-align:left">**</td><td style="text-align:left">幂 - 返回x的y次幂</td><td style="text-align:left">a**b 为10的21次方</td></tr><tr><td style="text-align:left">//</td><td style="text-align:left">取整除 - 往小的方向取整数</td><td style="text-align:left"><code>&gt;&gt;&gt; 9//2</code><br><code>4</code><br><code>&gt;&gt;&gt; -9//2</code><br><code>-5</code></td></tr></tbody></table></div><h2 id="2-比较（关系）运算符"><a href="#2-比较（关系）运算符" class="headerlink" title="2 比较（关系）运算符"></a>2 比较（关系）运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">等于 - 比较对象是否相等</td><td style="text-align:left">(a == b) 返回 False。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">不等于 - 比较两个对象是否不相等</td><td style="text-align:left">(a != b) 返回 True。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于 - 返回x是否大于y</td><td style="text-align:left">(a &gt; b) 返回 False。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td style="text-align:left">(a &lt; b) 返回 True。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于 - 返回x是否大于等于y。</td><td style="text-align:left">(a &gt;= b) 返回 False。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于 - 返回x是否小于等于y。</td><td style="text-align:left">(a &lt;= b) 返回 True。</td></tr></tbody></table></div><h2 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3 赋值运算符"></a>3 赋值运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符</td><td style="text-align:left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加法赋值运算符</td><td style="text-align:left">c += a 等效于 c = c + a</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减法赋值运算符</td><td style="text-align:left">c -= a 等效于 c = c - a</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘法赋值运算符</td><td style="text-align:left">c <em>= a 等效于 c = c </em> a</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除法赋值运算符</td><td style="text-align:left">c /= a 等效于 c = c / a</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">取模赋值运算符</td><td style="text-align:left">c %= a 等效于 c = c % a</td></tr><tr><td style="text-align:left">**=</td><td style="text-align:left">幂赋值运算符</td><td style="text-align:left">c <strong>= a 等效于 c = c </strong> a</td></tr><tr><td style="text-align:left">//=</td><td style="text-align:left">取整除赋值运算符</td><td style="text-align:left">c //= a 等效于 c = c // a</td></tr><tr><td style="text-align:left">:=</td><td style="text-align:left">海象运算符，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。<strong>Python3.8 版本新增运算符</strong>。</td><td style="text-align:left">在这个示例中，赋值表达式可以避免调用 len() 两次:<br><code>if (n := len(a)) &gt; 10:</code><br><code>print(f"List is too long ({n} elements, expected &lt;= 10)")</code></td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 传统写法</span>n <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment"># 使用海象运算符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4 逻辑运算符"></a>4 逻辑运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">逻辑表达式</th><th style="text-align:left">描述 (截断)</th><th style="text-align:left">实例<br>a=10,b=20</th></tr></thead><tbody><tr><td style="text-align:left">and</td><td style="text-align:left">x and y</td><td style="text-align:left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td style="text-align:left">(a and b) 返回 20。</td></tr><tr><td style="text-align:left">or</td><td style="text-align:left">x or y</td><td style="text-align:left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td style="text-align:left">(a or b) 返回 10。</td></tr><tr><td style="text-align:left">not</td><td style="text-align:left">not x</td><td style="text-align:left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td style="text-align:left">not(a and b) 返回 False</td></tr></tbody></table></div><h2 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5 位运算符"></a>5 位运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例<br>a = 0011 1100  b = 0000 1101</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td style="text-align:left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td style="text-align:left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td>(a \</td><td>b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td style="text-align:left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td style="text-align:left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td style="text-align:left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000    （==a*(2^2))</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td style="text-align:left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111   (==a/(2^2))</td></tr></tbody></table></div><h2 id="6-成员运算符"><a href="#6-成员运算符" class="headerlink" title="6 成员运算符"></a>6 成员运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">in</td><td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table></div><h2 id="7-身份运算符"><a href="#7-身份运算符" class="headerlink" title="7 身份运算符"></a>7 身份运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述 <br>用于比较两个对象的存储单元</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">is</td><td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td style="text-align:left">is not</td><td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table></div><p><code>is</code> 用于判断两个变量<strong>引用对象</strong>是否为同一个，<code>==</code> 用于判断引用变量的<strong>值</strong>是否相等</p><h2 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8 运算符优先级"></a>8 运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符， 相同单元格内的运算符具有相同优先级。 运算符均指二元运算，除非特别指出。 相同单元格内的运算符从左至右分组（除了幂运算是从右至左分组）：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>(expressions...)</code>,<code>[expressions...]</code>, <code>{key: value...}</code>, <code>{expressions...}</code></td><td style="text-align:left">圆括号的表达式</td></tr><tr><td style="text-align:left"><code>x[index]</code>, <code>x[index:index]</code>, <code>x(arguments...)</code>, <code>x.attribute</code></td><td style="text-align:left">读取，切片，调用，属性引用</td></tr><tr><td style="text-align:left">await x</td><td style="text-align:left">await 表达式</td></tr><tr><td style="text-align:left"><code>**</code></td><td style="text-align:left">乘方(指数)</td></tr><tr><td style="text-align:left"><code>+x</code>, <code>-x</code>, <code>~x</code></td><td style="text-align:left">正，负，按位非 NOT</td></tr><tr><td style="text-align:left"><code>*</code>, <code>@</code>, <code>/</code>, <code>//</code>, <code>%</code></td><td style="text-align:left">乘，矩阵乘，除，整除，取余</td></tr><tr><td style="text-align:left"><code>+</code>, <code>-</code></td><td style="text-align:left">加和减</td></tr><tr><td style="text-align:left"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td><td style="text-align:left">移位</td></tr><tr><td style="text-align:left"><code>&amp;</code></td><td style="text-align:left">按位与 AND</td></tr><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">按位异或 XOR</td></tr><tr><td style="text-align:left">`</td><td style="text-align:left">`</td><td>按位或 OR</td></tr><tr><td style="text-align:left"><code>in,not in, is,is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==</code></td><td style="text-align:left">比较运算，包括成员检测和标识号检测</td></tr><tr><td style="text-align:left"><code>not x</code></td><td style="text-align:left">逻辑非 NOT</td></tr><tr><td style="text-align:left"><code>and</code></td><td style="text-align:left">逻辑与 AND</td></tr><tr><td style="text-align:left"><code>or</code></td><td style="text-align:left">逻辑或 OR</td></tr><tr><td style="text-align:left"><code>if -- else</code></td><td style="text-align:left">条件表达式</td></tr><tr><td style="text-align:left"><code>lambda</code></td><td style="text-align:left">lambda 表达式</td></tr><tr><td style="text-align:left"><code>:=</code></td><td style="text-align:left">赋值表达式</td></tr></tbody></table></div><h2 id="9-operator-模块"><a href="#9-operator-模块" class="headerlink" title="9 operator 模块"></a>9 operator 模块</h2><ul><li><p>operator 模块提供了一套与 Python 的内置运算符对应的高效率函数</p></li><li><p>函数包含的种类有：对象的比较运算、逻辑运算、数学运算以及序列运算</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Python 实例</span><span class="token comment"># add(), sub(), mul()</span>  <span class="token comment"># 导入  operator 模块</span><span class="token keyword">import</span> operator  <span class="token comment"># 初始化变量</span>a <span class="token operator">=</span> <span class="token number">4</span>  b <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># 使用 add() 让两个值相加</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"add() 运算结果 :"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span>operator<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 sub() 让两个值相减</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"sub() 运算结果 :"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span>operator<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 mul() 让两个值相乘</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"mul() 运算结果 :"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:left">运算</th><th style="text-align:left">语法</th><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:left">加法</td><td style="text-align:left"><code>a + b</code></td><td style="text-align:left"><code>add(a, b)</code></td></tr><tr><td style="text-align:left">字符串拼接</td><td style="text-align:left"><code>seq1 + seq2</code></td><td style="text-align:left"><code>concat(seq1, seq2)</code></td></tr><tr><td style="text-align:left">包含测试</td><td style="text-align:left"><code>obj in seq</code></td><td style="text-align:left"><code>contains(seq, obj)</code></td></tr><tr><td style="text-align:left">除法</td><td style="text-align:left"><code>a / b</code></td><td style="text-align:left"><code>truediv(a, b)</code></td></tr><tr><td style="text-align:left">除法</td><td style="text-align:left"><code>a // b</code></td><td style="text-align:left"><code>floordiv(a, b)</code></td></tr><tr><td style="text-align:left">按位与</td><td style="text-align:left"><code>a &amp; b</code></td><td style="text-align:left"><code>and_(a, b)</code></td></tr><tr><td style="text-align:left">按位异或</td><td style="text-align:left"><code>a ^ b</code></td><td style="text-align:left"><code>xor(a, b)</code></td></tr><tr><td style="text-align:left">按位取反</td><td style="text-align:left"><code>~ a</code></td><td style="text-align:left"><code>invert(a)</code></td></tr><tr><td style="text-align:left">按位或</td><td style="text-align:left">`a</td><td style="text-align:left">b`</td><td><code>or_(a, b)</code></td></tr><tr><td style="text-align:left">取幂</td><td style="text-align:left"><code>a ** b</code></td><td style="text-align:left"><code>pow(a, b)</code></td></tr><tr><td style="text-align:left">标识</td><td style="text-align:left"><code>a is b</code></td><td style="text-align:left"><code>is_(a, b)</code></td></tr><tr><td style="text-align:left">标识</td><td style="text-align:left"><code>a is not b</code></td><td style="text-align:left"><code>is_not(a, b)</code></td></tr><tr><td style="text-align:left">索引赋值</td><td style="text-align:left"><code>obj[k] = v</code></td><td style="text-align:left"><code>setitem(obj, k, v)</code></td></tr><tr><td style="text-align:left">索引删除</td><td style="text-align:left"><code>del obj[k]</code></td><td style="text-align:left"><code>delitem(obj, k)</code></td></tr><tr><td style="text-align:left">索引取值</td><td style="text-align:left"><code>obj[k]</code></td><td style="text-align:left"><code>getitem(obj, k)</code></td></tr><tr><td style="text-align:left">左移</td><td style="text-align:left"><code>a &lt;&lt; b</code></td><td style="text-align:left"><code>lshift(a, b)</code></td></tr><tr><td style="text-align:left">取模</td><td style="text-align:left"><code>a % b</code></td><td style="text-align:left"><code>mod(a, b)</code></td></tr><tr><td style="text-align:left">乘法</td><td style="text-align:left"><code>a * b</code></td><td style="text-align:left"><code>mul(a, b)</code></td></tr><tr><td style="text-align:left">矩阵乘法</td><td style="text-align:left"><code>a @ b</code></td><td style="text-align:left"><code>matmul(a, b)</code></td></tr><tr><td style="text-align:left">取反（算术）</td><td style="text-align:left"><code>- a</code></td><td style="text-align:left"><code>neg(a)</code></td></tr><tr><td style="text-align:left">取反（逻辑）</td><td style="text-align:left"><code>not a</code></td><td style="text-align:left"><code>not_(a)</code></td></tr><tr><td style="text-align:left">正数</td><td style="text-align:left"><code>+ a</code></td><td style="text-align:left"><code>pos(a)</code></td></tr><tr><td style="text-align:left">右移</td><td style="text-align:left"><code>a &gt;&gt; b</code></td><td style="text-align:left"><code>rshift(a, b)</code></td></tr><tr><td style="text-align:left">切片赋值</td><td style="text-align:left"><code>seq[i:j] = values</code></td><td style="text-align:left"><code>setitem(seq, slice(i, j), values)</code></td></tr><tr><td style="text-align:left">切片删除</td><td style="text-align:left"><code>del seq[i:j]</code></td><td style="text-align:left"><code>delitem(seq, slice(i, j))</code></td></tr><tr><td style="text-align:left">切片取值</td><td style="text-align:left"><code>seq[i:j]</code></td><td style="text-align:left"><code>getitem(seq, slice(i, j))</code></td></tr><tr><td style="text-align:left">字符串格式化</td><td style="text-align:left"><code>s % obj</code></td><td style="text-align:left"><code>mod(s, obj)</code></td></tr><tr><td style="text-align:left">减法</td><td style="text-align:left"><code>a - b</code></td><td style="text-align:left"><code>sub(a, b)</code></td></tr><tr><td style="text-align:left">真值测试</td><td style="text-align:left"><code>obj</code></td><td style="text-align:left"><code>truth(obj)</code></td></tr><tr><td style="text-align:left">比较</td><td style="text-align:left"><code>a &lt; b</code></td><td style="text-align:left"><code>lt(a, b)</code></td></tr><tr><td style="text-align:left">比较</td><td style="text-align:left"><code>a &lt;= b</code></td><td style="text-align:left"><code>le(a, b)</code></td></tr><tr><td style="text-align:left">相等</td><td style="text-align:left"><code>a == b</code></td><td style="text-align:left"><code>eq(a, b)</code></td></tr><tr><td style="text-align:left">不等</td><td style="text-align:left"><code>a != b</code></td><td style="text-align:left"><code>ne(a, b)</code></td></tr><tr><td style="text-align:left">比较</td><td style="text-align:left"><code>a &gt;= b</code></td><td style="text-align:left"><code>ge(a, b)</code></td></tr><tr><td style="text-align:left">比较</td><td style="text-align:left"><code>a &gt; b</code></td><td style="text-align:left"><code>gt(a, b)</code></td></tr></tbody></table></div><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习12-日期和时间</title>
      <link href="/2024/07/05/python-xue-xi-12-ri-qi-he-shi-jian/"/>
      <url>/2024/07/05/python-xue-xi-12-ri-qi-he-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><ul><li><p>Python 提供了一个<code>time</code> 和 <code>calendar</code> 模块可以用于格式化日期和时间，时间间隔是以<strong>秒</strong>为单位的浮点小数</p></li><li><p>每个时间戳都以自从 1970 年 1 月 1 日午夜（历元）经过了多长时间来表示</p></li><li>获取当前时间戳:<code>time.time()</code></li></ul><h2 id="1-时间元组"><a href="#1-时间元组" class="headerlink" title="1 时间元组"></a>1 时间元组</h2><p>很多Python函数用一个元组装起来的9组数字处理时间：<code>struct_time 元组</code></p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">字段</th><th>属性</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">4位数年</td><td>tm_year</td><td style="text-align:left">2008</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">月</td><td>tm_mon</td><td style="text-align:left">1 到 12</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">日</td><td>tm_mday</td><td style="text-align:left">1到31</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">小时</td><td>tm_hour</td><td style="text-align:left">0到23</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">分钟</td><td>tm_min</td><td style="text-align:left">0到59</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">秒</td><td>tm_sec</td><td style="text-align:left">0到61 (60或61 是闰秒)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">一周的第几日</td><td>tm_wday</td><td style="text-align:left">0到6 (0是周一)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">一年的第几日</td><td>tm_yday</td><td style="text-align:left">1到366</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">夏令时</td><td>tm_isdst</td><td style="text-align:left">-1, 0, 1, -1是决定是否为夏令时的标识</td></tr></tbody></table></div><h2 id="2-当前时间"><a href="#2-当前时间" class="headerlink" title="2 当前时间"></a>2 当前时间</h2><ul><li><p>从返回浮点数的时间戳方式向时间元组转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"本地时间为 :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span><span class="token comment"># 本地时间为 : time.struct_time(tm_year=2024, tm_mon=7, tm_mday=5, tm_hour=12, tm_min=53, tm_sec=27, tm_wday=4, tm_yday=187, tm_isdst=0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式化当前时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"本地时间为 :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span><span class="token comment"># 本地时间为 : Fri Jul  5 12:53:57 2024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-日期格式化"><a href="#3-日期格式化" class="headerlink" title="3 日期格式化"></a>3 日期格式化</h2><ul><li>使用 time 模块的 strftime 方法来格式化日期：<code>time.strftime(format[, t])</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment"># 格式化成2016-03-20 11:45:39形式</span><span class="token keyword">print</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2016-04-07 10:29:46</span><span class="token comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span><span class="token keyword">print</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Thu Apr 07 10:29:46 2016</span><span class="token comment"># 将格式字符串转换为时间戳</span>a <span class="token operator">=</span> <span class="token string">"Sat Mar 28 22:24:24 2016"</span><span class="token keyword">print</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1459175064.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>时间日期格式化符号</p><ul><li><p>%y 两位数的年份表示（00-99）</p></li><li><p>%Y 四位数的年份表示（000-9999）</p></li><li><p>%m 月份（01-12）</p></li><li><p>%d 月内中的一天（0-31）</p></li><li><p>%H 24小时制小时数（0-23）</p></li><li><p>%I 12小时制小时数（01-12）</p></li><li><p>%M 分钟数（00=59）</p></li><li><p>%S 秒（00-59）</p></li><li><p>%a 本地简化星期名称</p></li><li><p>%A 本地完整星期名称</p></li><li><p>%b 本地简化的月份名称</p></li><li><p>%B 本地完整的月份名称</p></li><li><p>%c 本地相应的日期表示和时间表示</p></li><li><p>%j 年内的一天（001-366）</p></li><li><p>%p 本地A.M.或P.M.的等价符</p></li><li><p>%U 一年中的星期数（00-53）星期天为星期的开始</p></li><li><p>%w 星期（0-6），星期天为星期的开始</p></li><li><p>%W 一年中的星期数（00-53）星期一为星期的开始</p></li><li><p>%x 本地相应的日期表示</p></li><li><p>%X 本地相应的时间表示</p></li><li><p>%Z 当前时区的名称</p></li><li><p>%% %号本身</p></li></ul></li></ul><h2 id="4-获取日历"><a href="#4-获取日历" class="headerlink" title="4 获取日历"></a>4 获取日历</h2><ul><li><code>Calendar</code>模块有很广泛的方法用来处理年历和月历</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> calendarcal <span class="token operator">=</span> calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"以下输出2024年7月份的日历:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''以下输出2024年7月份的日历:     July 2024Mo Tu We Th Fr Sa Su 1  2  3  4  5  6  7 8  9 10 11 12 13 1415 16 17 18 19 20 2122 23 24 25 26 27 2829 30 31'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Time模块"><a href="#5-Time模块" class="headerlink" title="5 Time模块"></a>5 Time模块</h2><div class="table-container"><table><thead><tr><th style="text-align:left">函数及描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">time.altzone<br>返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</td><td style="text-align:left">以下实例展示了 altzone()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print ("time.altzone %d " % time.altzone) time.altzone -28800</code></td></tr><tr><td style="text-align:left">time.asctime([tupletime]) <br>接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</td><td style="text-align:left">以下实例展示了 asctime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; t = time.localtime()</code><br><code>&gt;&gt;&gt; print ("time.asctime(t): %s " % time.asctime(t))</code><br><code>time.asctime(t): Thu Apr  7 10:36:20 2016</code></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-time-clock.html">time.clock()</a> <br>用以浮点数计算的秒数返回当前的CPU时间。用来<strong>衡量不同程序的耗时</strong>，比time.time()更有用。</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-time-clock.html">实例</a>由于该方法依赖操作系统，在 Python 3.3 以后不被推荐，而在 3.8 版本中被移除，需使用下列两个函数替代。<br><code>time.perf_counter()  # 返回系统运行时间 time.process_time()  # 返回进程运行时间</code></td></tr><tr><td style="text-align:left">time.ctime([secs]) <br>作用相当于asctime(localtime(secs))，未给参数相当于asctime()</td><td style="text-align:left">以下实例展示了 ctime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print ("time.ctime() : %s" % time.ctime()) time.ctime() : Thu Apr  7 10:51:58 2016</code></td></tr><tr><td style="text-align:left">time.gmtime([secs]) <br>接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0</td><td style="text-align:left">以下实例展示了 gmtime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print ("gmtime :", time.gmtime(1455508609.34375))</code><br><code>gmtime : time.struct_time(tm_year=2016, tm_mon=2, tm_mday=15, tm_hour=3, tm_min=56, tm_sec=49, tm_wday=0, tm_yday=46, tm_isdst=0)</code></td></tr><tr><td style="text-align:left">time.localtime([secs] <br>接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。</td><td style="text-align:left">以下实例展示了 localtime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print ("localtime(): ", time.localtime(1455508609.34375))</code><br><code>localtime():  time.struct_time(tm_year=2016, tm_mon=2, tm_mday=15, tm_hour=11, tm_min=56, tm_sec=49, tm_wday=0, tm_yday=46, tm_isdst=0)</code></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-time-mktime.html">time.mktime(tupletime)</a> <br>接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。</td><td style="text-align:left"><code>t = (2016, 2, 17, 17, 3, 38, 1, 48, 0)</code><br><code>secs = time.mktime( t )</code><br><code>print ("time.mktime(t) : %f" %  secs)</code><br><code>print ("asctime(localtime(secs)): %s" % time.asctime(time.localtime(secs)))</code><br>==time.mktime(t) : 1455699818.000000<br>asctime(localtime(secs)): Wed Feb 17 17:03:38 2016==</td></tr><tr><td style="text-align:left">time.sleep(secs) <br>推迟调用线程的运行，secs指秒数。</td><td style="text-align:left">以下实例展示了 sleep()函数的使用方法：<br><code>import time</code><br><code>print ("Start : %s" % time.ctime()) time.sleep( 5 )</code><br><code>print ("End : %s" % time.ctime())</code></td></tr><tr><td style="text-align:left">time.strftime(fmt[,tupletime]) <br>接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。</td><td style="text-align:left">以下实例展示了 strftime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))</code><br><code>2016-04-07 11:18:05</code></td></tr><tr><td style="text-align:left">time.strptime(str,fmt=’%a %b %d %H:%M:%S %Y’) <br>根据fmt的格式把一个时间字符串解析为时间元组。</td><td style="text-align:left">以下实例展示了 strptime()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; struct_time = time.strptime("30 Nov 00", "%d %b %y")</code><br><code>&gt;&gt;&gt; print ("返回元组: ", struct_time)</code><br><code>返回元组:  time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)</code></td></tr><tr><td style="text-align:left">time.time( ) <br>返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td><td style="text-align:left">以下实例展示了 time()函数的使用方法：<br><code>&gt;&gt;&gt; import time</code><br><code>&gt;&gt;&gt; print(time.time())</code><br><code>1459999336.1963577</code></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-time-tzset.html">time.tzset()</a> <br>根据环境变量TZ重新初始化时间相关设置。</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-time-tzset.html">实例</a></td></tr><tr><td style="text-align:left"><strong>time.perf_counter()</strong> <br>返回计时器的精准时间（系统的运行时间），包含整个系统的睡眠时间。由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的。</td><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-date-time.html#comment-35499">实例</a></td></tr><tr><td style="text-align:left"><strong>time.process_time()</strong> <br>返回当前进程执行 CPU 的时间总和，不包含睡眠时间。由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>time.timezone</strong></td><td>属性time.timezone是当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲;&lt;=0大部分欧洲，亚洲，非洲）</td></tr><tr><td><strong>time.tzname</strong></td><td>属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的</td></tr></tbody></table></div><h2 id="6-Calendar模块"><a href="#6-Calendar模块" class="headerlink" title="6 Calendar模块"></a>6 Calendar模块</h2><ul><li><p>星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用<code>calendar.setfirstweekday()</code>函数</p></li><li><p>| 函数                                              | 描述                                                         |<br>| :———————————————————————— | —————————————————————————————— |<br>| <strong>calendar.calendar(year,w=2,l=1,c=6)</strong>           | 返回一个多行字符串格式的 year 年年历，3 个月一行，间隔距离为 c。 每日宽度间隔为w字符。每行长度为 <strong>21* W+18+2* C</strong>。<strong>l</strong> 是每星期行数。 |<br>| <strong>calendar.firstweekday( )</strong>                      | 返回当前每周起始日期的设置。默认情况下，首次载入 calendar 模块时返回 0，即星期一。 |<br>| <strong>calendar.isleap(year)</strong>                         | 是闰年返回 True，否则为 False。                              |<br>| <strong>calendar.leapdays(y1,y2)</strong>                      | 返回在Y1，Y2两年之间的闰年总数。                             |<br>| <strong>calendar.month(year,month,w=2,l=1)</strong>            | 返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7<em> w+6。l是每星期的行数。 |<br>| <strong>calendar.monthcalendar(year,month)</strong>            | 返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。 |<br>| <strong>calendar.monthrange(year,month)</strong>               | 返回两个整数。第一个是该月的星期几，第二个是该月有几天。星期几是从0（星期一）到 6（星期日）。<br><code>&gt;&gt;&gt; import calendar</code><br><code>&gt;&gt;&gt; calendar.monthrange(2014, 11)</code><br><code>(5, 30)</code><br>(5, 30)解释：5 表示 2014 年 11 月份的第一天是周六，30 表示 2014 年 11 月份总共有 30 天。 |<br>| <strong>calendar.prcal(year, w=0, l=0, c=6, m=3)</strong>      | 相当于 print (calendar.calendar(year, w=0, l=0, c=6, m=3))。 |<br>| <strong>calendar.prmonth(theyear, themonth, w=0, l=0)</strong> | 相当于 <strong>print(calendar.month(theyear, themonth, w=0, l=0))</strong>。 |<br>| <strong>calendar.setfirstweekday(weekday)</strong>             | 设置每周的起始日期码。0（星期一）到6（星期日）。             |<br>| <strong>calendar.timegm(tupletime)</strong>                    | 和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）。 |<br>| <em>*calendar.weekday(year,month,day)</em></em>              | 返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。 |</p></li></ul><h2 id="7-datetime模块"><a href="#7-datetime模块" class="headerlink" title="7 datetime模块"></a>7 datetime模块</h2><ul><li><p>操作日期和时间</p><ul><li><code>datetime.date</code>：一个理想化的日期，它假设公历无限地延伸到未来和过去。该对象将年、月和日存储为属性。</li><li><code>datetime.time</code>：一个理想化的时间，假设每天有86400秒，没有闰秒。该对象存储时、分、秒、微秒和 tzinfo （时区信息）。</li><li><code>datetime.datetime</code>：是 datetime.date 和 datetime.time 的结合，具有这两个类的所有属性</li></ul></li><li><p><strong>datetime 对象可以根据是否包含时区信息分为“感知型”和“简单型”两类</strong></p><ul><li><p>感知型对象：具有政治性时间调整信息（如<strong>时区和夏令时</strong>），能够定位自身相对于其他感知型对象的精确时间点。 感知型对象是一个没有解释空间的<strong>固定时间点</strong>。对于要求感知型对象的应用程序，datetime 和 time 对象具有一个可选的<strong>时区信息属性 tzinfo</strong>，它接受抽象类 tzinfo 的子类的一个实例。 tzinfo 对象会捕获与 UTC 时间的差值、时区名称以及夏令时是否生效等信息。</p><blockquote><p>感知型 datetime 实例可以明确地将自己与其他感知型 datetime 实例进行比较，并且在进行算术运算时返回正确的时间差。 </p></blockquote></li><li><p>简单型对象：没有足够多的信息，不能定位自身相对于其他 datetime 对象的时间点。 一个简单型对象所代表的是世界标准时间（UTC）、当地时间还是某个其他时区的时间，完全取决于具体程序，就像一个特定数字所代表的是米、英里还是质量完全取决于具体程序一样。 简单型对象更易于理解和使用，代价则是忽略了某些现实性考量。</p><blockquote><ol><li><strong>date 类型的对象都是简单型的</strong>。</li><li>time 或 datetime 类型的对象可以是感知型或者简单型，对于一个x，以下两个条件同时成立时，x是感知型的：（1）x.tzinfo 不为 None（2）x.tzinfo.utcoffset() 不返回 None。</li><li><strong>感知型和简单型之间的区别不适用于 timedelta 对象</strong>。</li><li>简单型 datetime 对象会被许多 datetime 方法当作本地时间来处理，如果你有一个表示 UTC 的简单型 datetime，请使用 datetime.replace(tzinfo=timezone.utc) 将其改为感知型。</li></ol></blockquote></li></ul></li><li><p>datetime类</p><ul><li><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407161901214.png" alt="datetime类"></p></li><li><p>| 类方法                                           | 描述                                                         |<br>| ———————————————————————— | —————————————————————————————— |<br>| datetime.today()                                 | 返回一个简单型datetime 对象，表示当前地方时间。（tzinfo 为 None）此方法的功能等价于 now()，但是不带 tz 形参。 |<br>| datetime.now(tz=None)                            | 返回 datetime 对象，表示当前地方时间。（1）如果可选参数 tz 为 None 或未指定，这就类似于 today()；（2）如果 tz 不为 None，它必须是 tzinfo 子类的一个实例，并且当前日期和时间将被转换到 tz 时区；（3）使用带 UTC（tz=timezone.utc）的 datetime.now() 得到当前 UTC datetime对象 |<br>| datetime.utcnow()                                | 返回一个简单型 datetime 对象（其中 tzinfo 为 None），表示当前 UTC。注：不推荐使用此方法，推荐使用 datetime.now(timezone.utc)。 |<br>| datetime.combine(date, time, tzinfo=time.tzinfo) | 返回一个新的 datetime 对象，其日期部分等于给定的 date 对象的值，而其时间部分等于给定的 time 对象的值。（1）如果提供了 tzinfo 参数，其值会被用来设置结果的 tzinfo 属性，否则将使用 time 参数的 tzinfo 属性。（2）如果 date 参数是一个 datetime 对象，则其时间部分和 tzinfo 属性将被忽略。（3）对于任意 datetime 对象 d，d == datetime.combine(d.date(), d.time(), d.tzinfo)。 |<br>| datetime.strptime(date_string, format)           | 返回一个对应于 date_string，根据 format 进行解析得到的datetime对象。（1）如果 format 不包含微秒或时区信息，等价于:datetime(*(time.strptime(date_string, format)[0:6]))（2）如果 date_string 和 format 无法被 time.strptime() 解析或它返回一个不是时间元组的值则将引发 ValueError |<br>| datetime.fromisoformat(date_string)              | 返回一个对应于以任何有效的 8601 格式给出的 date_string 的 datetime |<br>| datetime.fromisocalendar(year, week, day)        | 返回以 year, week 和 day 值指明的 ISO 历法日期所对应的 datetime。 |<br>| datetime.fromordinal(ordinal)                    | 返回一个简单型 datetime 对象，表示格列高利历序号对应的日期。注：结果中的 hour, minute, second 和 microsecond 值均为 0，tzinfo 值为 None |<br>| datetime.fromtimestamp(timestamp, tz=None)       | 返回一个简单型 datetime 对象，表示 unix time 对应的本地日期和时间 |<br>| datetime.utcfromtimestamp(timestamp)             | 返回一个简单型 datetime 对象，表示 unix time 对应的 UTC。注：tzinfo 值为 None |</p></li><li><p>| 算术运算                                                     | <strong>描述</strong>                                                     |                                                              |<br>| :—————————————————————————————- | :—————————————————————————————- | —————————————————————————————— |<br>| <code>datetime2 = datetime1 + timedelta</code>                          | 如果 timedelta.days &gt; 0 则在时间线上前进，如果 timedelta.days &lt; 0 则在时间线上后退。 | （1）输出结果具有与输入的 datetime 相同的 tzinfo 属性，并且操作完成后 datetime2 - datetime1 == timedelta。 |<br>| <code>datetime2 = datetime1 - timedelta</code>                          | 如果 timedelta.days &gt; 0 则在时间线上后退，如果 timedelta.days &lt; 0 则在时间线上前进。 | （2）即使输入的是一个感知型对象，该方法也不会进行时区调整。  |<br>| <code>timedelta = datetime1 - datetime2</code>                          | 仅对两个操作数均为简单型或均为感知型时有定义，如果一个是感知型而另一个是简单型，将会引发 TypeError。 | （1）如果两个比较数都是感知的，并且具有相同的tzinfo属性，则忽略tzinfo和fold属性，基于基本的日期时间进行计算或比较。 |<br>| <code>datetime1 == datetime2</code><br><code>datetime1 != datetime2</code>       | 相等性比较。<br>简单型和感知型 datetime 对象绝对不会相等，datetime 对象和不为 datetime 实例的 date 对象绝对不会相等（即使二者表示相同的日期）。 | （2）如果两个比较数都是感知的并且具有不同的tzinfo属性，则先将比较数转换为UTC（dt.replace(tzinfo=None) - dt.utcoffset()），再进行比较。 |<br>| <code>datetime1 &lt; datetime2</code><br><code>datetime1 &gt; datetime2</code><br><code>datetime1 &lt;= datetime2</code><br><code>datetime1 &gt;= datetime2</code> | 顺序比较：<br>简单型和感知型对象之间，以及 datetime 对象与非 datetime 实例的 date 对象之间的顺序比较会引发 TypeError。 |                                                              |</p></li></ul></li><li><p>date 类、time 类</p><ul><li>类属性、类方法、实例属性、实例方法与 datetime 类似</li></ul></li><li><p>timedelta类</p><ul><li>timedelta 对象表示一段持续的时间，即两个 datetime 或 date 实例之间的差值</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Eliauk-L/blog-img@img/img/202407161909312.png" alt="timedelta类"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltadelta <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span> microseconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> milliseconds<span class="token operator">=</span><span class="token number">29000</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> weeks<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># Only days, seconds, and microseconds remain</span>deltadatetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">29156</span><span class="token punctuation">,</span> microseconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例方法：timedelta.total_seconds()——返回占用了多少秒。等价于 td / timedelta(seconds=1)。对于秒以外的间隔单位，使用除法形式，如： td / timedelta(microseconds=1)。</li></ul></li><li><p>tzinfo | timezone</p><ul><li>tzinfo是一个抽象基类，也就是说该类不应被直接实例化。需要定义tzinfo的子类来捕获有关特定时区的信息。</li><li>tzinfo 的 (某个实体子类) 的实例可以被传给 datetime 和 time 对象的构造器。 这些对象会将它们的属性视为对应的本地时间，并且 tzinfo 对象支持展示本地时间与 UTC 的差值、时区名称以及 DST 差值的方法，都是与传给它们的日期或时间对象的相对值</li><li>timezone 类是 tzinfo 的子类，它的实例代表一个由与 UTC 的固定时差定义的时区</li></ul></li></ul><h2 id="8-不同时间单位的转换和计算"><a href="#8-不同时间单位的转换和计算" class="headerlink" title="8 不同时间单位的转换和计算"></a>8 不同时间单位的转换和计算</h2><ul><li><p>使用<code>datetime</code> 模块实现不同时间单位的转换和计算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>days<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>seconds<span class="token number">37800</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token number">10.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3600</span><span class="token number">58.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表示指定的日期和时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2012-10-03 00:00:00</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>days<span class="token comment"># 89</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token comment"># 2012-12-21 14:54:43.094063</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>now <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2012-12-21 15:04:43.094063</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>datetime</code> 会自动处理闰年</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">-</span> bdatetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>days<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> d<span class="token punctuation">)</span><span class="token punctuation">.</span>days<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算一周中某一天上一次出现的日期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- encoding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Topic: 最后的周五Desc :"""</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltaweekdays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span>            <span class="token string">'Friday'</span><span class="token punctuation">,</span> <span class="token string">'Saturday'</span><span class="token punctuation">,</span> <span class="token string">'Sunday'</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''先将开始日期和目标日期映射到星期数组的位置上(星期一索引为0)， 然后通过模运算计算出目标日期要经过多少天才能到达开始日期。然后用开始日期减去那个时间差即得到结果日期'''</span><span class="token keyword">def</span> <span class="token function">get_previous_byday</span><span class="token punctuation">(</span>dayname<span class="token punctuation">,</span> start_date<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start_date <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        start_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>    day_num <span class="token operator">=</span> start_date<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span>    day_num_target <span class="token operator">=</span> weekdays<span class="token punctuation">.</span>index<span class="token punctuation">(</span>dayname<span class="token punctuation">)</span>    days_ago <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> day_num <span class="token operator">-</span> day_num_target<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span>    <span class="token keyword">if</span> days_ago <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        days_ago <span class="token operator">=</span> <span class="token number">7</span>    target_date <span class="token operator">=</span> start_date <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>days_ago<span class="token punctuation">)</span>    <span class="token keyword">return</span> target_date<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># For reference</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">263076</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> get_previous_byday<span class="token punctuation">(</span><span class="token string">'Monday'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">29045</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> get_previous_byday<span class="token punctuation">(</span><span class="token string">'Tuesday'</span><span class="token punctuation">)</span> <span class="token comment"># Previous week, not today</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">629771</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> get_previous_byday<span class="token punctuation">(</span><span class="token string">'Friday'</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">911393</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> get_previous_byday<span class="token punctuation">(</span><span class="token string">'Sunday'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在当前月份中循环每一天</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> date<span class="token punctuation">,</span> timedelta<span class="token keyword">import</span> calendar<span class="token triple-quoted-string string">'''在这样的日期上循环并需要事先构造一个包含所有日期的列表。 先计算出开始日期和结束日期， 然后在步进的时候使用 datetime.timedelta 对象递增这个日期变量即可'''</span><span class="token keyword">def</span> <span class="token function">get_month_range</span><span class="token punctuation">(</span>start_date<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start_date <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        start_date <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    _<span class="token punctuation">,</span> days_in_month <span class="token operator">=</span> calendar<span class="token punctuation">.</span>monthrange<span class="token punctuation">(</span>start_date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> start_date<span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token comment"># 找出该月的总天数</span>    end_date <span class="token operator">=</span> start_date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>days_in_month<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>start_date<span class="token punctuation">,</span> end_date<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a_day <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> first_day<span class="token punctuation">,</span> last_day <span class="token operator">=</span> get_month_range<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> first_day <span class="token operator">&lt;</span> last_day<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>first_day<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     first_day <span class="token operator">+=</span> a_day<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 2012-08-01</span><span class="token comment"># 2012-08-02</span><span class="token comment"># 2012-08-03</span><span class="token comment"># 2012-08-04</span><span class="token comment"># 2012-08-05</span><span class="token comment"># 2012-08-06</span><span class="token comment"># 2012-08-07</span><span class="token comment"># 2012-08-08</span><span class="token comment"># 2012-08-09</span><span class="token comment">#... and so on...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9-字符串转换为日期"><a href="#9-字符串转换为日期" class="headerlink" title="9 字符串转换为日期"></a>9 字符串转换为日期</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> text <span class="token operator">=</span> <span class="token string">'2012-09-20'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> diff <span class="token operator">=</span> z <span class="token operator">-</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> diffdatetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77824</span><span class="token punctuation">,</span> <span class="token number">177393</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> zdatetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">177393</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nice_z <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token string">'%A %B %d, %Y'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nice_z<span class="token string">'Sunday September 23, 2012'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-结合时区的日期操作"><a href="#10-结合时区的日期操作" class="headerlink" title="10 结合时区的日期操作"></a>10 结合时区的日期操作</h2><ul><li><p>处理本地化日期的通常的策略<strong>先将所有日期转换为UTC时间， 并用它来执行所有的中间存储和操作</strong></p></li><li><p><code>pytz</code> 模块一个主要用途是将 <code>datetime</code> 库创建的简单日期对象本地化</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pytz <span class="token keyword">import</span> timezone<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment"># 2012-12-21 09:30:00</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Localize the date for Chicago</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> central <span class="token operator">=</span> timezone<span class="token punctuation">(</span><span class="token string">'US/Central'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> loc_d <span class="token operator">=</span> central<span class="token punctuation">.</span>localize<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>loc_d<span class="token punctuation">)</span><span class="token comment"># 2013-03-10 01:45:00-06:00</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> utc_d <span class="token operator">=</span> loc_d<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>pytz<span class="token punctuation">.</span>utc<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>utc_d<span class="token punctuation">)</span><span class="token comment"># 2013-03-10 07:45:00+00:00</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> later_utc <span class="token operator">=</span> utc_d <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>later_utc<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>central<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2013-03-10 03:15:00-05:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>得到时区的名称</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pytz<span class="token punctuation">.</span>country_timezones<span class="token punctuation">[</span><span class="token string">'IN'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Asia/Kolkata'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://blog.csdn.net/weixin_40134371/article/details/137071930">https://blog.csdn.net/weixin_40134371/article/details/137071930</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习11-字节数组</title>
      <link href="/2024/07/05/python-xue-xi-11-zi-jie-shu-zu/"/>
      <url>/2024/07/05/python-xue-xi-11-zi-jie-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="字节数组"><a href="#字节数组" class="headerlink" title="字节数组"></a>字节数组</h1><h2 id="1-定义字节数"><a href="#1-定义字节数" class="headerlink" title="1 定义字节数"></a>1 定义字节数</h2><ul><li><p>bytes 类型表示的是<strong>不可变的二进制序列</strong></p></li><li><p>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符</p></li><li><p>处理传输二进制数据，比如图像文件、音频文件、视频文件</p></li><li><p>创建bytes对象</p><ul><li><strong>使用 b 前缀</strong>   <code>x = b"hello"</code></li><li><strong>bytes()函数</strong>   <code>x = bytes("hello", encoding="utf-8")</code></li></ul></li><li><p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。由于 bytes 类型是不可变的，因此在进行修改操作时需要<strong>创建一个新的 bytes 对象</strong></p></li><li><p>比较操作需要转换为相应的整数值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">b"hello"</span><span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The first element is 'h'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>索引和迭代动作返回的是<strong>字节的值</strong>而不是字节字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Text string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'H'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Byte string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token string">b'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">72</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> b<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">72</span><span class="token number">101</span><span class="token number">108</span><span class="token number">108</span><span class="token number">111</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-十六进制编解码"><a href="#2-十六进制编解码" class="headerlink" title="2 十六进制编解码"></a>2 十六进制编解码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Initial byte string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">b'hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Encode as hex</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> binascii<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> h <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> h<span class="token string">b'68656c6c6f'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Decode back to bytes</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token string">b'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> base64<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> h <span class="token operator">=</span> base64<span class="token punctuation">.</span>b16encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> h<span class="token string">b'68656C6C6F'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> base64<span class="token punctuation">.</span>b16decode<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token string">b'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>函数 <code>base64.b16decode()</code> 和 <code>base64.b16encode()</code> 只能操作大写形式的十六进制字母， 而 <code>binascii</code> 模块中的函数大小写都能处理</p></li><li><p>编码函数所产生的输出总是一个<strong>字节字符串</strong>.</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> h <span class="token operator">=</span> base64<span class="token punctuation">.</span>b16encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token string">b'68656C6C6F'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 以Unicode形式输出</span>68656C6C6F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Base64编解码"><a href="#3-Base64编解码" class="headerlink" title="3 Base64编解码"></a>3 Base64编解码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Some byte data</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">b'hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> base64<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Encode as Base64</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">b'aGVsbG8='</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Decode from Base64</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">b'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Base64编码仅仅用于<strong>面向字节的数据</strong>比如字节字符串和字节数组。</p></li><li><p>编码处理的输出结果总是一个字节字符串。</p></li><li><p>混合使用Base64编码的数据和Unicode文本</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'aGVsbG8='</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习10-布尔</title>
      <link href="/2024/07/05/python-xue-xi-10-bu-er/"/>
      <url>/2024/07/05/python-xue-xi-10-bu-er/</url>
      
        <content type="html"><![CDATA[<h1 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h1><ul><li><p>布尔类型只有两个值：True 和 False。</p></li><li><p>bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</p></li><li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 <strong>True 视为 1，False 视为 0</strong>。</li><li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li><li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li><li>可以使用 <code>bool()</code> 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 <code>False</code>：<code>None</code>、<code>False</code>、<strong>零</strong> (<code>0</code>、<code>0.0</code>、<code>0j</code>)、<strong>空序列</strong>（如 <code>''</code>、<code>()</code>、<code>[]</code>）和<strong>空映射</strong>（如 <code>{}</code>）。其他所有值转换为布尔值时均为 <code>True</code>。</li><li>==在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False==</li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习09-集合</title>
      <link href="/2024/07/04/python-xue-xi-09-ji-he/"/>
      <url>/2024/07/04/python-xue-xi-09-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li><p>集合：<strong>无序不重复</strong>的元素序列，可以进行交集、并集、差集等常见的集合操作</p></li><li><p><strong>使用set()或{}创建集合，空集合必须用set()表示，因为{}用来表示空字典</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> basket <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span>                      <span class="token comment"># 这里演示的是去重功能</span><span class="token punctuation">{</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'orange'</span> <span class="token keyword">in</span> basket                 <span class="token comment"># 快速判断元素是否在集合内</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'crabgrass'</span> <span class="token keyword">in</span> basket<span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 下面展示两个集合间的运算.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a                                  <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">-</span> b                              <span class="token comment"># 集合a中包含而集合b中不包含的元素</span><span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">|</span> b                              <span class="token comment"># 集合a或b中包含的所有元素</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">&amp;</span> b                              <span class="token comment"># 集合a和b中都包含了的元素</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">^</span> b                              <span class="token comment"># 不同时包含于a和b的元素</span><span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'abracadabra'</span> <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'abc'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-集合操作"><a href="#1-集合操作" class="headerlink" title="1 集合操作"></a>1 集合操作</h2><blockquote><p><strong>集合添加</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>集合移除</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>   <span class="token comment"># 不存在会发生错误</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token string">'Facebook'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>  <span class="token comment"># 不存在不会发生错误</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"Facebook"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> thisset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 随机删除集合中的一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thisset<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-集合内置方法"><a href="#2-集合内置方法" class="headerlink" title="2 集合内置方法"></a>2 集合内置方法</h2><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td style="text-align:left">为集合添加元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td style="text-align:left">移除集合中的所有元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td style="text-align:left">拷贝一个集合</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td style="text-align:left">返回多个集合的差集</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td style="text-align:left">移除两个集合中都存在的元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td style="text-align:left">删除集合中指定的元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td style="text-align:left">返回集合的交集</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td style="text-align:left">返回集合的交集。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td style="text-align:left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td style="text-align:left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td style="text-align:left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td style="text-align:left">随机移除元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td style="text-align:left">移除指定元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td style="text-align:left">返回两个集合中不重复的元素集合。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td style="text-align:left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td style="text-align:left">返回两个集合的并集</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td style="text-align:left">给集合添加元素</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></td><td style="text-align:left">计算集合元素个数</td></tr></tbody></table></div><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习08-字典</title>
      <link href="/2024/07/04/python-xue-xi-08-zi-dian/"/>
      <url>/2024/07/04/python-xue-xi-08-zi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul><li><p>字典是另一种<strong>可变</strong>容器模型，且可存储<strong>任意类型</strong>对象。</p></li><li><p>字典的每个键值 <code>key:value</code> 对用冒号 : 分割，每个键值对之间用逗号 <code>,</code> 分割，整个字典包括在花括号<code>{}</code>中 。</p></li><li><p><strong>键是唯一</strong>的，如果重复最后的一个键值对会<strong>替换</strong>前面的，值不需要唯一</p></li><li><p>值可以取任何数据类型，但<strong>键必须是不可变的，如==字符串，数字或元组==</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">tinydict2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'abc'</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">98.6</span><span class="token punctuation">:</span> <span class="token number">37</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-字典操作"><a href="#1-字典操作" class="headerlink" title="1 字典操作"></a>1 字典操作</h2><blockquote><p><strong>访问字典</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span> tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"tinydict['Name']: "</span> <span class="token operator">+</span> tinydict<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"tinydict['Age']: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tinydict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>访问不存在的键将会报错KeyError</strong>==&gt;使用<code>get()</code></p><blockquote><p><strong>修改字典</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span> tinydict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token comment"># 更新</span>tinydict<span class="token punctuation">[</span><span class="token string">'School'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"RUNOOB"</span> <span class="token comment"># 添加</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"tinydict['Age']: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tinydict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"tinydict['School']: "</span> <span class="token operator">+</span> tinydict<span class="token punctuation">[</span><span class="token string">'School'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>删除字典</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span> <span class="token keyword">del</span> tinydict<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span>  <span class="token comment"># 删除键是'Name'的条目</span>tinydict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 清空字典所有条目</span><span class="token keyword">del</span> tinydict          <span class="token comment"># 删除字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除操作不可逆</p><blockquote><p><strong>集合操作</strong></p></blockquote><ul><li><p>字典的 <code>keys()</code> 方法返回一个展现键集合的键视图对象。字典的 <code>items()</code> 方法返回一个包含 (键，值) 对的元素视图对象。</p></li><li><p><strong>键视图和元素视图支持集合操作</strong>：合并、交、差运算</p></li><li><p>注意:<code>values()</code>不支持集合操作</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'x'</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'y'</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'z'</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'w'</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">'x'</span> <span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token string">'y'</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment"># Find keys in common</span>a<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># { 'x', 'y' }</span><span class="token comment"># Find keys in a that are not in b</span>a<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># { 'z' }</span><span class="token comment"># Find (key,value) pairs in common</span>a<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># { ('y', 2) }</span><span class="token comment"># Make a new dictionary with certain keys removed</span>c <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> a<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># c is {'x': 1, 'y': 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>字典合并</strong></p></blockquote><ul><li><p>使用 <code>collections</code> 模块中的 <code>ChainMap</code> 类:逻辑合并， <code>ChainMap</code> 类在内部创建了一个容纳这些字典的列表 并重新定义了一些常见的字典操作来遍历这个列表。如果出现重复键，那么第一次出现的映射值会被返回。对于字典的更新或删除操作总是影响的是列表中第一个字典。不创建新的字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> ChainMapc <span class="token operator">=</span> ChainMap<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 1 (from a)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 2 (from b)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 3 (from a)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged <span class="token operator">=</span> ChainMap<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token comment"># Notice change to merged dicts</span><span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>update()</code> 方法将两个字典合并:原字典更新不会影响新的合并字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged<span class="token punctuation">.</span>update<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> merged<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-字典遍历"><a href="#2-字典遍历" class="headerlink" title="2 字典遍历"></a>2 字典遍历</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">user_0 <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'efermi'</span><span class="token punctuation">,</span>  <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'enrico'</span><span class="token punctuation">,</span>  <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'fermi'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>遍历所有键值对—items()</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>遍历所有键</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> key <span class="token keyword">in</span> user_0<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># keys()返回列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>遍历所有值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value:"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="3-字典置函数-amp-方法"><a href="#3-字典置函数-amp-方法" class="headerlink" title="3 字典置函数&amp;方法"></a>3 字典置函数&amp;方法</h2><div class="table-container"><table><thead><tr><th>函数&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/att-dictionary-cmp.html"> cmp(dict1, dict2)</a></td><td>比较两个字典元素。（Python3.x已移除）</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-len.html">len(dict)</a></td><td>计算字典元素个数，即<strong>键的总数</strong>。</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-str.html"> str(dict)</a></td><td>输出字典可打印的<strong>字符串</strong>表示。</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-type.html"> type(variable)</a></td><td>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-clear.html"> dict.clear()</a></td><td>删除字典内所有元素</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-copy.html">dict.copy()</a></td><td>返回一个字典的浅复制</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-fromkeys.html">dict.fromkeys(seq[, val])</a></td><td>创建一个新字典，<strong>以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值，默认None</strong>。需保存变量</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-get.html">dict.get(key, default=None)</a></td><td>返回指定键的值，如果<strong>值不在</strong>字典中返回default值</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-has_key.html"> dict.has_key(key)</a></td><td>如果键在字典dict里返回true，否则返回false。Python3 不支持。改为 <code>in</code></td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-items.html">dict.items()</a></td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-keys.html">dict.keys()</a></td><td>以列表返回一个字典所有的键</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-setdefault.html"> dict.setdefault(key, default=None)</a></td><td>和get()类似, 但如果<strong>键不存在</strong>于字典中，将会添加键并将值设为default</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-update.html">dict.update(dict2)</a></td><td>把字典dict2的键/值对<strong>更新</strong>到dict里   合并</td></tr><tr><td><a href="https://www.runoob.com/python/att-dictionary-values.html">dict.values()</a></td><td>以列表返回字典中的所有值</td></tr><tr><td><a href="https://www.runoob.com/python/python-att-dictionary-pop.html">pop(key[,default])</a></td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html">popitem()</a></td><td><strong>返回并删除</strong>字典中的最后一对键和值。</td></tr></tbody></table></div><h2 id="4-字典复制"><a href="#4-字典复制" class="headerlink" title="4 字典复制"></a>4 字典复制</h2><ul><li><p><strong>直接复制</strong>:浅拷贝: 引用对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span><span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token string">'num'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span> dict2 <span class="token operator">=</span> dict1<span class="token comment"># id(dict1) = id(dict2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>copy()</strong>:浅拷贝—<strong>深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> dict1 <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span><span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token string">'num'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span> dict3 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 修改 data 数据</span>dict1<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'root'</span>dict1<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict3<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'num'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'num'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'runoob'</span><span class="token punctuation">}</span> <span class="token comment">#dict3 父对象进行了深拷贝，不会随dict1 修改而修改，子对象是浅拷贝所以随 dict1 的修改而修改  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字典子集构造</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">prices <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'ACME'</span><span class="token punctuation">:</span> <span class="token number">45.23</span><span class="token punctuation">,</span>    <span class="token string">'AAPL'</span><span class="token punctuation">:</span> <span class="token number">612.78</span><span class="token punctuation">,</span>    <span class="token string">'IBM'</span><span class="token punctuation">:</span> <span class="token number">205.55</span><span class="token punctuation">,</span>    <span class="token string">'HPQ'</span><span class="token punctuation">:</span> <span class="token number">37.20</span><span class="token punctuation">,</span>    <span class="token string">'FB'</span><span class="token punctuation">:</span> <span class="token number">10.75</span><span class="token punctuation">}</span><span class="token comment"># Make a dictionary of all prices over 200</span>p1 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> prices<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">}</span>p1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> prices<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token comment"># Make a dictionary of tech stocks</span>tech_names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'AAPL'</span><span class="token punctuation">,</span> <span class="token string">'IBM'</span><span class="token punctuation">,</span> <span class="token string">'HPQ'</span><span class="token punctuation">,</span> <span class="token string">'MSFT'</span><span class="token punctuation">}</span>p2 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> prices<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> key <span class="token keyword">in</span> tech_names<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-字典嵌套"><a href="#5-字典嵌套" class="headerlink" title="5 字典嵌套"></a>5 字典嵌套</h2><blockquote><p><strong>字典列表</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">user_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'alice'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">for</span> user <span class="token keyword">in</span> user_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>在字典中存储列表</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">student <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token string">'languages'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'C++'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> language <span class="token keyword">in</span> student<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'languages'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>嵌套字典</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">users <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'aeinstein'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'albert'</span><span class="token punctuation">,</span>         <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span>         <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'princeton'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token string">'mcurie'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'marie'</span><span class="token punctuation">,</span>         <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'curie'</span><span class="token punctuation">,</span>         <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'paris'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token keyword">for</span> username<span class="token punctuation">,</span> user_info <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUsername: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span> full_name <span class="token operator">=</span> user_info<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> user_info<span class="token punctuation">[</span><span class="token string">'last'</span><span class="token punctuation">]</span> location <span class="token operator">=</span> user_info<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tFull name: "</span> <span class="token operator">+</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tLocation: "</span> <span class="token operator">+</span> location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-多值映射"><a href="#6-多值映射" class="headerlink" title="6 多值映射"></a>6 多值映射</h2><ul><li><p>常规字典就是一个键对应一个单值的映射。如果想实现一个键多值映射，需要将这多个值放入列表或集合中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span>e <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>collections</code> 模块中的 <code>defaultdict</code> 来构造字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictd <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>d <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment"># 一个普通的字典</span>d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>defaultdict</code> 会自动为将要访问的键（就算目前字典中并不存在这样的键）创建映射实体</p></li></ul><h2 id="7-字典排序"><a href="#7-字典排序" class="headerlink" title="7 字典排序"></a>7 字典排序</h2><blockquote><p><strong>次序字典</strong></p></blockquote><ul><li>使用 <code>collections</code> 模块中的 <code>OrderedDict</code> 类控制一个字典中元素的顺序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDictd <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>d<span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>d<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>d<span class="token punctuation">[</span><span class="token string">'grok'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token comment"># Outputs "foo 1", "bar 2", "spam 3", "grok 4"</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> d<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>OrderedDict</code> 内部维护着一个根据键插入顺序排序的<strong>双向链表</strong>。每次当一个新的元素插入进来的时候， 它会被放到链表的<strong>尾部</strong>。对于一个已经存在的键的重复赋值不会改变键的顺序，同时一个 <code>OrderedDict</code> 的大小是一个普通字典的两倍</li></ul><blockquote><p><strong>字典列表关键字排序</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">rows <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Jones'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1003</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Beazley'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1002</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Cleese'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'Big'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Jones'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgetterrows_by_fname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'fname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rows_by_uid <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows_by_fname<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows_by_uid<span class="token punctuation">)</span>rows_by_lfname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'lname'</span><span class="token punctuation">,</span><span class="token string">'fname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">min</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Cleese'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'fname'</span><span class="token punctuation">:</span> <span class="token string">'Big'</span><span class="token punctuation">,</span> <span class="token string">'lname'</span><span class="token punctuation">:</span> <span class="token string">'Jones'</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> <span class="token number">1004</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>operator.itemgetter()</code> 函数有一个被 <code>rows</code> 中的记录用来查找值的索引参数。可以是一个字典键名称， 一个整形值或者任何能够传入一个对象的 <code>__getitem__()</code> 方法的值。 如果你传入多个索引参数给 <code>itemgetter()</code> ，它生成的 <code>callable</code> 对象会返回一个包含所有元素值的元组， 并且 <code>sorted()</code> 函数会根据这个元组中元素顺序去排序。</p></li><li><p>用 <code>lambda</code> 表达式代替，但<code>itemgetter()</code> 方式会运行的稍微快点</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">rows_by_fname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> r<span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token string">'fname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rows_by_lfname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> r<span class="token punctuation">:</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token string">'lname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token string">'fname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-数据字典运算"><a href="#8-数据字典运算" class="headerlink" title="8 数据字典运算"></a>8 数据字典运算</h2><ul><li><p>在数据字典中执行一些计算操作（比如求最小值、最大值、排序等等）</p></li><li><p>使用 <code>zip()</code> 函数先将键和值反转过来：<code>zip()</code> 函数创建的是一个<strong>只能访问一次</strong>的迭代器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">prices <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'ACME'</span><span class="token punctuation">:</span> <span class="token number">45.23</span><span class="token punctuation">,</span>    <span class="token string">'AAPL'</span><span class="token punctuation">:</span> <span class="token number">612.78</span><span class="token punctuation">,</span>    <span class="token string">'IBM'</span><span class="token punctuation">:</span> <span class="token number">205.55</span><span class="token punctuation">,</span>    <span class="token string">'HPQ'</span><span class="token punctuation">:</span> <span class="token number">37.20</span><span class="token punctuation">,</span>    <span class="token string">'FB'</span><span class="token punctuation">:</span> <span class="token number">10.75</span><span class="token punctuation">}</span>min_price <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prices<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># min_price is (10.75, 'FB')</span>max_price <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prices<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># max_price is (612.78, 'AAPL')</span>prices_sorted <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prices<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># prices_sorted is [(10.75, 'FB'), (37.2, 'HPQ'),</span><span class="token comment">#                   (45.23, 'ACME'), (205.55, 'IBM'),</span><span class="token comment">#                   (612.78, 'AAPL')]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>min()</code> 和 <code>max()</code> 函数中提供 <code>key</code> 函数参数来获取最小值或最大值对应的键的信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">min</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> prices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Returns 'FB'</span><span class="token builtin">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> prices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Returns 'AAPL'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习07-元组</title>
      <link href="/2024/07/03/python-xue-xi-07-yuan-zu/"/>
      <url>/2024/07/03/python-xue-xi-07-yuan-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li><p>元组（tuple）：<strong>元素不可修改</strong>，使用<strong>小括号</strong></p></li><li><p>元组中只包含一个元素时，需要<strong>在元素后面添加逗号</strong><code>tuple1 = (50,)</code></p></li><li><p>元组可以使用<strong>下标索引</strong>来访问元组中的值</p></li><li><p>元组中的<strong>元素值是不允许修改</strong>的，但我们可以对元组进行<strong>连接组合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34.56</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">)</span> <span class="token comment"># 以下修改元组元素操作是非法的。</span><span class="token comment"># tup1[0] = 100</span> <span class="token comment"># 创建一个新的元组</span>tup3 <span class="token operator">=</span> tup1 <span class="token operator">+</span> tup2<span class="token keyword">print</span><span class="token punctuation">(</span>tup3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>元组中的元素值是<strong>不允许删除</strong>的，但可以使用<strong>del语句来删除整个元组</strong></p></li></ul><h2 id="1-元组运算符"><a href="#1-元组运算符" class="headerlink" title="1 元组运算符"></a>1 元组运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Python 表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len((1, 2, 3))</td><td style="text-align:left">3</td><td style="text-align:left">计算元素个数</td></tr><tr><td style="text-align:left">(1, 2, 3) + (4, 5, 6)</td><td style="text-align:left">(1, 2, 3, 4, 5, 6)</td><td style="text-align:left">连接</td></tr><tr><td style="text-align:left">(‘Hi!’,) * 4</td><td style="text-align:left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td style="text-align:left">复制</td></tr><tr><td style="text-align:left">3 in (1, 2, 3)</td><td style="text-align:left">True</td><td style="text-align:left">元素是否存在</td></tr><tr><td style="text-align:left">for x in (1, 2, 3): print x,</td><td style="text-align:left">1 2 3</td><td style="text-align:left">迭代</td></tr></tbody></table></div><h2 id="2-无关闭分隔符"><a href="#2-无关闭分隔符" class="headerlink" title="2 无关闭分隔符"></a>2 无关闭分隔符</h2><ul><li><p><strong>任意无符号的对象，以逗号隔开，默认为元组</strong></p></li><li><p><code>tup = "a", "b", "c", "d"</code></p></li></ul><h2 id="3-元组内置函数"><a href="#3-元组内置函数" class="headerlink" title="3 元组内置函数"></a>3 元组内置函数</h2><ul><li>| 函数                                                         | 描述                                                   |<br>| —————————————————————————————— | ——————————————————————————— |<br>| <a href="https://www.runoob.com/python/att-tuple-cmp.html">cmp(tuple1, tuple2)</a> | 比较两个元组元素。Python 3.X 的版本中已经没有 cmp 函数 |<br>| <a href="https://www.runoob.com/python/att-tuple-len.html">len(tuple)</a> | 计算元组元素个数。                                     |<br>| <a href="https://www.runoob.com/python/att-tuple-max.html"> max(tuple)</a> | 返回元组中元素最大值。                                 |<br>| <a href="https://www.runoob.com/python/att-tuple-min.html"> min(tuple)</a> | 返回元组中元素最小值。                                 |<br>| <a href="https://www.runoob.com/python/att-tuple-tuple.html"> tuple(seq)</a> | 将列表转换为元组。                                     |</li></ul><h2 id="4-命名元组"><a href="#4-命名元组" class="headerlink" title="4 命名元组"></a>4 命名元组</h2><ul><li><p><code>collections.namedtuple()</code> 函数通过使用一个普通的元组对象来实现通过名称来访问元素.实际上是一个返回 Python 中标准元组类型子类的一个工厂方法，支持所有的普通元组操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Subscriber <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Subscriber'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">,</span> <span class="token string">'joined'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub <span class="token operator">=</span> Subscriber<span class="token punctuation">(</span><span class="token string">'jonesy@example.com'</span><span class="token punctuation">,</span> <span class="token string">'2012-10-19'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subSubscriber<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token string">'jonesy@example.com'</span><span class="token punctuation">,</span> joined<span class="token operator">=</span><span class="token string">'2012-10-19'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub<span class="token punctuation">.</span>addr<span class="token string">'jonesy@example.com'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub<span class="token punctuation">.</span>joined<span class="token string">'2012-10-19'</span><span class="token comment"># 你需要传递一个类型名和你需要的字段给它，然后它就会返回一个类，你可以初始化这个类，为你定义的字段传递值等。 </span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> addr<span class="token punctuation">,</span> joined <span class="token operator">=</span> sub<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> addr<span class="token string">'jonesy@example.com'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> joined<span class="token string">'2012-10-19'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命名元组另一个用途就是<strong>作为字典的替代</strong>，因为字典存储需要更多的内存空间。 如果你需要构建一个非常大的包含字典的数据结构，那么使用命名元组会更加高效。 但是需要注意的是，不像字典那样，<strong>一个命名元组是不可更改的。</strong>但可以使用命名元组实例的 <code>_replace()</code> 方法， 它会创建一个全新的命名元组并将对应的字段用新的值取代。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sStock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>shares <span class="token operator">=</span> <span class="token number">75</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AttributeError<span class="token punctuation">:</span> can't <span class="token builtin">set</span> attribute<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span>_replace<span class="token punctuation">(</span>shares<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sStock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习06-列表</title>
      <link href="/2024/07/03/python-xue-xi-06-lie-biao/"/>
      <url>/2024/07/03/python-xue-xi-06-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字—<strong>索引，从0开始</strong></li><li>Python中6个内置的序列类型<ul><li><strong>字符串（string）</strong></li><li><strong>列表（list）</strong></li><li><strong>元组（tuple）</strong></li><li><strong>字节串（bytes）</strong></li><li><strong>字节数组（bytearray）</strong></li><li><strong>范围（range）</strong></li></ul></li><li>序列操作<ul><li>索引</li><li>切片</li><li>加乘</li><li>检查成员</li><li>长度</li><li>最大最小</li></ul></li><li>列表<ul><li>方括号<strong>[]</strong>内逗号分隔</li><li><strong>列表的数据项类型可以不同</strong></li></ul></li></ul><h2 id="1-列表操作"><a href="#1-列表操作" class="headerlink" title="1 列表操作"></a>1 列表操作</h2><blockquote><p><strong>访问列表元素</strong></p></blockquote><ul><li><p>通过下标索引访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list1[0]: "</span><span class="token punctuation">,</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list2[1:5]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#list1[0]:  physics</span><span class="token comment">#list2[1:5]:  [2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>列表更新</strong></p></blockquote><ul><li><code>del</code>删除列表元素：<code>del list[index]</code></li><li>列表修改：<code>list[index]=newvalue</code></li></ul><blockquote><p><strong>列表操作符</strong></p></blockquote><ul><li>| Python 表达式                | 结果                         | 描述                 |<br>| :—————————————- | :—————————————- | :—————————- |<br>| len([1, 2, 3])               | 3                            | 长度                 |<br>| [1, 2, 3] + [4, 5, 6]        | [1, 2, 3, 4, 5, 6]           | 组合                 |<br>| [‘Hi!’] * 4                  | [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] | 重复                 |<br>| 3 in [1, 2, 3]               | True                         | 元素是否存在于列表中 |<br>| for x in [1, 2, 3]: print x, | 1 2 3                        | 迭代                 |</li></ul><blockquote><p><strong>列表比较</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 operator 模块</span><span class="token keyword">import</span> operatora <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"operator.eq(a,b): "</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"operator.eq(c,b): "</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token boolean">False</span>operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-列表函数-amp-方法"><a href="#2-列表函数-amp-方法" class="headerlink" title="2 列表函数&amp;方法"></a>2 列表函数&amp;方法</h2><div class="table-container"><table><thead><tr><th>函数&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a></td><td>比较两个列表的元素（<strong>Python 3.X 的版本移除</strong>）</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-len.html">len(list)</a></td><td>列表元素<strong>个数</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-max.html">max(list)</a></td><td>返回列表元素<strong>最大值</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-min.html">min(list)</a></td><td>返回列表元素<strong>最小值</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a></td><td><strong>将元组转换为列表</strong></td></tr><tr><td>[sorted(list,reverse=False)][]</td><td><strong>临时排序</strong>，返回一个新列表.<code>print(sorted(list))</code></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-append.html">list.append(obj)</a></td><td>在列表末尾<strong>添加</strong>新的对象，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-count.html">list.count(obj)</a></td><td>统计某个元素在列表中出现的<strong>次数</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-extend.html">list.extend(seq)</a></td><td>在列表末尾一次性<strong>追加</strong>另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-index.html">list.index(x[, start[, end]])</a></td><td>从列表中找出某个值第一个<strong>匹配项</strong>的索引位置</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a></td><td>将对象<strong>插入</strong>列表，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-pop.html">list.pop([index=-1])</a></td><td>移除列表中的<strong>一个</strong>元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-remove.html">list.remove(obj)</a></td><td>移除列表中某个<strong>值</strong>的第一个匹配项，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a></td><td><strong>反向</strong>列表中元素，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-sort.html">list.sort(cmp=None, key=None, reverse=False)</a></td><td>对原列表进行<strong>排序</strong>，key：比较对象，reverse = False 升序，永久性操作</td></tr></tbody></table></div><h2 id="3-遍历列表"><a href="#3-遍历列表" class="headerlink" title="3 遍历列表"></a>3 遍历列表</h2><blockquote><p><strong>for循环遍历</strong></p></blockquote><ul><li><p>索引遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>元素遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>列表表达式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>flattened <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix <span class="token keyword">for</span> num <span class="token keyword">in</span> row<span class="token punctuation">]</span>  <span class="token comment"># 创建一个包含matrix中所有数字的列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>列表解析</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _<span class="token punctuation">,</span> shares<span class="token punctuation">,</span> price<span class="token punctuation">,</span> _ <span class="token operator">=</span> data  <span class="token comment"># 通过下划线来丢弃其他值，可以使用认识变量名</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shares<span class="token number">50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price<span class="token number">91.1</span><span class="token comment"># 也可解压多个元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name<span class="token punctuation">,</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>date <span class="token operator">=</span> data<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-复制列表"><a href="#4-复制列表" class="headerlink" title="4 复制列表"></a>4 复制列表</h2><ul><li><p>==直接变量赋值==：同一存储地址，同步更新，相当于一个别名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==切片复制==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==copy方法==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==list方法==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==for循环==：通过遍历添加元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==列表推导式==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> list1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="5-数值列表—range"><a href="#5-数值列表—range" class="headerlink" title="5 数值列表—range"></a>5 数值列表—range</h2><ul><li><p>range函数用于创建<strong>整数列表</strong>，常用于<strong>for循环</strong></p></li><li><p>使用：<code>range(start,stop,step)</code></p><ul><li><p>start:开始数值，默认为0</p></li><li><p>stop:结束数值，不包括stop</p></li><li><p>step:步长，默认为1，可以为负，表示递减</p></li><li><p>生成的数值列表范围：<strong>start&lt;= value(+step) &lt; stop  (左闭右开)</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://blog.csdn.net/weixin_49891576/article/details/128535492">https://blog.csdn.net/weixin_49891576/article/details/128535492</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习05-字符串</title>
      <link href="/2024/07/02/python-xue-xi-05-zi-fu-chuan/"/>
      <url>/2024/07/02/python-xue-xi-05-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用.</p></li><li><p>字符串访问：<strong>下标读取[]</strong></p></li><li><p>转义字符：<code>\</code>  ，使用 <strong><code>r</code></strong> 可以让反斜杠不发生转义</p></li><li><p>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hi <span class="token operator">=</span> <span class="token triple-quoted-string string">'''hi there'''</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hi   <span class="token comment"># repr()</span><span class="token string">'hi\nthere'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> hi  <span class="token comment"># str()</span>hi there  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Python 没有单独的字符类型，一个字符就是长度为1的字符串</p></li><li><p><strong>字符串不能被改变</strong>。向一个索引位置赋值，比如 <strong>word[0] = ‘m’</strong> 会导致错误</p></li></ul><h2 id="1-字符串运算符"><a href="#1-字符串运算符" class="headerlink" title="1 字符串运算符"></a>1 字符串运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例(a=’Hello’,b=’Python’)</th></tr></thead><tbody><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">字符串连接</td><td style="text-align:left">&gt;&gt;&gt;a + b <br>‘HelloPython’</td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">重复输出字符串</td><td style="text-align:left">&gt;&gt;&gt;a * 2 <br>‘HelloHello’</td></tr><tr><td style="text-align:left"><code>[]</code></td><td style="text-align:left">通过索引获取字符串中字符</td><td style="text-align:left">&gt;&gt;&gt;a[1] <br>‘e’</td></tr><tr><td style="text-align:left"><code>[ : ]</code></td><td style="text-align:left">截取字符串中的一部分</td><td style="text-align:left">&gt;&gt;&gt;a[1:4] <br>‘ell’</td></tr><tr><td style="text-align:left"><code>in</code></td><td style="text-align:left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td style="text-align:left">&gt;&gt;&gt;”H” in a <br>True</td></tr><tr><td style="text-align:left"><code>not in</code></td><td style="text-align:left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td style="text-align:left">&gt;&gt;&gt;”M” not in a <br>True</td></tr><tr><td style="text-align:left"><code>r/R</code></td><td style="text-align:left">原始字符串—所有的字符串都是直接按照字面的意思来使用</td><td style="text-align:left">&gt;&gt;&gt;print r’\n’ <br>\n <br>&gt;&gt;&gt; print R’\n’ <br>\n</td></tr><tr><td style="text-align:left"><code>%</code></td><td style="text-align:left">格式字符串</td></tr></tbody></table></div><h2 id="2-字符串格式化"><a href="#2-字符串格式化" class="headerlink" title="2 字符串格式化"></a>2 字符串格式化</h2><ul><li><p>Python2.6 开始，新增了一种格式化字符串的函数 <code>str.format()</code></p></li><li><p>format 函数可以接受不限个参数，位置可以不按顺序</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token string">"{} {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token comment"># 不设置指定位置，按默认顺序</span><span class="token string">'hello world'</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"{0} {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span><span class="token string">'hello world'</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"{1} {0} {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span><span class="token string">'world hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{name}, 地址 {url}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">"www.runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过字典设置参数</span>site <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"www.runoob.com"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{name}, 地址 {url}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>site<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过列表索引设置参数</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{0[0]}, 地址 {0[1]}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># "0" 是必须的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传入对象</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">class</span> <span class="token class-name">AssignValue</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> valuemy_value <span class="token operator">=</span> AssignValue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'value 为: {0.value}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># "0" 是可选的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用大括号 <strong>{}</strong> 来转义大括号</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"{} 对应的位置是 {{0}}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"runoob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># runoob 对应的位置是 {0}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>格式化长字符串</p><ul><li><p>使用 <code>textwrap</code> 模块来格式化字符串的输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> textwrap<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> "Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> \the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span> around the eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span> \look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span>"<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span><span class="token keyword">not</span> around the eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span> aroundthe eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span>look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> initial_indent<span class="token operator">=</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Look into my eyes<span class="token punctuation">,</span> look into myeyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span>around the eyes<span class="token punctuation">,</span> don't look around theeyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> subsequent_indent<span class="token operator">=</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>    the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span>    around the eyes<span class="token punctuation">,</span> don't look around    the eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> you're    under<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>输出自动匹配终端大小:使用 <code>os.get_terminal_size()</code> 方法来获取终端的大小尺寸</li></ul><ul><li><p><strong>!a</strong> (使用 <strong>ascii()</strong>), <strong>!s</strong> (使用 <strong>str()</strong>) 和 <strong>!r</strong> (使用 <strong>repr()</strong>) 可以用于在格式化某个值之前对其进行转化</p></li><li><p><code>print()</code>改变默认的分隔符或者行尾符</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">)</span>ACME <span class="token number">50</span> <span class="token number">91.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>ACME<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'!!\n'</span><span class="token punctuation">)</span>ACME<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.5</span>!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Unicode-字符串"><a href="#3-Unicode-字符串" class="headerlink" title="3 Unicode 字符串"></a>3 Unicode 字符串</h2><ul><li>引号前小写的”u”表示创建 Unicode 字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">u'Hello\u0020World !'</span><span class="token string">u'Hello World !'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-字符串函数"><a href="#4-字符串函数" class="headerlink" title="4 字符串函数"></a>4 字符串函数</h2><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>方法</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-capitalize.html">string.capitalize()</a></td><td style="text-align:left">把字符串的第一个字符<strong>大写</strong></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-center.html">string.center(width)</a></td><td style="text-align:left">返回一个原字符串<strong>居中</strong>,并使用空格<strong>填充</strong>至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-count.html">string.count(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">返回 str 在 string 里面出现的<strong>次数</strong>，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-decode.html">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td><td style="text-align:left">以 encoding 指定的编码格式<strong>解码</strong> string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-encode.html">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td><td style="text-align:left">以 encoding 指定的编码格式<strong>编码</strong> string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html">string.endswith(obj, beg=0, end=len(string))</a></strong></td><td style="text-align:left">检查字符串是否<strong>以 obj 结束</strong>，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-expandtabs.html">string.expandtabs(tabsize=8)</a></td><td style="text-align:left">把字符串 string 中的 <strong>tab 符号转为空格</strong>，tab 符号默认的空格数是 8。</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-find.html">string.find(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">检测 str 是否<strong>包含</strong>在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的<strong>索引值</strong>，否则返回-1</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-format.html">string.format()</a></strong></td><td style="text-align:left"><strong>格式化</strong>字符串</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-index.html">string.index(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">跟find()方法一样，只不过如果str不在 string中会报一个<strong>异常</strong>.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalnum.html">string.isalnum()</a></td><td style="text-align:left">如果 string <strong>至少有一个字符并且所有字符都是字母或数字</strong>则返回 True,否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalpha.html">string.isalpha()</a></td><td style="text-align:left">如果 string <strong>至少有一个字符并且所有字符都是字母</strong>则返回 True,否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdecimal.html">string.isdecimal()</a></td><td style="text-align:left">如果 string 只包含<strong>十进制数字</strong>则返回 True 否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdigit.html">string.isdigit()</a></td><td style="text-align:left">如果 string 只包含<strong>数字</strong>则返回 True 否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-islower.html">string.islower()</a></td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是<strong>小写</strong>，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isnumeric.html">string.isnumeric()</a></td><td style="text-align:left">如果 string 中只包含<strong>数字字符</strong>，则返回 True，否则返回 False。针对unicode对象</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isspace.html">string.isspace()</a></td><td style="text-align:left">如果 string 中只包含<strong>空格</strong>，则返回 True，否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-istitle.html">string.istitle()</a></td><td style="text-align:left">如果 string 是标题化的(每个单词的首字母大写)则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isupper.html">string.isupper()</a></td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是<strong>大写</strong>，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-join.html">string.join(seq)</a></strong></td><td style="text-align:left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)<strong>合并</strong>为一个新的字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-ljust.html">string.ljust(width)</a></td><td style="text-align:left">返回一个原字符串<strong>左对齐</strong>,并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lower.html">string.lower()</a></td><td style="text-align:left">转换 string 中所有大写字符为小写.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lstrip.html">string.lstrip()</a></td><td style="text-align:left"><strong>截掉 string 左边的空格</strong></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-maketrans.html">string.maketrans(intab, outtab)</a></td><td style="text-align:left">maketrans() 方法用于创建<strong>字符映射</strong>的<strong>转换表</strong>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。然后再调用str.translate()</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-max.html">max(str)</a></td><td style="text-align:left">返回字符串 str 中最大的字母。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-min.html">min(str)</a></td><td style="text-align:left">返回字符串 str 中最小的字母。</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-partition.html">string.partition(str)</a></strong></td><td style="text-align:left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,<strong>把 字 符 串 string 分 成 一 个 3 元 素 的 元 组</strong> (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-replace.html">string.replace(str1, str2, num=string.count(str1))</a></strong></td><td style="text-align:left">把 string 中的 str1 <strong>替换</strong>成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rfind.html">string.rfind(str, beg=0,end=len(string) )</a></td><td style="text-align:left">类似于 find() 函数，返回字符串<strong>最后一次出现</strong>的位置，如果没有匹配项则返回 -1。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rindex.html">string.rindex( str, beg=0,end=len(string))</a></td><td style="text-align:left">类似于 index()，不过是返回<strong>最后一个匹配</strong>到的子字符串的索引号。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rjust.html">string.rjust(width)</a></td><td style="text-align:left">返回一个原字符串<strong>右对齐</strong>,并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rpartition.html">string.rpartition(str)</a></td><td style="text-align:left">类似于 partition()函数,不过是<strong>从右边开始查找</strong></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rstrip.html">string.rstrip()</a></td><td style="text-align:left">删除 string 字符串<strong>末尾的空格</strong></td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-split.html">string.split(str=””, num=string.count(str))</a></strong></td><td style="text-align:left">以 str 为分隔符<strong>切片</strong> string，如果 num 有指定值，则仅分隔 <strong>num+1</strong> 个子字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-splitlines.html">string.splitlines([keepends])</a></td><td style="text-align:left">按照行(‘\r’, ‘\r\n’, ‘\n’)分隔，返回一个<strong>包含各行作为元素的列表</strong>，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-startswith.html">string.startswith(obj, beg=0,end=len(string))</a></td><td style="text-align:left">检查字符串是否是<strong>以 obj 开头</strong>，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.obj可以是元组 <code>name.endswith(('.c', '.h'))</code>  list或set需要转换成tuple</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-strip.html">string.strip([obj])</a></strong></td><td style="text-align:left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-swapcase.html">string.swapcase()</a></td><td style="text-align:left"><strong>翻转 string 中的大小写</strong></td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-title.html">string.title()</a></td><td style="text-align:left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-translate.html">string.translate(str, del=””)</a></strong></td><td style="text-align:left">根据 str 给出的表(包含 256 个字符)<strong>转换</strong> string 的字符,要过滤掉的字符放到 del 参数中，结合maketrans()</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-upper.html">string.upper()</a></td><td style="text-align:left">转换 string 中的小写字母为大写</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-zfill.html">string.zfill(width)</a></td><td style="text-align:left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table></div><h2 id="5-字符串拼接"><a href="#5-字符串拼接" class="headerlink" title="5 字符串拼接"></a>5 字符串拼接</h2><ul><li><p><code>+</code>:简单字符串合并</p><ul><li>使用加号(+)操作符去连接大量的字符串的时候是非常<strong>低效率</strong>的， 因为加号连接会引起内存复制以及垃圾回收操作</li><li>可以先收集所有的字符串片段然后再将它们连接起来</li></ul></li><li><p><code>join</code>：序列中的字符串合并</p><ul><li><p>利用生成器表达式转换数据为字符串的同时合并字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token string">'ACME,50,91.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>直接放在一起</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">'Hello'</span> <span class="token string">'World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'HelloWorld'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意不必要的字符串连接操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token comment"># Ugly</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Still ugly</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">)</span> <span class="token comment"># Better</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用I/O操作和字符串连接操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Version 1 (string concatenation)   适用两个字符串很小</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk1 <span class="token operator">+</span> chunk2<span class="token punctuation">)</span><span class="token comment"># Version 2 (separate I/O operations)使用两个字符串较大</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构建大量小字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token string">'Is'</span>    <span class="token keyword">yield</span> <span class="token string">'Chicago'</span>    <span class="token keyword">yield</span> <span class="token string">'Not'</span>    <span class="token keyword">yield</span> <span class="token string">'Chicago?'</span>    <span class="token comment"># 合并</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># IO</span><span class="token keyword">for</span> part <span class="token keyword">in</span> sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结合IO</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> maxsize<span class="token punctuation">)</span><span class="token punctuation">:</span>    parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> part <span class="token keyword">in</span> source<span class="token punctuation">:</span>        parts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part<span class="token punctuation">)</span>        size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&gt;</span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span>            parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">yield</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token comment"># 结合文件操作  分块存储</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> part <span class="token keyword">in</span> combine<span class="token punctuation">(</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-字符串分割"><a href="#6-字符串分割" class="headerlink" title="6 字符串分割"></a>6 字符串分割</h2><ul><li><p>简单的字符串分割：<code>str.split()</code>   不允许有多个分隔符或者是分隔符周围不确定的空格</p></li><li><p><code>re.split()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> line <span class="token operator">=</span> <span class="token string">'asdf fjdk; afed, fjek,asdf, foo'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'[;,\s]\s*'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token comment"># 逗号，分号或者是空格，并且后面紧跟着任意个的空格</span><span class="token punctuation">[</span><span class="token string">'asdf'</span><span class="token punctuation">,</span> <span class="token string">'fjdk'</span><span class="token punctuation">,</span> <span class="token string">'afed'</span><span class="token punctuation">,</span> <span class="token string">'fjek'</span><span class="token punctuation">,</span> <span class="token string">'asdf'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意正则表达式中是否包含一个括号<strong>捕获分组</strong>。 如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中，可用于重新构造字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fields <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'(;|,|\s)\s*'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fields<span class="token punctuation">[</span><span class="token string">'asdf'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'fjdk'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'afed'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'fjek'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'asdf'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-通配符匹配字符串"><a href="#7-通配符匹配字符串" class="headerlink" title="7 通配符匹配字符串"></a>7 通配符匹配字符串</h2><ul><li><p><code>fnmatch</code> 模块提供了两个函数—— <code>fnmatch()</code> 和 <code>fnmatchcase()</code> ，可以用来实现通配符(比如 <code>*.py</code> , <code>Dat[0-9]*.csv</code> 等)匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fnmatch <span class="token keyword">import</span> fnmatch<span class="token punctuation">,</span> fnmatchcase<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.txt'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'?oo.txt'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'Dat45.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat[0-9]*'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dat1.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat2.csv'</span><span class="token punctuation">,</span> <span class="token string">'config.ini'</span><span class="token punctuation">,</span> <span class="token string">'foo.py'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> fnmatch<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'Dat*.csv'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Dat1.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat2.csv'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fnmatch()</code> 函数<strong>使用底层操作系统的大小写敏感规则(</strong>不同的系统是不一样的)来匹配模式。可以使用 <code>fnmatchcase()</code> 来代替。它完全使用你的模式<strong>大小写匹配</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># On OS X (Mac)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># On Windows</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatchcase<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>处理非文件名的字符串。如果你的代码需要做文件名的匹配，最好使用 ==glob== 模块。</strong></p></li></ul><h2 id="8-Unicode文本标准化"><a href="#8-Unicode文本标准化" class="headerlink" title="8 Unicode文本标准化"></a>8 Unicode文本标准化</h2><ul><li><p>由于某些字符能够用多个合法的编码表示，处理Unicode字符串需要确保所有字符串在底层有相同的表示</p></li><li><p>使用<code>unicodedata</code>模块将文本标准化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> unicodedata<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token string">'Spicy Jalape\u00f1o'</span> <span class="token comment">#整体字符</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token string">'Spicy Jalapen\u0303o'</span> <span class="token comment"># n+~</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token string">'Spicy Jalapeño'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token string">'Spicy Jalapeño'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t1 <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFC'</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t2 <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFC'</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t1 <span class="token operator">==</span> t2<span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Spicy Jalape\xf1o'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t3 <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t4 <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t3 <span class="token operator">==</span> t4<span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Spicy Jalapen\u0303o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串标准化的方式</p><ul><li><code>NFC</code>表示字符应该是<strong>整体</strong>组成(比如可能的话就使用单一编码)</li><li><code>NFD</code>表示字符应该<strong>分解</strong>为多个组合字符表示</li></ul></li><li><p>清除文本的变音符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t1 <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> t1 <span class="token keyword">if</span> <span class="token keyword">not</span> unicodedata<span class="token punctuation">.</span>combining<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Spicy Jalapeno'</span><span class="token comment"># combining() 用于测试一个字符是否为和音字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9-字符串清理"><a href="#9-字符串清理" class="headerlink" title="9 字符串清理"></a>9 字符串清理</h2><ul><li><p><code>s = 'pýtĥöñ\fis\tawesome\r\n'</code></p></li><li><p>清理空白字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> remap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\f'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># Deleted</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>remap<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'pýtĥöñ is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除和音符</p><ul><li>translate方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> unicodedata<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cmb_chrs <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                         <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>combining<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 每个Unicode和音符作为键，对应的值全部为 None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token string">'pýtĥöñ is awesome\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>cmb_chrs<span class="token punctuation">)</span><span class="token string">'python is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编解码方法丢弃和音符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'pýtĥöñ is awesome\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token string">'python is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>构造一个将所有Unicode数字字符映射到对应的ASCII字符上的表格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digitmap <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> unicodedata<span class="token punctuation">.</span>digit<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>category<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Nd'</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digitmap<span class="token punctuation">)</span><span class="token number">460</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Arabic digits</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token string">'\u0661\u0662\u0663'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>digitmap<span class="token punctuation">)</span><span class="token string">'123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="10-字符串中插入变量"><a href="#10-字符串中插入变量" class="headerlink" title="10 字符串中插入变量"></a>10 字符串中插入变量</h2><ul><li><p>创建一个内嵌变量的字符串，变量被它的值所表示的字符串替换掉</p></li><li><p><code>format</code>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'{name} has {n} messages.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Guido'</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结合使用 <code>format_map()</code> 和 <code>vars()</code>   ：要被替换的变量能在变量域中找到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span class="token comment"># 也适用于对象实例</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> Info<span class="token punctuation">(</span><span class="token string">'Guido'</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>format</code> 和 <code>format_map()</code> 的一个缺陷就是它们并不能很好的处理<strong>变量缺失</strong>的情况，会抛出异常。解决：<strong>定义一个含有 <code>__missing__()</code> 方法的字典对象</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">safesub</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""防止key找不到"""</span>    <span class="token keyword">def</span> <span class="token function">__missing__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'{'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> n <span class="token comment"># Make sure n is undefined</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>safesub<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has {n} messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具封装：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>safesub<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_locals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">(</span><span class="token string">'Hello {name}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello Guido<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">(</span><span class="token string">'You have {n} messages.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>You have <span class="token number">37</span> messages<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">(</span><span class="token string">'Your favorite color is {color}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Your favorite color <span class="token keyword">is</span> <span class="token punctuation">{</span>color<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==<code>f-string</code>==:<strong>Python3.6以上的版本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> messages.'</span></span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="11-f-string用法"><a href="#11-f-string用法" class="headerlink" title="11 f-string用法"></a>11 f-string用法</h2><ul><li><p>Python中的f字符串是一种字符串格式化语法，它可以将变量、表达式和函数等动态地嵌入到字符串中</p></li><li><p><strong>Python3.6及以上</strong>版本支持f-string</p></li><li><p><code>接受表达式（包括函数调用）</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> messages.'</span></span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">'Guido'</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> messages.'</span></span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>格式化输出</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">val <span class="token operator">=</span> <span class="token number">11</span><span class="token comment"># 通过 : 后跟 浮点数标识 ，可以实现格式化浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 11.000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 11.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>格式化时间</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">:</span><span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token format-spec">%M</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 2024-07-03 21:07</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>接收对象</code>:对象必须定义了<strong>str</strong>()或<strong>repr</strong>()函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>job <span class="token operator">=</span> job    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>job<span class="token punctuation">}</span></span><span class="token string">"</span></span>u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">'Ace'</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># Ace is a teacher</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-字节字符串"><a href="#12-字节字符串" class="headerlink" title="12 字节字符串"></a>12 字节字符串</h2><ul><li><p>大多数情况下，在文本字符串上的操作均可用于字节字符串</p></li><li><p>字节字符串的索引操作返回整数而不是单独字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token string">b'Hello World'</span> <span class="token comment"># Byte string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">72</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字节字符串解码成字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">b'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token string">b'Hello World'</span> <span class="token comment"># Observe b'...'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串编码为字节字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'{:10s} {:10d} {:10.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">490.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token string">b'ACME 100 490.10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="13-切片命名"><a href="#13-切片命名" class="headerlink" title="13 切片命名"></a>13 切片命名</h2><ul><li><p>代码中如果出现大量的硬编码下标会使得代码的可读性和可维护性大大降低</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">######    0123456789012345678901234567890123456789012345678901234567890'</span>record <span class="token operator">=</span> <span class="token string">'....................100 .......513.25 ..........'</span>cost <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">float</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">)</span>SHARES <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>PRICE <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>cost <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>SHARES<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">float</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>PRICE<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>内置的 <code>slice()</code> 函数创建了一个切片对象。所有使用切片的地方都可以使用切片对象。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>切片对象<code>a</code>可以通过调用<code>a.start</code> , <code>a.stop</code> , <code>a.step</code> 属性来获取更多的信息</p></li><li><p>调用切片的 <code>indices(size)</code> 方法将它映射到一个已知大小的序列上,返回一个三元组 <code>(start, stop, step)</code> ，所有的值都会被缩小，直到适合这个已知序列的边界为止,防止出现<code>IndexError</code> 异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>start<span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>stop<span class="token number">50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>step<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'HelloWorld'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>indices<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>indices<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Wrd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li><li><a href="https://blog.csdn.net/m0_54701273/article/details/129916943">https://blog.csdn.net/m0_54701273/article/details/129916943</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习04-数字</title>
      <link href="/2024/07/02/python-xue-xi-04-shu-zi/"/>
      <url>/2024/07/02/python-xue-xi-04-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul><li>Number属于<strong>不可改变的数据类型</strong>，改变数字数据类型会分配一个新的对象</li><li>删除对象引用：<code>del var1[,var2[,var3[....,varN]]]</code></li><li>python2四种不同数字类型<ul><li>int</li><li>long</li><li>float</li><li>complex</li></ul></li><li>python3中没有long，取而代之的是<strong>bool</strong> (布尔), 如 True</li><li><strong>bool 是 int 的子类</strong>，True 和 False 可以和数字相加， True=\=1、False==0 会返回 True</li></ul><h2 id="1-浮点数说明"><a href="#1-浮点数说明" class="headerlink" title="1 浮点数说明"></a>1 浮点数说明</h2><ul><li><p>浮点数的一个普遍问题是它们<strong>并不能精确的表示十进制数</strong>.由底层CPU和IEEE 754标准通过自己的浮点单位去执行算术时的特征。 由于Python的浮点数据类型使用底层表示存储数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">4.2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">2.1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> b<span class="token number">6.300000000000001</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6.3</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>精确表示：使用 <code>decimal</code> 模块，主要用于<strong>金融数据</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">'4.2'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">'2.1'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> bDecimal<span class="token punctuation">(</span><span class="token string">'6.3'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token number">6.3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> Decimal<span class="token punctuation">(</span><span class="token string">'6.3'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2 数据类型转换"></a>2 数据类型转换</h2><ul><li>Python 数据类型转换可以分为两种<ul><li>隐式类型转换 - 自动完成</li><li>显式类型转换 - 需要使用类型函数来转换</li></ul></li><li><p>较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失</p></li><li><p>对数据内置的类型进行转换，只需要将<strong>数据类型作为函数名</strong>，如：<code>int(x [,base])、long(x [,base] )、float(x)、complex(real [,imag])、str(x)、tuple(s)、list(s)、set(s)、dict(d)、frozenset(s)</code></p></li><li><code>repr(x)</code>:将对象 x 转换为表达式字符串</li><li><code>eval(str)</code>:用来计算在字符串中的有效Python表达式,并返回一个对象</li><li><code>chr(x)</code>:将一个整数转换为一个字符</li><li><code>ord(x)</code>:将一个字符转换为它的整数值</li><li><code>bin(x)、hex(x)、oct(x)</code>:整数—&gt;二进制、十六进制、八进制</li></ul><h2 id="3-math与cmath模块"><a href="#3-math与cmath模块" class="headerlink" title="3 math与cmath模块"></a>3 math与cmath模块</h2><blockquote><p>cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算</p></blockquote><ul><li><p>查看包中内容：<code>dir()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> math<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'copysign'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'degrees'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'erf'</span><span class="token punctuation">,</span> <span class="token string">'erfc'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'fabs'</span><span class="token punctuation">,</span> <span class="token string">'factorial'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'frexp'</span><span class="token punctuation">,</span> <span class="token string">'fsum'</span><span class="token punctuation">,</span> <span class="token string">'gamma'</span><span class="token punctuation">,</span> <span class="token string">'gcd'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'inf'</span><span class="token punctuation">,</span> <span class="token string">'isclose'</span><span class="token punctuation">,</span> <span class="token string">'isfinite'</span><span class="token punctuation">,</span> <span class="token string">'isinf'</span><span class="token punctuation">,</span> <span class="token string">'isnan'</span><span class="token punctuation">,</span> <span class="token string">'ldexp'</span><span class="token punctuation">,</span> <span class="token string">'lgamma'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log2'</span><span class="token punctuation">,</span> <span class="token string">'modf'</span><span class="token punctuation">,</span> <span class="token string">'nan'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'radians'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">,</span> <span class="token string">'tau'</span><span class="token punctuation">,</span> <span class="token string">'trunc'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-数学函数"><a href="#4-数学函数" class="headerlink" title="4 数学函数"></a>4 数学函数</h2><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-abs.html">abs(x)</a></td><td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-ceil.html">ceil(x)</a></td><td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-cmp.html">cmp(x, y)</a></td><td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1.<strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-exp.html">exp(x)</a></td><td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-fabs.html">fabs(x)</a></td><td style="text-align:left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-floor.html">floor(x)</a></td><td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-log.html">log(x)</a></td><td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-log10.html">log10(x)</a></td><td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-max.html">max(x1, x2,…)</a></td><td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-min.html">min(x1, x2,…)</a></td><td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-modf.html">modf(x)</a></td><td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-pow.html">pow(x, y)</a></td><td style="text-align:left">x**y 运算后的值。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-round.html">round(x [,n])</a></td><td style="text-align:left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。n值如果为负数，舍入运算会作用在十位、百位、千位等上面</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-sqrt.html">sqrt(x)</a></td><td style="text-align:left">返回数字x的平方根</td></tr></tbody></table></div><h2 id="5-随机数函数"><a href="#5-随机数函数" class="headerlink" title="5 随机数函数"></a>5 随机数函数</h2><p><code>random</code> 模块</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-choice.html">choice(seq)</a></td><td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-randrange.html">randrange ([start,] stop [,step])</a></td><td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-random.html">random()</a></td><td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-seed.html">seed([x])</a></td><td style="text-align:left">改变随机数生成器的种子seed。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-shuffle.html">shuffle(lst)</a></td><td style="text-align:left">将序列的所有元素随机排序</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/func-number-uniform.html">uniform(x, y)</a></td><td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。均匀分布</td></tr><tr><td style="text-align:left">sample(seq,num)</td><td style="text-align:left">随机选取num个不同元素</td></tr><tr><td style="text-align:left">randint(x,y)</td><td style="text-align:left">生成随机整数，在[x,y]范围内</td></tr></tbody></table></div><h2 id="6-数字的格式化输出"><a href="#6-数字的格式化输出" class="headerlink" title="6 数字的格式化输出"></a>6 数字的格式化输出</h2><ul><li><p>控制数字的位数、对齐、千位分隔符</p></li><li><p>格式化输出单个数字的时候，可以使用内置的 <code>format()</code> 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">1234.56789</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 小数位数</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0.2f'</span><span class="token punctuation">)</span><span class="token string">'1234.57'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，右对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'&gt;10.1f'</span><span class="token punctuation">)</span><span class="token string">'    1234.6'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，左对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'&lt;10.1f'</span><span class="token punctuation">)</span><span class="token string">'1234.6    '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，居中对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'^10.1f'</span><span class="token punctuation">)</span><span class="token string">'  1234.6  '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 显示千分位</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token string">'1,234.56789'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0,.1f'</span><span class="token punctuation">)</span>  <span class="token comment"># 千分位+1位小数</span><span class="token string">'1,234.6'</span><span class="token comment"># 指数记法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token string">'1.234568e+03'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0.2E'</span><span class="token punctuation">)</span><span class="token string">'1.23E+03'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时指定宽度和精度的一般形式是 <code>'[&lt;&gt;^]?width[,]?(.digits)?'</code>， 其中 <code>width</code> 和 <code>digits</code> 为整数，<code>？</code>代表可选部分。 同样的格式也被用在字符串的 <code>format()</code> 方法中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The value is {:0,.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token string">'The value is 1,234.57'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p>str.format() 格式化数字</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:left">数字</th><th style="text-align:left">格式</th><th style="text-align:left">输出</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">3.1415926</td><td style="text-align:left"><code>{:.2f}</code></td><td style="text-align:left">3.14</td><td style="text-align:left">保留小数点后两位</td></tr><tr><td style="text-align:left">3.1415926</td><td style="text-align:left"><code>{:+.2f}</code></td><td style="text-align:left">+3.14</td><td style="text-align:left">带符号保留小数点后两位</td></tr><tr><td style="text-align:left">-1</td><td style="text-align:left"><code>{:-.2f}</code></td><td style="text-align:left">-1.00</td><td style="text-align:left">带符号保留小数点后两位</td></tr><tr><td style="text-align:left">2.71828</td><td style="text-align:left"><code>{:.0f}</code></td><td style="text-align:left">3</td><td style="text-align:left">不带小数</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>{:0&gt;2d}</code></td><td style="text-align:left">05</td><td style="text-align:left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>{:x&lt;4d}</code></td><td style="text-align:left">5xxx</td><td style="text-align:left">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>{:x&lt;4d}</code></td><td style="text-align:left">10xx</td><td style="text-align:left">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:left">1000000</td><td style="text-align:left"><code>{:,}</code></td><td style="text-align:left">1,000,000</td><td style="text-align:left">以逗号分隔的数字格式</td></tr><tr><td style="text-align:left">0.25</td><td style="text-align:left"><code>{:.2%}</code></td><td style="text-align:left">25.00%</td><td style="text-align:left">百分比格式</td></tr><tr><td style="text-align:left">1000000000</td><td style="text-align:left"><code>{:.2e}</code></td><td style="text-align:left">1.00e+09</td><td style="text-align:left">指数记法</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>{:&gt;10d}</code></td><td style="text-align:left">13</td><td style="text-align:left">右对齐 (默认, 宽度为10)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>{:&lt;10d}</code></td><td style="text-align:left">13</td><td style="text-align:left">左对齐 (宽度为10)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><code>{:^10d}</code></td><td style="text-align:left">13</td><td style="text-align:left">中间对齐 (宽度为10)</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>'{:b}'.format(11) '{:d}'.format(11) '{:o}'.format(11) '{:x}'.format(11) '{:#x}'.format(11) '{:#X}'.format(11)</code></td><td style="text-align:left"><code>1011 11 13 b 0xb 0XB</code></td><td style="text-align:left">进制</td></tr></tbody></table></div><h2 id="7-无穷大与NaN"><a href="#7-无穷大与NaN" class="headerlink" title="7 无穷大与NaN"></a>7 无穷大与NaN</h2><ul><li><p>使用 <code>float()</code> 来创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ainf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token operator">-</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cnan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>isinf<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>无穷大数在执行数学计算的时候会传播</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> <span class="token number">45</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">*</span> <span class="token number">10</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">/</span> a<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>NaN值会在所有操作中传播并不会产生异常</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">+</span> <span class="token number">23</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">/</span> <span class="token number">2</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">*</span> <span class="token number">2</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>c<span class="token punctuation">)</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>NaN值之间的比较操作总是返回False</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">==</span> d<span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token keyword">is</span> d<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-数值运算"><a href="#8-数值运算" class="headerlink" title="8 数值运算"></a>8 数值运算</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span>  <span class="token comment"># 加法</span><span class="token number">9</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment"># 减法</span><span class="token number">2.3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span>  <span class="token comment"># 乘法</span><span class="token number">21</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># 除法，得到一个浮点数</span><span class="token number">0.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment"># 除法，得到一个整数</span><span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment"># 取余 </span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment"># 乘方</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>//</strong> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7</span><span class="token operator">//</span><span class="token number">2</span><span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7.0</span><span class="token operator">//</span><span class="token number">2</span><span class="token number">3.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7</span><span class="token operator">//</span><span class="token number">2.0</span><span class="token number">3.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不同类型的数混合运算时会<strong>将整数转换为浮点数</strong></p></li><li><p>在交互模式中，最后被输出的表达式结果被赋值给变量 <strong>_</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tax <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">=</span> <span class="token number">100.50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">*</span> tax<span class="token number">12.5625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">+</span> _<span class="token number">113.0625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">round</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">113.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9-分数运算"><a href="#9-分数运算" class="headerlink" title="9 分数运算"></a>9 分数运算</h2><p><code>fractions</code> 模块可以被用来执行包含分数的数学运算</p><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习03-变量</title>
      <link href="/2024/07/01/python-xue-xi-03-bian-liang/"/>
      <url>/2024/07/01/python-xue-xi-03-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="1-命名"><a href="#1-命名" class="headerlink" title="1 命名"></a>1 命名</h2><ul><li><p>变量名只能包含<strong>字母、数字和下划线</strong>。变量名可以字母或下划线打头，但不能以数字打<br>头。</p></li><li><p>Python 中的标识符是<strong>区分大小写</strong>的。</p></li><li><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也允许</p></li><li><p>以单下划线开头 _foo 的代表<strong>不能直接访问的类属性</strong>，需通过类提供的接口进行访问，不能用 from xxx import <em> 而导入；以双下划线开头的 __foo 代表类的<strong>私有成员</strong>，以双下划线开头和结尾的 __foo__ 代表 Python 里<em>*特殊方法</em></em>专用的标识，如 __init__() 代表类的构造函数。</p></li><li><p>Python 可以同一行显示多条语句，方法是<strong>用分号 ; 分开</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>| 保留字   | 保留字   | 保留字 |<br>| :———- | ———— | ——— |<br>| and      | exec     | not    |<br>| assert   | finally  | or     |<br>| break    | for      | pass   |<br>| class    | from     | print  |<br>| continue | global   | raise  |<br>| def      | if       | return |<br>| del      | import   | try    |<br>| elif     | in       | while  |<br>| else     | is       | with   |<br>| except   | lambda   | yield  |<br>| False    | None     | True   |<br>| as       | nonlocal |        |</p></li></ul><h2 id="2-缩进"><a href="#2-缩进" class="headerlink" title="2 缩进"></a>2 缩进</h2><ul><li><p>Python 的代码块不使用大括号 <strong>{}</strong> 来控制类，函数以及其他逻辑判断。python 最具特色的就是用<strong>缩进</strong>来写模块</p></li><li><p>缩进的空白数量是可变的，但是<strong>所有代码块语句必须包含相同的缩进空白数量</strong></p></li><li><p>Python语句中一般以新行作为语句的结束符，使用斜杠（ <code>\</code>）将一行的语句分为多行显示,语句中包含 [], {} 或 () 括号就不需要使用多行连接符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_threedays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-引号"><a href="#3-引号" class="headerlink" title="3 引号"></a>3 引号</h2><ul><li>字符串表示：<strong>引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” )</strong> </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'word'</span>sentence <span class="token operator">=</span> <span class="token string">"这是一个句子。"</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个段落。包含了多个语句"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注释"><a href="#4-注释" class="headerlink" title="4 注释"></a>4 注释</h2><ul><li>单行注释：<code>#</code> 开头</li><li>多行注释：三个单引号 <code>'''</code> 或三个双引号<code>"""</code></li></ul><h2 id="5-print换行"><a href="#5-print换行" class="headerlink" title="5 print换行"></a>5 print换行</h2><ul><li><p>print 默认输出是换行的</p></li><li><p>在 Python 3.x 中，我们可以在 print() 函数中添加 <code>end=""</code> 参数，这样就可以实现不换行效果,end也可以设置其他特殊符号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是字符串，'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里的字符串不会另起一行'</span><span class="token punctuation">)</span><span class="token comment"># 这是字符串，这里的字符串不会另起一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 Python 2.x中， 可以使用逗号 <code>,</code>来实现不换行效果;如果有变量，我们可以在逗号 , 后面直接添加变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span> <span class="token string">"数字为："</span><span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果 Python2.x 版本想使用 Python3.x 的 print 函数，可以导入 __future__ 包，该包禁用 Python2.x 的 print 语句，采用 Python3.x 的 print 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-标准数据类型"><a href="#6-标准数据类型" class="headerlink" title="6 标准数据类型"></a>6 标准数据类型</h2><ul><li><p><strong>不可变（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong>可变（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）</p></li><li><p>类型判断</p><ul><li><p>内置的 <code>type()</code> 函数可以用来查询变量所指的对象类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>isinstance</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">111</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型</li><li>isinstance()会认为子类是一种父类类型</li></ul></li></ul></li></ul><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html">《Python Cookbook》3rd Edition</a></li><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习02-初始Python</title>
      <link href="/2024/07/01/python-xue-xi-02-chu-shi-python/"/>
      <url>/2024/07/01/python-xue-xi-02-chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h2 id="初始Python"><a href="#初始Python" class="headerlink" title="初始Python"></a>初始Python</h2><h2 id="1-Python特性"><a href="#1-Python特性" class="headerlink" title="1 Python特性"></a>1 Python特性</h2><blockquote><p>Python 是一个高层次的结合了<strong>解释性、编译性、互动性和面向对象</strong>的脚本语言。</p></blockquote><ul><li>解释性</li><li>交互式</li><li>面向对象</li><li>跨平台</li></ul><h2 id="2-中文编码"><a href="#2-中文编码" class="headerlink" title="2 中文编码"></a>2 中文编码</h2><blockquote><p>Python2中默认的编码格式是 <strong>ASCII</strong> 格式，在没修改编码格式时无法正确打印汉字。</p></blockquote><p>解决方法：在文件开头加入 <strong># -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"你好，世界"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串</p><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://www.runoob.com/python/python-tutorial.html">https://www.runoob.com/python/python-tutorial.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本命令</title>
      <link href="/2024/06/29/hexo-ji-ben-ming-ling/"/>
      <url>/2024/06/29/hexo-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo基本命令"><a href="#Hexo基本命令" class="headerlink" title="Hexo基本命令"></a>Hexo基本命令</h1><h2 id="1-Hexo环境安装"><a href="#1-Hexo环境安装" class="headerlink" title="1 Hexo环境安装"></a>1 Hexo环境安装</h2><ul><li><strong>git安装</strong></li><li><strong>nodejs安装</strong></li><li><strong><code>npm install -g hexo-cli</code></strong></li><li><strong><code>hexo init &lt;folder&gt;</code></strong></li></ul><h2 id="2-基本指令"><a href="#2-基本指令" class="headerlink" title="2 基本指令"></a>2 基本指令</h2><ul><li><strong><code>hexo new [layout] &lt;title&gt;</code></strong>：新建一篇文章。</li><li><strong><code>hexo generate</code></strong>：生成静态文件。</li><li><strong><code>hexo publish [layout] &lt;filename&gt;</code></strong>：发表草稿。</li><li><strong><code>hexo server</code></strong>：启动服务器。 默认情况下，访问网址为： <code>http://localhost:4000/</code>。</li><li><strong><code>hexo deploy</code></strong>：部署你的网站。</li><li><strong><code>hexo render &lt;file1&gt; [file2] ...</code></strong>：渲染文件。</li><li><strong><code>hexo migrate &lt;type&gt;</code></strong>：从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</li><li><strong><code>hexo clean</code></strong>：清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</li><li><strong><code>hexo list &lt;type&gt;</code></strong>：列出所有路由。</li><li><strong><code>hexo version</code></strong>：显示版本信息。</li><li><strong><code>hexo config [key] [value]</code></strong>：列出网站的配置（<code>_config.yml</code>）。 如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</li><li><strong><code>hexo --config custom.yml</code></strong>：自定义配置文件的路径</li><li><strong><code>hexo --draft</code></strong>：显示 <code>source/_drafts</code> 文件夹中的草稿文章。</li><li><strong><code>hexo --cwd /path/to/cwd</code></strong>：自定义当前工作目录（Current working directory）的路径。</li></ul><h2 id="3-打开本地服务器"><a href="#3-打开本地服务器" class="headerlink" title="3 打开本地服务器"></a>3 打开本地服务器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo server<span class="token punctuation">(</span>hexo s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-hexo部署"><a href="#4-hexo部署" class="headerlink" title="4 hexo部署"></a>4 hexo部署</h2><ul><li>以github为例</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Eliauk<span class="token punctuation">-</span>L/Eliauk<span class="token punctuation">-</span>L.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装<code>deploy-git</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>部署</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-布局"><a href="#5-布局" class="headerlink" title="5 布局"></a>5 布局</h2><ul><li><p>Hexo有三种默认布局：<strong><code>post、page和draft</code></strong></p></li><li><p>发布文章</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new XXX<span class="token comment"># 默认使用的是post布局，在source文件夹下的_post里面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>另起一页</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page newpage<span class="token comment"># 系统会自动在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，</span><span class="token comment"># 访问newpage对应的链接就是http://xxx.xxx/newpage</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>发布草稿</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft newdraft<span class="token comment"># 在source/_draft中新建一个newdraft.md文件，如果想要预览，那么可以使用 </span><span class="token comment"># hexo server --draft</span><span class="token comment"># 将草稿发表到post中</span>hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>参考：</strong></p><ol><li><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">https://blog.csdn.net/qq_58608526/article/details/124652412</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习01-环境安装</title>
      <link href="/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/"/>
      <url>/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-环境安装"><a href="#Python-环境安装" class="headerlink" title="Python 环境安装"></a>Python 环境安装</h1><h2 id="Anaconda-与-Pip"><a href="#Anaconda-与-Pip" class="headerlink" title="Anaconda 与 Pip"></a>Anaconda 与 Pip</h2><h3 id="Anaconda-含-Conda-包管理工具"><a href="#Anaconda-含-Conda-包管理工具" class="headerlink" title="Anaconda(含 Conda 包管理工具)"></a>Anaconda(含 Conda 包管理工具)</h3><ul><li>开源的 Python 发型版本，里面包含了 Python 和各种用于科学计算的包，可以完全独立使用</li><li>屏蔽了系统平台的差异，解决底层依赖。安装一个包之后依赖的东西全部处理好，省心</li><li>有一个<code>虚拟环境</code>的概念，每个环境之间是隔离的，都可以设定不同的 Python 版本以及各种包，不和系统的冲突，可以随便切换，要删除也是整个一起清理</li></ul><h3 id="Python-Pip-包管理工具"><a href="#Python-Pip-包管理工具" class="headerlink" title="Python(Pip 包管理工具)"></a>Python(Pip 包管理工具)</h3><ul><li>提供了对 Python 包的查找、下载、安装、卸载的功能。</li><li>Pip 是一个单纯的传统包管理器</li></ul><blockquote><p>使用 Anaconda 可以同时使用者两种包管理器，Conda 一般能做的更多些</p></blockquote><h3 id="Conda-与-Pip-常用命令"><a href="#Conda-与-Pip-常用命令" class="headerlink" title="Conda 与 Pip 常用命令"></a>Conda 与 Pip 常用命令</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda create <span class="token operator">-</span>n xx python<span class="token operator">=</span><span class="token number">3.8</span> <span class="token operator">//</span>创建python3<span class="token punctuation">.</span><span class="token number">8</span>的xx虚拟环境conda remove <span class="token operator">-</span>n xx <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span> <span class="token operator">//</span>删除xx虚拟环境conda activate xx <span class="token operator">//</span>进入xxx环境conda deactivate <span class="token operator">//</span>关闭环境conda env <span class="token builtin">list</span> <span class="token operator">//</span>显示所有的虚拟环境conda <span class="token builtin">list</span> <span class="token operator">//</span>查看通过conda已经安装的文件包conda install xxx <span class="token operator">//</span>安装xxx文件包conda update xxx <span class="token operator">//</span>更新xxx文件包conda uninstall xxx <span class="token operator">//</span>卸载xxx文件包conda search xxx <span class="token operator">//</span>查询xxx文件包的版本pip <span class="token builtin">list</span> <span class="token operator">//</span>查看通过pip已经安装的文件包pip install xxx <span class="token operator">//</span>安装xxx文件包pip uninstall xxx <span class="token operator">//</span>卸载xxx文件包pip search xxx <span class="token operator">//</span>查询xxx文件包的版本pip install –U xxx <span class="token operator">//</span>更新xxx文件包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Conda-与-Pip-换源"><a href="#Conda-与-Pip-换源" class="headerlink" title="Conda 与 Pip 换源"></a>Conda 与 Pip 换源</h3><ul><li><p><strong>C:\Users\用户名\pip\pip.ini</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">https://pypi.tuna.tsinghua.edu.cn/simple</span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.tuna.tsinghua.edu.cn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>C:\Users\用户名.condarc</strong></p><pre class="line-numbers language-condarc" data-language="condarc"><code class="language-condarc">channels:  - defaultsshow_channel_urls: truedefault_channels:  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p><a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></p><h2 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h2><p><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
