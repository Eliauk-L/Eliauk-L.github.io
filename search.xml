<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习03-变量</title>
      <link href="/2024/07/15/python-xue-xi-03-bian-liang/"/>
      <url>/2024/07/15/python-xue-xi-03-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="1-命名"><a href="#1-命名" class="headerlink" title="1 命名"></a>1 命名</h2><ul><li><p>变量名只能包含<strong>字母、数字和下划线</strong>。变量名可以字母或下划线打头，但不能以数字打<br>头。</p></li><li><p>Python 中的标识符是<strong>区分大小写</strong>的。</p></li><li><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也允许</p></li><li><p>以单下划线开头 <em>foo 的代表<strong>不能直接访问的类属性</strong>，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；以双下划线开头的 <em>_foo 代表类的<strong>私有成员</strong>，以双下划线开头和结尾的 <em>_foo</em></em> 代表 Python 里<strong>特殊方法</strong>专用的标识，如 <em>_init</em></em>() 代表类的构造函数。</p></li><li><p>Python 可以同一行显示多条语句，方法是<strong>用分号 ; 分开</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><table><thead><tr><th align="left">保留字</th><th>保留字</th><th>保留字</th></tr></thead><tbody><tr><td align="left">and</td><td>exec</td><td>not</td></tr><tr><td align="left">assert</td><td>finally</td><td>or</td></tr><tr><td align="left">break</td><td>for</td><td>pass</td></tr><tr><td align="left">class</td><td>from</td><td>print</td></tr><tr><td align="left">continue</td><td>global</td><td>raise</td></tr><tr><td align="left">def</td><td>if</td><td>return</td></tr><tr><td align="left">del</td><td>import</td><td>try</td></tr><tr><td align="left">elif</td><td>in</td><td>while</td></tr><tr><td align="left">else</td><td>is</td><td>with</td></tr><tr><td align="left">except</td><td>lambda</td><td>yield</td></tr><tr><td align="left">False</td><td>None</td><td>True</td></tr><tr><td align="left">as</td><td>nonlocal</td><td></td></tr></tbody></table></li></ul><h2 id="2-缩进"><a href="#2-缩进" class="headerlink" title="2 缩进"></a>2 缩进</h2><ul><li><p>Python 的代码块不使用大括号 <strong>{}</strong> 来控制类，函数以及其他逻辑判断。python 最具特色的就是用<strong>缩进</strong>来写模块</p></li><li><p>缩进的空白数量是可变的，但是<strong>所有代码块语句必须包含相同的缩进空白数量</strong></p></li><li><p>Python语句中一般以新行作为语句的结束符，使用斜杠（ <code>\</code>）将一行的语句分为多行显示,语句中包含 [], {} 或 () 括号就不需要使用多行连接符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_threedays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-引号"><a href="#3-引号" class="headerlink" title="3 引号"></a>3 引号</h2><ul><li><p>字符串表示：<strong>引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” )</strong> </p></li><li><pre><code class="python">word = 'word'sentence = "这是一个句子。"paragraph = """这是一个段落。包含了多个语句"""<pre class="line-numbers language-none"><code class="language-none">## 4 注释* 单行注释：`#` 开头* 多行注释：三个单引号 `'''` 或三个双引号` """`## 5 print换行* print 默认输出是换行的* 在 Python 3.x 中，我们可以在 print() 函数中添加 `end=""` 参数，这样就可以实现不换行效果,end也可以设置其他特殊符号  ```python  print('这是字符串，', end="")  print('这里的字符串不会另起一行')  # 这是字符串，这里的字符串不会另起一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>在 Python 2.x中， 可以使用逗号 <code>, </code>来实现不换行效果;如果有变量，我们可以在逗号 , 后面直接添加变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span> <span class="token string">"数字为："</span><span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果 Python2.x 版本想使用 Python3.x 的 print 函数，可以导入 <em>_future</em>_ 包，该包禁用 Python2.x 的 print 语句，采用 Python3.x 的 print 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-标准数据类型"><a href="#6-标准数据类型" class="headerlink" title="6 标准数据类型"></a>6 标准数据类型</h2><ul><li><p><strong>不可变（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong>可变（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）</p></li><li><p>类型判断</p><ul><li><p>内置的 <code>type()</code> 函数可以用来查询变量所指的对象类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>isinstance</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">111</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型</li><li>isinstance()会认为子类是一种父类类型</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本命令</title>
      <link href="/2024/07/15/hexo-ji-ben-ming-ling/"/>
      <url>/2024/07/15/hexo-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo基本命令"><a href="#Hexo基本命令" class="headerlink" title="Hexo基本命令"></a>Hexo基本命令</h1><h2 id="1-Hexo环境安装"><a href="#1-Hexo环境安装" class="headerlink" title="1 Hexo环境安装"></a>1 Hexo环境安装</h2><ul><li><strong>git安装</strong></li><li><strong>nodejs安装</strong></li><li><strong><code>npm install -g hexo-cli</code></strong></li><li><strong><code>hexo init &lt;folder&gt;</code></strong></li></ul><h2 id="2-基本指令"><a href="#2-基本指令" class="headerlink" title="2 基本指令"></a>2 基本指令</h2><ul><li>**<code>hexo new [layout] &lt;title&gt;</code>**：新建一篇文章。</li><li>**<code>hexo generate</code>**：生成静态文件。</li><li>**<code>hexo publish [layout] &lt;filename&gt;</code>**：发表草稿。</li><li>**<code>hexo server</code>**：启动服务器。 默认情况下，访问网址为： <code>http://localhost:4000/</code>。</li><li>**<code>hexo deploy</code>**：部署你的网站。</li><li>**<code>hexo render &lt;file1&gt; [file2] ...</code>**：渲染文件。</li><li>**<code>hexo migrate &lt;type&gt;</code>**：从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</li><li>**<code>hexo clean</code>**：清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</li><li>**<code>hexo list &lt;type&gt;</code>**：列出所有路由。</li><li>**<code>hexo version</code>**：显示版本信息。</li><li>**<code>hexo config [key] [value]</code>**：列出网站的配置（<code>_config.yml</code>）。 如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</li><li>**<code>hexo --config custom.yml</code>**：自定义配置文件的路径</li><li>**<code>hexo --draft</code>**：显示 <code>source/_drafts</code> 文件夹中的草稿文章。</li><li>**<code>hexo --cwd /path/to/cwd</code>**：自定义当前工作目录（Current working directory）的路径。</li></ul><h2 id="3-打开本地服务器"><a href="#3-打开本地服务器" class="headerlink" title="3 打开本地服务器"></a>3 打开本地服务器</h2><ul><li><pre><code class="shell">hexo cleanhexo ghexo server(hexo s)<pre class="line-numbers language-none"><code class="language-none">## 4 hexo部署* 以github为例  ```yaml  deploy:    type: git    repository: https://github.com/Eliauk-L/Eliauk-L.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>安装<code>deploy-git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre><code class="shell">hexo cleanhexo generatehexo deploy<pre class="line-numbers language-none"><code class="language-none">## 5 布局* Hexo有三种默认布局：**`post、page和draft`*** 发布文章* ```shell  hexo new XXX  # 默认使用的是post布局，在source文件夹下的_post里面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>另起一页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page newpage<span class="token comment"># 系统会自动在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，</span><span class="token comment"># 访问newpage对应的链接就是http://xxx.xxx/newpage</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发布草稿</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft newdraft<span class="token comment"># 在source/_draft中新建一个newdraft.md文件，如果想要预览，那么可以使用 </span><span class="token comment"># hexo server --draft</span><span class="token comment"># 将草稿发表到post中</span>hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>参考：</strong></p><ol><li><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">https://blog.csdn.net/qq_58608526/article/details/124652412</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习02-初始Python</title>
      <link href="/2024/07/15/python-xue-xi-02-chu-shi-python/"/>
      <url>/2024/07/15/python-xue-xi-02-chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h2 id="初始Python"><a href="#初始Python" class="headerlink" title="初始Python"></a>初始Python</h2><h2 id="1-Python特性"><a href="#1-Python特性" class="headerlink" title="1 Python特性"></a>1 Python特性</h2><blockquote><p>Python 是一个高层次的结合了<strong>解释性、编译性、互动性和面向对象</strong>的脚本语言。</p></blockquote><ul><li>解释性</li><li>交互式</li><li>面向对象</li><li>跨平台</li></ul><h2 id="2-中文编码"><a href="#2-中文编码" class="headerlink" title="2 中文编码"></a>2 中文编码</h2><blockquote><p>Python2中默认的编码格式是 <strong>ASCII</strong> 格式，在没修改编码格式时无法正确打印汉字。</p></blockquote><p>解决方法：在文件开头加入 <strong># -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"你好，世界"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习01-环境安装</title>
      <link href="/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/"/>
      <url>/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-环境安装"><a href="#Python-环境安装" class="headerlink" title="Python 环境安装"></a>Python 环境安装</h1><h2 id="Anaconda-与-Pip"><a href="#Anaconda-与-Pip" class="headerlink" title="Anaconda 与 Pip"></a>Anaconda 与 Pip</h2><h3 id="Anaconda-含-Conda-包管理工具"><a href="#Anaconda-含-Conda-包管理工具" class="headerlink" title="Anaconda(含 Conda 包管理工具)"></a>Anaconda(含 Conda 包管理工具)</h3><ul><li>开源的 Python 发型版本，里面包含了 Python 和各种用于科学计算的包，可以完全独立使用</li><li>屏蔽了系统平台的差异，解决底层依赖。安装一个包之后依赖的东西全部处理好，省心</li><li>有一个<code>虚拟环境</code>的概念，每个环境之间是隔离的，都可以设定不同的 Python 版本以及各种包，不和系统的冲突，可以随便切换，要删除也是整个一起清理</li></ul><h3 id="Python-Pip-包管理工具"><a href="#Python-Pip-包管理工具" class="headerlink" title="Python(Pip 包管理工具)"></a>Python(Pip 包管理工具)</h3><ul><li>提供了对 Python 包的查找、下载、安装、卸载的功能。</li><li>Pip 是一个单纯的传统包管理器</li></ul><blockquote><p>使用 Anaconda 可以同时使用者两种包管理器，Conda 一般能做的更多些</p></blockquote><h3 id="Conda-与-Pip-常用命令"><a href="#Conda-与-Pip-常用命令" class="headerlink" title="Conda 与 Pip 常用命令"></a>Conda 与 Pip 常用命令</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda create <span class="token operator">-</span>n xx python<span class="token operator">=</span><span class="token number">3.8</span> <span class="token operator">//</span>创建python3<span class="token punctuation">.</span><span class="token number">8</span>的xx虚拟环境conda remove <span class="token operator">-</span>n xx <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span> <span class="token operator">//</span>删除xx虚拟环境conda activate xx <span class="token operator">//</span>进入xxx环境conda deactivate <span class="token operator">//</span>关闭环境conda env <span class="token builtin">list</span> <span class="token operator">//</span>显示所有的虚拟环境conda <span class="token builtin">list</span> <span class="token operator">//</span>查看通过conda已经安装的文件包conda install xxx <span class="token operator">//</span>安装xxx文件包conda update xxx <span class="token operator">//</span>更新xxx文件包conda uninstall xxx <span class="token operator">//</span>卸载xxx文件包conda search xxx <span class="token operator">//</span>查询xxx文件包的版本pip <span class="token builtin">list</span> <span class="token operator">//</span>查看通过pip已经安装的文件包pip install xxx <span class="token operator">//</span>安装xxx文件包pip uninstall xxx <span class="token operator">//</span>卸载xxx文件包pip search xxx <span class="token operator">//</span>查询xxx文件包的版本pip install –U xxx <span class="token operator">//</span>更新xxx文件包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Conda-与-Pip-换源"><a href="#Conda-与-Pip-换源" class="headerlink" title="Conda 与 Pip 换源"></a>Conda 与 Pip 换源</h3><ul><li><p><strong>C:\Users\用户名\pip\pip.ini</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">https://pypi.tuna.tsinghua.edu.cn/simple</span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.tuna.tsinghua.edu.cn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>C:\Users\用户名.condarc</strong></p><pre class="line-numbers language-condarc" data-language="condarc"><code class="language-condarc">channels:  - defaultsshow_channel_urls: truedefault_channels:  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p><a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></p><h2 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h2><p><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
