<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习07-元组</title>
      <link href="/2024/07/16/python-xue-xi-07-yuan-zu/"/>
      <url>/2024/07/16/python-xue-xi-07-yuan-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li><p>元组（tuple）：<strong>元素不可修改</strong>，使用<strong>小括号</strong></p></li><li><p>元组中只包含一个元素时，需要<strong>在元素后面添加逗号</strong><code>tuple1 = (50,)</code></p></li><li><p>元组可以使用<strong>下标索引</strong>来访问元组中的值</p></li><li><p>元组中的<strong>元素值是不允许修改</strong>的，但我们可以对元组进行<strong>连接组合</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34.56</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">)</span> <span class="token comment"># 以下修改元组元素操作是非法的。</span><span class="token comment"># tup1[0] = 100</span> <span class="token comment"># 创建一个新的元组</span>tup3 <span class="token operator">=</span> tup1 <span class="token operator">+</span> tup2<span class="token keyword">print</span><span class="token punctuation">(</span>tup3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>元组中的元素值是<strong>不允许删除</strong>的，但可以使用<strong>del语句来删除整个元组</strong></p></li></ul><h2 id="1-元组运算符"><a href="#1-元组运算符" class="headerlink" title="1 元组运算符"></a>1 元组运算符</h2><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len((1, 2, 3))</td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left">(1, 2, 3) + (4, 5, 6)</td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left">(‘Hi!’,) * 4</td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left">3 in (1, 2, 3)</td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left">for x in (1, 2, 3): print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h2 id="2-无关闭分隔符"><a href="#2-无关闭分隔符" class="headerlink" title="2 无关闭分隔符"></a>2 无关闭分隔符</h2><ul><li><p><strong>任意无符号的对象，以逗号隔开，默认为元组</strong></p></li><li><p><code>tup = "a", "b", "c", "d"</code></p></li></ul><h2 id="3-元组内置函数"><a href="#3-元组内置函数" class="headerlink" title="3 元组内置函数"></a>3 元组内置函数</h2><ul><li><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/att-tuple-cmp.html">cmp(tuple1, tuple2)</a></td><td>比较两个元组元素。Python 3.X 的版本中已经没有 cmp 函数</td></tr><tr><td><a href="https://www.runoob.com/python/att-tuple-len.html">len(tuple)</a></td><td>计算元组元素个数。</td></tr><tr><td><a href="https://www.runoob.com/python/att-tuple-max.html"> max(tuple)</a></td><td>返回元组中元素最大值。</td></tr><tr><td><a href="https://www.runoob.com/python/att-tuple-min.html"> min(tuple)</a></td><td>返回元组中元素最小值。</td></tr><tr><td><a href="https://www.runoob.com/python/att-tuple-tuple.html"> tuple(seq)</a></td><td>将列表转换为元组。</td></tr></tbody></table></li></ul><h2 id="4-命名元组"><a href="#4-命名元组" class="headerlink" title="4 命名元组"></a>4 命名元组</h2><ul><li><p><code>collections.namedtuple()</code> 函数通过使用一个普通的元组对象来实现通过名称来访问元素.实际上是一个返回 Python 中标准元组类型子类的一个工厂方法，支持所有的普通元组操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Subscriber <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Subscriber'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">,</span> <span class="token string">'joined'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub <span class="token operator">=</span> Subscriber<span class="token punctuation">(</span><span class="token string">'jonesy@example.com'</span><span class="token punctuation">,</span> <span class="token string">'2012-10-19'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subSubscriber<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token string">'jonesy@example.com'</span><span class="token punctuation">,</span> joined<span class="token operator">=</span><span class="token string">'2012-10-19'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub<span class="token punctuation">.</span>addr<span class="token string">'jonesy@example.com'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sub<span class="token punctuation">.</span>joined<span class="token string">'2012-10-19'</span><span class="token comment"># 你需要传递一个类型名和你需要的字段给它，然后它就会返回一个类，你可以初始化这个类，为你定义的字段传递值等。 </span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> addr<span class="token punctuation">,</span> joined <span class="token operator">=</span> sub<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> addr<span class="token string">'jonesy@example.com'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> joined<span class="token string">'2012-10-19'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命名元组另一个用途就是<strong>作为字典的替代</strong>，因为字典存储需要更多的内存空间。 如果你需要构建一个非常大的包含字典的数据结构，那么使用命名元组会更加高效。 但是需要注意的是，不像字典那样，<strong>一个命名元组是不可更改的。</strong>但可以使用命名元组实例的 <code>_replace()</code> 方法， 它会创建一个全新的命名元组并将对应的字段用新的值取代。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sStock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>shares <span class="token operator">=</span> <span class="token number">75</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>AttributeError<span class="token punctuation">:</span> can't <span class="token builtin">set</span> attribute<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span>_replace<span class="token punctuation">(</span>shares<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sStock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习06-列表</title>
      <link href="/2024/07/16/python-xue-xi-06-lie-biao/"/>
      <url>/2024/07/16/python-xue-xi-06-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字–<strong>索引，从0开始</strong></li><li>Python中6个内置的序列类型<ul><li><strong>字符串（string）</strong></li><li><strong>列表（list）</strong></li><li><strong>元组（tuple）</strong></li><li><strong>字节串（bytes）</strong></li><li><strong>字节数组（bytearray）</strong></li><li><strong>范围（range）</strong></li></ul></li><li>序列操作<ul><li>索引</li><li>切片</li><li>加乘</li><li>检查成员</li><li>长度</li><li>最大最小</li></ul></li><li>列表<ul><li>方括号**[]**内逗号分隔</li><li><strong>列表的数据项类型可以不同</strong></li></ul></li></ul><h2 id="1-列表操作"><a href="#1-列表操作" class="headerlink" title="1 列表操作"></a>1 列表操作</h2><blockquote><p><strong>访问列表元素</strong></p></blockquote><ul><li><p>通过下标索引访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list1[0]: "</span><span class="token punctuation">,</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list2[1:5]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#list1[0]:  physics</span><span class="token comment">#list2[1:5]:  [2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>列表更新</strong></p></blockquote><ul><li><code>del</code>删除列表元素：<code>del list[index]</code></li><li>列表修改：<code>list[index]=newvalue</code></li></ul><blockquote><p><strong>列表操作符</strong></p></blockquote><ul><li><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table></li></ul><blockquote><p><strong>列表比较</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 operator 模块</span><span class="token keyword">import</span> operatora <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"operator.eq(a,b): "</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"operator.eq(c,b): "</span><span class="token punctuation">,</span> operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token boolean">False</span>operator<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-列表函数-方法"><a href="#2-列表函数-方法" class="headerlink" title="2 列表函数&amp;方法"></a>2 列表函数&amp;方法</h2><table><thead><tr><th>函数&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a></td><td>比较两个列表的元素（<strong>Python 3.X 的版本移除</strong>）</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-len.html">len(list)</a></td><td>列表元素<strong>个数</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-max.html">max(list)</a></td><td>返回列表元素<strong>最大值</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-min.html">min(list)</a></td><td>返回列表元素<strong>最小值</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a></td><td><strong>将元组转换为列表</strong></td></tr><tr><td>[sorted(list,reverse=False)][]</td><td><strong>临时排序</strong>，返回一个新列表.<code>print(sorted(list))</code></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-append.html">list.append(obj)</a></td><td>在列表末尾<strong>添加</strong>新的对象，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-count.html">list.count(obj)</a></td><td>统计某个元素在列表中出现的<strong>次数</strong></td></tr><tr><td><a href="https://www.runoob.com/python/att-list-extend.html">list.extend(seq)</a></td><td>在列表末尾一次性<strong>追加</strong>另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>[list.index(x<a href="https://www.runoob.com/python/att-list-index.html">, start[, end]])</a></td><td>从列表中找出某个值第一个<strong>匹配项</strong>的索引位置</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a></td><td>将对象<strong>插入</strong>列表，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-pop.html">list.pop([index=-1])</a></td><td>移除列表中的<strong>一个</strong>元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-remove.html">list.remove(obj)</a></td><td>移除列表中某个<strong>值</strong>的第一个匹配项，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a></td><td><strong>反向</strong>列表中元素，无返回值</td></tr><tr><td><a href="https://www.runoob.com/python/att-list-sort.html">list.sort(cmp=None, key=None, reverse=False)</a></td><td>对原列表进行<strong>排序</strong>，key：比较对象，reverse = False 升序，永久性操作</td></tr></tbody></table><h2 id="3-遍历列表"><a href="#3-遍历列表" class="headerlink" title="3 遍历列表"></a>3 遍历列表</h2><blockquote><p><strong>for循环遍历</strong></p></blockquote><ul><li><p>索引遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>元素遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>列表表达式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>flattened <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix <span class="token keyword">for</span> num <span class="token keyword">in</span> row<span class="token punctuation">]</span>  <span class="token comment"># 创建一个包含matrix中所有数字的列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>列表解析</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _<span class="token punctuation">,</span> shares<span class="token punctuation">,</span> price<span class="token punctuation">,</span> _ <span class="token operator">=</span> data  <span class="token comment"># 通过下划线来丢弃其他值，可以使用认识变量名</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shares<span class="token number">50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price<span class="token number">91.1</span><span class="token comment"># 也可解压多个元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name<span class="token punctuation">,</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>date <span class="token operator">=</span> data<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-复制列表"><a href="#4-复制列表" class="headerlink" title="4 复制列表"></a>4 复制列表</h2><ul><li><p>==直接变量赋值==：同一存储地址，同步更新，相当于一个别名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==切片复制==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==copy方法==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==list方法==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==for循环==：通过遍历添加元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>==列表推导式==：不同存储地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> list1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="5-数值列表–range"><a href="#5-数值列表–range" class="headerlink" title="5 数值列表–range"></a>5 数值列表–range</h2><ul><li><p>range函数用于创建<strong>整数列表</strong>，常用于<strong>for循环</strong></p></li><li><p>使用：<code>range(start,stop,step)</code></p><ul><li><p>start:开始数值，默认为0</p></li><li><p>stop:结束数值，不包括stop</p></li><li><p>step:步长，默认为1，可以为负，表示递减</p></li><li><p>生成的数值列表范围：<strong>start&lt;= value(+step) &lt; stop  (左闭右开)</strong></p></li><li><pre><code class="python">num_list = list(range(5,0,-1))print(num_list)[5,4,3,2,1]</code></pre></li></ul></li></ul><p>参考：</p><ol><li><a href="https://blog.csdn.net/weixin_49891576/article/details/128535492">https://blog.csdn.net/weixin_49891576/article/details/128535492</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习05-字符串</title>
      <link href="/2024/07/16/python-xue-xi-05-zi-fu-chuan/"/>
      <url>/2024/07/16/python-xue-xi-05-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用.</p></li><li><p>字符串访问：<strong>下标读取[]</strong></p></li><li><p>转义字符：<code>\</code>  ，使用 <strong><code>r</code></strong> 可以让反斜杠不发生转义</p></li><li><p>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hi <span class="token operator">=</span> <span class="token triple-quoted-string string">'''hi there'''</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hi   <span class="token comment"># repr()</span><span class="token string">'hi\nthere'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> hi  <span class="token comment"># str()</span>hi there  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Python 没有单独的字符类型，一个字符就是长度为1的字符串</p></li><li><p><strong>字符串不能被改变</strong>。向一个索引位置赋值，比如 <strong>word[0] = ‘m’</strong> 会导致错误</p></li></ul><h2 id="1-字符串运算符"><a href="#1-字符串运算符" class="headerlink" title="1 字符串运算符"></a>1 字符串运算符</h2><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例(a=’Hello’,b=’Python’)</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left">字符串连接</td><td align="left">&gt;&gt;&gt;a + b <br>‘HelloPython’</td></tr><tr><td align="left"><code>*</code></td><td align="left">重复输出字符串</td><td align="left">&gt;&gt;&gt;a * 2 <br>‘HelloHello’</td></tr><tr><td align="left"><code>[]</code></td><td align="left">通过索引获取字符串中字符</td><td align="left">&gt;&gt;&gt;a[1] <br>‘e’</td></tr><tr><td align="left"><code>[ : ]</code></td><td align="left">截取字符串中的一部分</td><td align="left">&gt;&gt;&gt;a[1:4] <br>‘ell’</td></tr><tr><td align="left"><code>in</code></td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left">&gt;&gt;&gt;”H” in a <br>True</td></tr><tr><td align="left"><code>not in</code></td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left">&gt;&gt;&gt;”M” not in a <br>True</td></tr><tr><td align="left"><code>r/R</code></td><td align="left">原始字符串–所有的字符串都是直接按照字面的意思来使用</td><td align="left">&gt;&gt;&gt;print r’\n’ <br>\n <br>&gt;&gt;&gt; print R’\n’ <br>\n</td></tr><tr><td align="left"><code>%</code></td><td align="left">格式字符串</td><td align="left"></td></tr></tbody></table><h2 id="2-字符串格式化"><a href="#2-字符串格式化" class="headerlink" title="2 字符串格式化"></a>2 字符串格式化</h2><ul><li><p>Python2.6 开始，新增了一种格式化字符串的函数 <code>str.format()</code></p></li><li><p>format 函数可以接受不限个参数，位置可以不按顺序</p></li><li><pre><code class="python">&gt;&gt;&gt;"{} {}".format("hello", "world")    # 不设置指定位置，按默认顺序'hello world' &gt;&gt;&gt; "{0} {1}".format("hello", "world")  # 设置指定位置'hello world' &gt;&gt;&gt; "{1} {0} {1}".format("hello", "world")  # 设置指定位置'world hello world'<pre class="line-numbers language-none"><code class="language-none">* 设置参数  ```python  #!/usr/bin/python  # -*- coding: UTF-8 -*-     print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))     # 通过字典设置参数  site = {"name": "菜鸟教程", "url": "www.runoob.com"}  print("网站名：{name}, 地址 {url}".format(**site))     # 通过列表索引设置参数  my_list = ['菜鸟教程', 'www.runoob.com']  print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>传入对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">class</span> <span class="token class-name">AssignValue</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> valuemy_value <span class="token operator">=</span> AssignValue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'value 为: {0.value}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># "0" 是可选的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以使用大括号 <strong>{}</strong> 来转义大括号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"{} 对应的位置是 {{0}}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"runoob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># runoob 对应的位置是 {0}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式化长字符串</p><ul><li><p>使用 <code>textwrap</code> 模块来格式化字符串的输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> textwrap<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> "Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> \the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span> around the eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span> \look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span>"<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span><span class="token keyword">not</span> around the eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span> aroundthe eyes<span class="token punctuation">,</span> don't look around the eyes<span class="token punctuation">,</span>look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> initial_indent<span class="token operator">=</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Look into my eyes<span class="token punctuation">,</span> look into myeyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span>around the eyes<span class="token punctuation">,</span> don't look around theeyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> you're under<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> subsequent_indent<span class="token operator">=</span><span class="token string">'    '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Look into my eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span>    the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> the eyes<span class="token punctuation">,</span> <span class="token keyword">not</span>    around the eyes<span class="token punctuation">,</span> don't look around    the eyes<span class="token punctuation">,</span> look into my eyes<span class="token punctuation">,</span> you're    under<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出自动匹配终端大小:使用 <code>os.get_terminal_size()</code> 方法来获取终端的大小尺寸</p></li></ul></li><li><p><strong>!a</strong> (使用 <strong>ascii()</strong>), <strong>!s</strong> (使用 <strong>str()</strong>) 和 <strong>!r</strong> (使用 <strong>repr()</strong>) 可以用于在格式化某个值之前对其进行转化</p></li><li><p><code>print()</code>改变默认的分隔符或者行尾符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">)</span>ACME <span class="token number">50</span> <span class="token number">91.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>ACME<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.5</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'!!\n'</span><span class="token punctuation">)</span>ACME<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">91.5</span>!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-Unicode-字符串"><a href="#3-Unicode-字符串" class="headerlink" title="3 Unicode 字符串"></a>3 Unicode 字符串</h2><p>引号前小写的”u”表示创建 Unicode 字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">u'Hello\u0020World !'</span><span class="token string">u'Hello World !'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-字符串函数"><a href="#4-字符串函数" class="headerlink" title="4 字符串函数"></a>4 字符串函数</h2><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-string-capitalize.html">string.capitalize()</a></td><td align="left">把字符串的第一个字符<strong>大写</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-center.html">string.center(width)</a></td><td align="left">返回一个原字符串<strong>居中</strong>,并使用空格<strong>填充</strong>至长度 width 的新字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-count.html">string.count(str, beg=0, end=len(string))</a></strong></td><td align="left">返回 str 在 string 里面出现的<strong>次数</strong>，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-decode.html">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td><td align="left">以 encoding 指定的编码格式<strong>解码</strong> string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-encode.html">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td><td align="left">以 encoding 指定的编码格式<strong>编码</strong> string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html">string.endswith(obj, beg=0, end=len(string))</a></strong></td><td align="left">检查字符串是否<strong>以 obj 结束</strong>，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-expandtabs.html">string.expandtabs(tabsize=8)</a></td><td align="left">把字符串 string 中的 <strong>tab 符号转为空格</strong>，tab 符号默认的空格数是 8。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-find.html">string.find(str, beg=0, end=len(string))</a></strong></td><td align="left">检测 str 是否<strong>包含</strong>在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的<strong>索引值</strong>，否则返回-1</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-format.html">string.format()</a></strong></td><td align="left"><strong>格式化</strong>字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-index.html">string.index(str, beg=0, end=len(string))</a></strong></td><td align="left">跟find()方法一样，只不过如果str不在 string中会报一个<strong>异常</strong>.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalnum.html">string.isalnum()</a></td><td align="left">如果 string <strong>至少有一个字符并且所有字符都是字母或数字</strong>则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalpha.html">string.isalpha()</a></td><td align="left">如果 string <strong>至少有一个字符并且所有字符都是字母</strong>则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdecimal.html">string.isdecimal()</a></td><td align="left">如果 string 只包含<strong>十进制数字</strong>则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdigit.html">string.isdigit()</a></td><td align="left">如果 string 只包含<strong>数字</strong>则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-islower.html">string.islower()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是<strong>小写</strong>，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isnumeric.html">string.isnumeric()</a></td><td align="left">如果 string 中只包含<strong>数字字符</strong>，则返回 True，否则返回 False。针对unicode对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isspace.html">string.isspace()</a></td><td align="left">如果 string 中只包含<strong>空格</strong>，则返回 True，否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-istitle.html">string.istitle()</a></td><td align="left">如果 string 是标题化的(每个单词的首字母大写)则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isupper.html">string.isupper()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是<strong>大写</strong>，则返回 True，否则返回 False</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-join.html">string.join(seq)</a></strong></td><td align="left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)<strong>合并</strong>为一个新的字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-ljust.html">string.ljust(width)</a></td><td align="left">返回一个原字符串<strong>左对齐</strong>,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lower.html">string.lower()</a></td><td align="left">转换 string 中所有大写字符为小写.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lstrip.html">string.lstrip()</a></td><td align="left"><strong>截掉 string 左边的空格</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-maketrans.html">string.maketrans(intab, outtab)</a></td><td align="left">maketrans() 方法用于创建<strong>字符映射</strong>的<strong>转换表</strong>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。然后再调用str.translate()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-max.html">max(str)</a></td><td align="left">返回字符串 str 中最大的字母。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-min.html">min(str)</a></td><td align="left">返回字符串 str 中最小的字母。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-partition.html">string.partition(str)</a></strong></td><td align="left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,<strong>把 字 符 串 string 分 成 一 个 3 元 素 的 元 组</strong> (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-replace.html">string.replace(str1, str2, num=string.count(str1))</a></strong></td><td align="left">把 string 中的 str1 <strong>替换</strong>成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rfind.html">string.rfind(str, beg=0,end=len(string) )</a></td><td align="left">类似于 find() 函数，返回字符串<strong>最后一次出现</strong>的位置，如果没有匹配项则返回 -1。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rindex.html">string.rindex( str, beg=0,end=len(string))</a></td><td align="left">类似于 index()，不过是返回<strong>最后一个匹配</strong>到的子字符串的索引号。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rjust.html">string.rjust(width)</a></td><td align="left">返回一个原字符串<strong>右对齐</strong>,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rpartition.html">string.rpartition(str)</a></td><td align="left">类似于 partition()函数,不过是<strong>从右边开始查找</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rstrip.html">string.rstrip()</a></td><td align="left">删除 string 字符串<strong>末尾的空格</strong></td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-split.html">string.split(str=””, num=string.count(str))</a></strong></td><td align="left">以 str 为分隔符<strong>切片</strong> string，如果 num 有指定值，则仅分隔 <strong>num+1</strong> 个子字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-splitlines.html">string.splitlines([keepends])</a></td><td align="left">按照行(‘\r’, ‘\r\n’, ‘\n’)分隔，返回一个<strong>包含各行作为元素的列表</strong>，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-startswith.html">string.startswith(obj, beg=0,end=len(string))</a></td><td align="left">检查字符串是否是<strong>以 obj 开头</strong>，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.obj可以是元组 <code>name.endswith(('.c', '.h'))</code>  list或set需要转换成tuple</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-strip.html">string.strip([obj])</a></strong></td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-swapcase.html">string.swapcase()</a></td><td align="left"><strong>翻转 string 中的大小写</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-title.html">string.title()</a></td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-translate.html">string.translate(str, del=””)</a></strong></td><td align="left">根据 str 给出的表(包含 256 个字符)<strong>转换</strong> string 的字符,要过滤掉的字符放到 del 参数中，结合maketrans()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-upper.html">string.upper()</a></td><td align="left">转换 string 中的小写字母为大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-zfill.html">string.zfill(width)</a></td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table><h2 id="5-字符串拼接"><a href="#5-字符串拼接" class="headerlink" title="5 字符串拼接"></a>5 字符串拼接</h2><ul><li><p><code>+</code>:简单字符串合并</p><ul><li>使用加号(+)操作符去连接大量的字符串的时候是非常<strong>低效率</strong>的， 因为加号连接会引起内存复制以及垃圾回收操作</li><li>可以先收集所有的字符串片段然后再将它们连接起来</li></ul></li><li><p><code>join</code>：序列中的字符串合并</p><ul><li><p>利用生成器表达式转换数据为字符串的同时合并字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">91.1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token string">'ACME,50,91.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>直接放在一起</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">'Hello'</span> <span class="token string">'World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'HelloWorld'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意不必要的字符串连接操作</p><ul><li><pre><code class="python">print(a + ':' + b + ':' + c) # Uglyprint(':'.join([a, b, c])) # Still uglyprint(a, b, c, sep=':') # Better<pre class="line-numbers language-none"><code class="language-none">* 使用I/O操作和字符串连接操作  ```python  # Version 1 (string concatenation)   适用两个字符串很小  f.write(chunk1 + chunk2)    # Version 2 (separate I/O operations)使用两个字符串较大  f.write(chunk1)  f.write(chunk2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>构建大量小字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token string">'Is'</span>    <span class="token keyword">yield</span> <span class="token string">'Chicago'</span>    <span class="token keyword">yield</span> <span class="token string">'Not'</span>    <span class="token keyword">yield</span> <span class="token string">'Chicago?'</span>    <span class="token comment"># 合并</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># IO</span><span class="token keyword">for</span> part <span class="token keyword">in</span> sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结合IO</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> maxsize<span class="token punctuation">)</span><span class="token punctuation">:</span>    parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> part <span class="token keyword">in</span> source<span class="token punctuation">:</span>        parts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>part<span class="token punctuation">)</span>        size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&gt;</span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span>            parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">yield</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token comment"># 结合文件操作  分块存储</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> part <span class="token keyword">in</span> combine<span class="token punctuation">(</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="6-字符串分割"><a href="#6-字符串分割" class="headerlink" title="6 字符串分割"></a>6 字符串分割</h2><ul><li><p>简单的字符串分割：<code>str.split()</code>   不允许有多个分隔符或者是分隔符周围不确定的空格</p></li><li><p><code>re.split()</code></p><ul><li><pre><code class="python">&gt;&gt;&gt; line = 'asdf fjdk; afed, fjek,asdf, foo'&gt;&gt;&gt; import re&gt;&gt;&gt; re.split(r'[;,\s]\s*', line) # 逗号，分号或者是空格，并且后面紧跟着任意个的空格['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']<pre class="line-numbers language-none"><code class="language-none">* 注意正则表达式中是否包含一个括号**捕获分组**。 如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中，可用于重新构造字符串  ```python  &gt;&gt;&gt; fields = re.split(r'(;|,|\s)\s*', line)  &gt;&gt;&gt; fields  ['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><h2 id="7-通配符匹配字符串"><a href="#7-通配符匹配字符串" class="headerlink" title="7 通配符匹配字符串"></a>7 通配符匹配字符串</h2><ul><li><p><code>fnmatch</code> 模块提供了两个函数—— <code>fnmatch()</code> 和 <code>fnmatchcase()</code> ，可以用来实现通配符(比如 <code>*.py</code> , <code>Dat[0-9]*.csv</code> 等)匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fnmatch <span class="token keyword">import</span> fnmatch<span class="token punctuation">,</span> fnmatchcase<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.txt'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'?oo.txt'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'Dat45.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat[0-9]*'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dat1.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat2.csv'</span><span class="token punctuation">,</span> <span class="token string">'config.ini'</span><span class="token punctuation">,</span> <span class="token string">'foo.py'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> fnmatch<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'Dat*.csv'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Dat1.csv'</span><span class="token punctuation">,</span> <span class="token string">'Dat2.csv'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fnmatch()</code> 函数<strong>使用底层操作系统的大小写敏感规则(<strong>不同的系统是不一样的)来匹配模式。可以使用 <code>fnmatchcase()</code> 来代替。它完全使用你的模式</strong>大小写匹配</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># On OS X (Mac)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># On Windows</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatch<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fnmatchcase<span class="token punctuation">(</span><span class="token string">'foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'*.TXT'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>处理非文件名的字符串。如果你的代码需要做文件名的匹配，最好使用 ==glob== 模块。</strong></p></li></ul><h2 id="8-Unicode文本标准化"><a href="#8-Unicode文本标准化" class="headerlink" title="8 Unicode文本标准化"></a>8 Unicode文本标准化</h2><ul><li><p>由于某些字符能够用多个合法的编码表示，处理Unicode字符串需要确保所有字符串在底层有相同的表示</p></li><li><p>使用<code>unicodedata</code>模块将文本标准化</p><ul><li><pre><code class="python">&gt;&gt;&gt; import unicodedata&gt;&gt;&gt; s1 = 'Spicy Jalape\u00f1o' #整体字符&gt;&gt;&gt; s2 = 'Spicy Jalapen\u0303o' # n+~&gt;&gt;&gt; s1'Spicy Jalapeño'&gt;&gt;&gt; s2'Spicy Jalapeño'&gt;&gt;&gt; t1 = unicodedata.normalize('NFC', s1)&gt;&gt;&gt; t2 = unicodedata.normalize('NFC', s2)&gt;&gt;&gt; t1 == t2True&gt;&gt;&gt; print(ascii(t1))'Spicy Jalape\xf1o'&gt;&gt;&gt; t3 = unicodedata.normalize('NFD', s1)&gt;&gt;&gt; t4 = unicodedata.normalize('NFD', s2)&gt;&gt;&gt; t3 == t4True&gt;&gt;&gt; print(ascii(t3))'Spicy Jalapen\u0303o'<pre class="line-numbers language-none"><code class="language-none">  * 字符串标准化的方式    * `NFC`表示字符应该是**整体**组成(比如可能的话就使用单一编码)    * `NFD`表示字符应该**分解**为多个组合字符表示* 清除文本的变音符  ```python  &gt;&gt;&gt; t1 = unicodedata.normalize('NFD', s1)  &gt;&gt;&gt; ''.join(c for c in t1 if not unicodedata.combining(c))  'Spicy Jalapeno'  # combining() 用于测试一个字符是否为和音字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><h2 id="9-字符串清理"><a href="#9-字符串清理" class="headerlink" title="9 字符串清理"></a>9 字符串清理</h2><ul><li><p><code>s = 'pýtĥöñ\fis\tawesome\r\n'</code></p></li><li><p>清理空白字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> remap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\f'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># Deleted</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>remap<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'pýtĥöñ is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除和音符</p><ul><li>translate方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> unicodedata<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cmb_chrs <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                         <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>combining<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 每个Unicode和音符作为键，对应的值全部为 None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token string">'pýtĥöñ is awesome\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>cmb_chrs<span class="token punctuation">)</span><span class="token string">'python is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编解码方法丢弃和音符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token string">'pýtĥöñ is awesome\n'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token string">'python is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>构造一个将所有Unicode数字字符映射到对应的ASCII字符上的表格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digitmap <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> unicodedata<span class="token punctuation">.</span>digit<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>category<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Nd'</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digitmap<span class="token punctuation">)</span><span class="token number">460</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Arabic digits</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token string">'\u0661\u0662\u0663'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>digitmap<span class="token punctuation">)</span><span class="token string">'123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="10-字符串中插入变量"><a href="#10-字符串中插入变量" class="headerlink" title="10 字符串中插入变量"></a>10 字符串中插入变量</h2><ul><li><p>创建一个内嵌变量的字符串，变量被它的值所表示的字符串替换掉</p></li><li><p><code>format</code>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'{name} has {n} messages.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Guido'</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结合使用 <code>format_map()</code> 和 <code>vars()</code>   ：要被替换的变量能在变量域中找到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span class="token comment"># 也适用于对象实例</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> Info<span class="token punctuation">(</span><span class="token string">'Guido'</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>format</code> 和 <code>format_map()</code> 的一个缺陷就是它们并不能很好的处理<strong>变量缺失</strong>的情况，会抛出异常。解决：<strong>定义一个含有 <code>__missing__()</code> 方法的字典对象</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">safesub</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""防止key找不到"""</span>    <span class="token keyword">def</span> <span class="token function">__missing__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'{'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> n <span class="token comment"># Make sure n is undefined</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>safesub<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Guido has {n} messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具封装：</p><ul><li><pre><code class="python">import sysdef sub(text):    return text.format_map(safesub(sys._getframe(1).f_locals))# 使用&gt;&gt;&gt; name = 'Guido'&gt;&gt;&gt; n = 37&gt;&gt;&gt; print(sub('Hello {name}'))Hello Guido&gt;&gt;&gt; print(sub('You have {n} messages.'))You have 37 messages.&gt;&gt;&gt; print(sub('Your favorite color is {color}'))Your favorite color is {color}<pre class="line-numbers language-none"><code class="language-none">* ==`f-string`==:**Python3.6以上的版本**  * ```python    &gt;&gt;&gt; name = 'Guido'    &gt;&gt;&gt; n = 37    &gt;&gt;&gt; print(f'{name} has {n} messages.')    'Guido has 37 messages.'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><h2 id="11-f-string用法"><a href="#11-f-string用法" class="headerlink" title="11 f-string用法"></a>11 f-string用法</h2><ul><li><p>Python中的f字符串是一种字符串格式化语法，它可以将变量、表达式和函数等动态地嵌入到字符串中</p></li><li><p><strong>Python3.6及以上</strong>版本支持f-string</p></li><li><p><code>接受表达式（包括函数调用）</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Guido'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token number">37</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> messages.'</span></span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">'Guido'</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> messages.'</span></span><span class="token punctuation">)</span><span class="token string">'Guido has 37 messages.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>格式化输出</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">val <span class="token operator">=</span> <span class="token number">11</span><span class="token comment"># 通过 : 后跟 浮点数标识 ，可以实现格式化浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 11.000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># 11.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>格式化时间</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">:</span><span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token format-spec">%M</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 2024-07-03 21:07</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>接收对象</code>:对象必须定义了__str__()或__repr__()函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>job <span class="token operator">=</span> job    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>job<span class="token punctuation">}</span></span><span class="token string">"</span></span>u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">'Ace'</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># Ace is a teacher</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-字节字符串"><a href="#12-字节字符串" class="headerlink" title="12 字节字符串"></a>12 字节字符串</h2><ul><li><p>大多数情况下，在文本字符串上的操作均可用于字节字符串</p></li><li><p>字节字符串的索引操作返回整数而不是单独字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token string">b'Hello World'</span> <span class="token comment"># Byte string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">72</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字节字符串解码成字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">b'Hello World'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token string">b'Hello World'</span> <span class="token comment"># Observe b'...'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串编码为字节字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'{:10s} {:10d} {:10.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">490.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token string">b'ACME 100 490.10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="13-切片命名"><a href="#13-切片命名" class="headerlink" title="13 切片命名"></a>13 切片命名</h2><ul><li><p>代码中如果出现大量的硬编码下标会使得代码的可读性和可维护性大大降低</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">######    0123456789012345678901234567890123456789012345678901234567890'</span>record <span class="token operator">=</span> <span class="token string">'....................100 .......513.25 ..........'</span>cost <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">float</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">)</span>SHARES <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>PRICE <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>cost <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>SHARES<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">float</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>PRICE<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内置的 <code>slice()</code> 函数创建了一个切片对象。所有使用切片的地方都可以使用切片对象。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> items<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>切片对象<code>a</code>可以通过调用<code>a.start</code> , <code>a.stop</code> , <code>a.step</code> 属性来获取更多的信息</p></li><li><p>调用切片的 <code>indices(size)</code> 方法将它映射到一个已知大小的序列上,返回一个三元组 <code>(start, stop, step)</code> ，所有的值都会被缩小，直到适合这个已知序列的边界为止,防止出现<code>IndexError</code> 异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>start<span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>stop<span class="token number">50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>step<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">'HelloWorld'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>indices<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">.</span>indices<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Wrd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>参考：</p><ol><li><a href="https://blog.csdn.net/m0_54701273/article/details/129916943">https://blog.csdn.net/m0_54701273/article/details/129916943</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习04-数字</title>
      <link href="/2024/07/16/python-xue-xi-04-shu-zi/"/>
      <url>/2024/07/16/python-xue-xi-04-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul><li>Number属于<strong>不可改变的数据类型</strong>，改变数字数据类型会分配一个新的对象</li><li>删除对象引用：<code>del var1[,var2[,var3[....,varN]]]</code></li><li>python2四种不同数字类型<ul><li>int</li><li>long</li><li>float</li><li>complex</li></ul></li><li>python3中没有long，取而代之的是<strong>bool</strong> (布尔), 如 True</li><li><strong>bool 是 int 的子类</strong>，True 和 False 可以和数字相加， True==1、False==0 会返回 True</li></ul><h2 id="1-浮点数说明"><a href="#1-浮点数说明" class="headerlink" title="1 浮点数说明"></a>1 浮点数说明</h2><ul><li><p>浮点数的一个普遍问题是它们<strong>并不能精确的表示十进制数</strong>.由底层CPU和IEEE 754标准通过自己的浮点单位去执行算术时的特征。 由于Python的浮点数据类型使用底层表示存储数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">4.2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">2.1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> b<span class="token number">6.300000000000001</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6.3</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>精确表示：使用 <code>decimal</code> 模块，主要用于<strong>金融数据</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">'4.2'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">'2.1'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> bDecimal<span class="token punctuation">(</span><span class="token string">'6.3'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token number">6.3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> Decimal<span class="token punctuation">(</span><span class="token string">'6.3'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2 数据类型转换"></a>2 数据类型转换</h2><ul><li><p>Python 数据类型转换可以分为两种</p><ul><li>隐式类型转换 - 自动完成</li><li>显式类型转换 - 需要使用类型函数来转换</li></ul></li><li><p>较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失</p></li><li><p>对数据内置的类型进行转换，只需要将<strong>数据类型作为函数名</strong>，如：<code>int(x [,base])、long(x [,base] )、float(x)、complex(real [,imag])、str(x)、tuple(s)、list(s)、set(s)、dict(d)、frozenset(s)</code></p></li><li><p><code>repr(x)</code>:将对象 x 转换为表达式字符串</p></li><li><p><code>eval(str)</code>:用来计算在字符串中的有效Python表达式,并返回一个对象</p></li><li><p><code>chr(x)</code>:将一个整数转换为一个字符</p></li><li><p><code>ord(x)</code>:将一个字符转换为它的整数值</p></li><li><p><code>bin(x)、hex(x)、oct(x)</code>:整数–&gt;二进制、十六进制、八进制</p></li></ul><h2 id="3-math与cmath模块"><a href="#3-math与cmath模块" class="headerlink" title="3 math与cmath模块"></a>3 math与cmath模块</h2><blockquote><p>cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算</p></blockquote><ul><li><p>查看包中内容：<code>dir()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> math<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'copysign'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'degrees'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'erf'</span><span class="token punctuation">,</span> <span class="token string">'erfc'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'fabs'</span><span class="token punctuation">,</span> <span class="token string">'factorial'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'frexp'</span><span class="token punctuation">,</span> <span class="token string">'fsum'</span><span class="token punctuation">,</span> <span class="token string">'gamma'</span><span class="token punctuation">,</span> <span class="token string">'gcd'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'inf'</span><span class="token punctuation">,</span> <span class="token string">'isclose'</span><span class="token punctuation">,</span> <span class="token string">'isfinite'</span><span class="token punctuation">,</span> <span class="token string">'isinf'</span><span class="token punctuation">,</span> <span class="token string">'isnan'</span><span class="token punctuation">,</span> <span class="token string">'ldexp'</span><span class="token punctuation">,</span> <span class="token string">'lgamma'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log2'</span><span class="token punctuation">,</span> <span class="token string">'modf'</span><span class="token punctuation">,</span> <span class="token string">'nan'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'radians'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">,</span> <span class="token string">'tau'</span><span class="token punctuation">,</span> <span class="token string">'trunc'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-数学函数"><a href="#4-数学函数" class="headerlink" title="4 数学函数"></a>4 数学函数</h2><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/func-number-abs.html">abs(x)</a></td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-ceil.html">ceil(x)</a></td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-cmp.html">cmp(x, y)</a></td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1.<strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-exp.html">exp(x)</a></td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-fabs.html">fabs(x)</a></td><td align="left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-floor.html">floor(x)</a></td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-log.html">log(x)</a></td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-log10.html">log10(x)</a></td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-max.html">max(x1, x2,…)</a></td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-min.html">min(x1, x2,…)</a></td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-modf.html">modf(x)</a></td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-pow.html">pow(x, y)</a></td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">[round(x [,n])](<a href="https://www.runoob.com/python/func-number-round.html">https://www.runoob.com/python/func-number-round.html</a>)</td><td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。n值如果为负数，舍入运算会作用在十位、百位、千位等上面</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-sqrt.html">sqrt(x)</a></td><td align="left">返回数字x的平方根</td></tr></tbody></table><h2 id="5-随机数函数"><a href="#5-随机数函数" class="headerlink" title="5 随机数函数"></a>5 随机数函数</h2><p><code>random</code> 模块</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/func-number-choice.html">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">[randrange (<a href="https://www.runoob.com/python/func-number-randrange.html">start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-random.html">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">[seed([x])](<a href="https://www.runoob.com/python/func-number-seed.html">https://www.runoob.com/python/func-number-seed.html</a>)</td><td align="left">改变随机数生成器的种子seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-shuffle.html">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-uniform.html">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。均匀分布</td></tr><tr><td align="left">sample(seq,num)</td><td align="left">随机选取num个不同元素</td></tr><tr><td align="left">randint(x,y)</td><td align="left">生成随机整数，在[x,y]范围内</td></tr></tbody></table><h2 id="6-数字的格式化输出"><a href="#6-数字的格式化输出" class="headerlink" title="6 数字的格式化输出"></a>6 数字的格式化输出</h2><ul><li><p>控制数字的位数、对齐、千位分隔符</p></li><li><p>格式化输出单个数字的时候，可以使用内置的 <code>format()</code> 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">1234.56789</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 小数位数</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0.2f'</span><span class="token punctuation">)</span><span class="token string">'1234.57'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，右对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'&gt;10.1f'</span><span class="token punctuation">)</span><span class="token string">'    1234.6'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，左对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'&lt;10.1f'</span><span class="token punctuation">)</span><span class="token string">'1234.6    '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 输出宽度，居中对齐</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'^10.1f'</span><span class="token punctuation">)</span><span class="token string">'  1234.6  '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 显示千分位</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token string">'1,234.56789'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0,.1f'</span><span class="token punctuation">)</span>  <span class="token comment"># 千分位+1位小数</span><span class="token string">'1,234.6'</span><span class="token comment"># 指数记法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token string">'1.234568e+03'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'0.2E'</span><span class="token punctuation">)</span><span class="token string">'1.23E+03'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时指定宽度和精度的一般形式是 <code>'[&lt;&gt;^]?width[,]?(.digits)?' </code>， 其中 <code>width</code> 和 <code>digits</code> 为整数，<code>？</code>代表可选部分。 同样的格式也被用在字符串的 <code>format()</code> 方法中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The value is {:0,.2f}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token string">'The value is 1,234.57'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p>str.format() 格式化数字</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left">数字</th><th align="left">格式</th><th align="left">输出</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">3.1415926</td><td align="left"><code>{:.2f}</code></td><td align="left">3.14</td><td align="left">保留小数点后两位</td></tr><tr><td align="left">3.1415926</td><td align="left"><code>{:+.2f}</code></td><td align="left">+3.14</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">-1</td><td align="left"><code>{:-.2f}</code></td><td align="left">-1.00</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">2.71828</td><td align="left"><code>{:.0f}</code></td><td align="left">3</td><td align="left">不带小数</td></tr><tr><td align="left">5</td><td align="left"><code>{:0&gt;2d}</code></td><td align="left">05</td><td align="left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td align="left">5</td><td align="left"><code>{:x&lt;4d}</code></td><td align="left">5xxx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">10</td><td align="left"><code>{:x&lt;4d}</code></td><td align="left">10xx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">1000000</td><td align="left"><code>{:,}</code></td><td align="left">1,000,000</td><td align="left">以逗号分隔的数字格式</td></tr><tr><td align="left">0.25</td><td align="left"><code>{:.2%}</code></td><td align="left">25.00%</td><td align="left">百分比格式</td></tr><tr><td align="left">1000000000</td><td align="left"><code>{:.2e}</code></td><td align="left">1.00e+09</td><td align="left">指数记法</td></tr><tr><td align="left">13</td><td align="left"><code>{:&gt;10d}</code></td><td align="left">13</td><td align="left">右对齐 (默认, 宽度为10)</td></tr><tr><td align="left">13</td><td align="left"><code>{:&lt;10d}</code></td><td align="left">13</td><td align="left">左对齐 (宽度为10)</td></tr><tr><td align="left">13</td><td align="left"><code>{:^10d}</code></td><td align="left">13</td><td align="left">中间对齐 (宽度为10)</td></tr><tr><td align="left">11</td><td align="left"><code>'{:b}'.format(11) '{:d}'.format(11) '{:o}'.format(11) '{:x}'.format(11) '{:#x}'.format(11) '{:#X}'.format(11)</code></td><td align="left"><code>1011 11 13 b 0xb 0XB</code></td><td align="left">进制</td></tr></tbody></table><h2 id="7-无穷大与NaN"><a href="#7-无穷大与NaN" class="headerlink" title="7 无穷大与NaN"></a>7 无穷大与NaN</h2><ul><li><p>使用 <code>float()</code> 来创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ainf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token operator">-</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cnan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>isinf<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>无穷大数在执行数学计算的时候会传播</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">+</span> <span class="token number">45</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">*</span> <span class="token number">10</span>inf<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">/</span> a<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>NaN值会在所有操作中传播并不会产生异常</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">+</span> <span class="token number">23</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">/</span> <span class="token number">2</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">*</span> <span class="token number">2</span>nan<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>c<span class="token punctuation">)</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>NaN值之间的比较操作总是返回False</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'nan'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">==</span> d<span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token keyword">is</span> d<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-数值运算"><a href="#8-数值运算" class="headerlink" title="8 数值运算"></a>8 数值运算</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span>  <span class="token comment"># 加法</span><span class="token number">9</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment"># 减法</span><span class="token number">2.3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span>  <span class="token comment"># 乘法</span><span class="token number">21</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># 除法，得到一个浮点数</span><span class="token number">0.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment"># 除法，得到一个整数</span><span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment"># 取余 </span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment"># 乘方</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>//</strong> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7</span><span class="token operator">//</span><span class="token number">2</span><span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7.0</span><span class="token operator">//</span><span class="token number">2</span><span class="token number">3.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">7</span><span class="token operator">//</span><span class="token number">2.0</span><span class="token number">3.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不同类型的数混合运算时会<strong>将整数转换为浮点数</strong></p></li><li><p>在交互模式中，最后被输出的表达式结果被赋值给变量 <strong>_</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tax <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">=</span> <span class="token number">100.50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">*</span> tax<span class="token number">12.5625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">+</span> _<span class="token number">113.0625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">round</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">113.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9-分数运算"><a href="#9-分数运算" class="headerlink" title="9 分数运算"></a>9 分数运算</h2><p><code>fractions</code> 模块可以被用来执行包含分数的数学运算</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习03-变量</title>
      <link href="/2024/07/15/python-xue-xi-03-bian-liang/"/>
      <url>/2024/07/15/python-xue-xi-03-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="1-命名"><a href="#1-命名" class="headerlink" title="1 命名"></a>1 命名</h2><ul><li><p>变量名只能包含<strong>字母、数字和下划线</strong>。变量名可以字母或下划线打头，但不能以数字打<br>头。</p></li><li><p>Python 中的标识符是<strong>区分大小写</strong>的。</p></li><li><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也允许</p></li><li><p>以单下划线开头 <em>foo 的代表<strong>不能直接访问的类属性</strong>，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；以双下划线开头的 <em>_foo 代表类的<strong>私有成员</strong>，以双下划线开头和结尾的 <em>_foo</em></em> 代表 Python 里<strong>特殊方法</strong>专用的标识，如 <em>_init</em></em>() 代表类的构造函数。</p></li><li><p>Python 可以同一行显示多条语句，方法是<strong>用分号 ; 分开</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><table><thead><tr><th align="left">保留字</th><th>保留字</th><th>保留字</th></tr></thead><tbody><tr><td align="left">and</td><td>exec</td><td>not</td></tr><tr><td align="left">assert</td><td>finally</td><td>or</td></tr><tr><td align="left">break</td><td>for</td><td>pass</td></tr><tr><td align="left">class</td><td>from</td><td>print</td></tr><tr><td align="left">continue</td><td>global</td><td>raise</td></tr><tr><td align="left">def</td><td>if</td><td>return</td></tr><tr><td align="left">del</td><td>import</td><td>try</td></tr><tr><td align="left">elif</td><td>in</td><td>while</td></tr><tr><td align="left">else</td><td>is</td><td>with</td></tr><tr><td align="left">except</td><td>lambda</td><td>yield</td></tr><tr><td align="left">False</td><td>None</td><td>True</td></tr><tr><td align="left">as</td><td>nonlocal</td><td></td></tr></tbody></table></li></ul><h2 id="2-缩进"><a href="#2-缩进" class="headerlink" title="2 缩进"></a>2 缩进</h2><ul><li><p>Python 的代码块不使用大括号 <strong>{}</strong> 来控制类，函数以及其他逻辑判断。python 最具特色的就是用<strong>缩进</strong>来写模块</p></li><li><p>缩进的空白数量是可变的，但是<strong>所有代码块语句必须包含相同的缩进空白数量</strong></p></li><li><p>Python语句中一般以新行作为语句的结束符，使用斜杠（ <code>\</code>）将一行的语句分为多行显示,语句中包含 [], {} 或 () 括号就不需要使用多行连接符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_threedays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-引号"><a href="#3-引号" class="headerlink" title="3 引号"></a>3 引号</h2><ul><li><p>字符串表示：<strong>引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” )</strong> </p></li><li><pre><code class="python">word = 'word'sentence = "这是一个句子。"paragraph = """这是一个段落。包含了多个语句"""<pre class="line-numbers language-none"><code class="language-none">## 4 注释* 单行注释：`#` 开头* 多行注释：三个单引号 `'''` 或三个双引号` """`## 5 print换行* print 默认输出是换行的* 在 Python 3.x 中，我们可以在 print() 函数中添加 `end=""` 参数，这样就可以实现不换行效果,end也可以设置其他特殊符号  ```python  print('这是字符串，', end="")  print('这里的字符串不会另起一行')  # 这是字符串，这里的字符串不会另起一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>在 Python 2.x中， 可以使用逗号 <code>, </code>来实现不换行效果;如果有变量，我们可以在逗号 , 后面直接添加变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span> <span class="token string">"数字为："</span><span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果 Python2.x 版本想使用 Python3.x 的 print 函数，可以导入 <em>_future</em>_ 包，该包禁用 Python2.x 的 print 语句，采用 Python3.x 的 print 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-标准数据类型"><a href="#6-标准数据类型" class="headerlink" title="6 标准数据类型"></a>6 标准数据类型</h2><ul><li><p><strong>不可变（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong>可变（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）</p></li><li><p>类型判断</p><ul><li><p>内置的 <code>type()</code> 函数可以用来查询变量所指的对象类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>isinstance</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">111</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型</li><li>isinstance()会认为子类是一种父类类型</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本命令</title>
      <link href="/2024/07/15/hexo-ji-ben-ming-ling/"/>
      <url>/2024/07/15/hexo-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo基本命令"><a href="#Hexo基本命令" class="headerlink" title="Hexo基本命令"></a>Hexo基本命令</h1><h2 id="1-Hexo环境安装"><a href="#1-Hexo环境安装" class="headerlink" title="1 Hexo环境安装"></a>1 Hexo环境安装</h2><ul><li><strong>git安装</strong></li><li><strong>nodejs安装</strong></li><li><strong><code>npm install -g hexo-cli</code></strong></li><li><strong><code>hexo init &lt;folder&gt;</code></strong></li></ul><h2 id="2-基本指令"><a href="#2-基本指令" class="headerlink" title="2 基本指令"></a>2 基本指令</h2><ul><li>**<code>hexo new [layout] &lt;title&gt;</code>**：新建一篇文章。</li><li>**<code>hexo generate</code>**：生成静态文件。</li><li>**<code>hexo publish [layout] &lt;filename&gt;</code>**：发表草稿。</li><li>**<code>hexo server</code>**：启动服务器。 默认情况下，访问网址为： <code>http://localhost:4000/</code>。</li><li>**<code>hexo deploy</code>**：部署你的网站。</li><li>**<code>hexo render &lt;file1&gt; [file2] ...</code>**：渲染文件。</li><li>**<code>hexo migrate &lt;type&gt;</code>**：从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</li><li>**<code>hexo clean</code>**：清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</li><li>**<code>hexo list &lt;type&gt;</code>**：列出所有路由。</li><li>**<code>hexo version</code>**：显示版本信息。</li><li>**<code>hexo config [key] [value]</code>**：列出网站的配置（<code>_config.yml</code>）。 如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</li><li>**<code>hexo --config custom.yml</code>**：自定义配置文件的路径</li><li>**<code>hexo --draft</code>**：显示 <code>source/_drafts</code> 文件夹中的草稿文章。</li><li>**<code>hexo --cwd /path/to/cwd</code>**：自定义当前工作目录（Current working directory）的路径。</li></ul><h2 id="3-打开本地服务器"><a href="#3-打开本地服务器" class="headerlink" title="3 打开本地服务器"></a>3 打开本地服务器</h2><ul><li><pre><code class="shell">hexo cleanhexo ghexo server(hexo s)<pre class="line-numbers language-none"><code class="language-none">## 4 hexo部署* 以github为例  ```yaml  deploy:    type: git    repository: https://github.com/Eliauk-L/Eliauk-L.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>安装<code>deploy-git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre><code class="shell">hexo cleanhexo generatehexo deploy<pre class="line-numbers language-none"><code class="language-none">## 5 布局* Hexo有三种默认布局：**`post、page和draft`*** 发布文章* ```shell  hexo new XXX  # 默认使用的是post布局，在source文件夹下的_post里面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>另起一页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page newpage<span class="token comment"># 系统会自动在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，</span><span class="token comment"># 访问newpage对应的链接就是http://xxx.xxx/newpage</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发布草稿</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft newdraft<span class="token comment"># 在source/_draft中新建一个newdraft.md文件，如果想要预览，那么可以使用 </span><span class="token comment"># hexo server --draft</span><span class="token comment"># 将草稿发表到post中</span>hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>参考：</strong></p><ol><li><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">https://blog.csdn.net/qq_58608526/article/details/124652412</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习02-初始Python</title>
      <link href="/2024/07/15/python-xue-xi-02-chu-shi-python/"/>
      <url>/2024/07/15/python-xue-xi-02-chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h2 id="初始Python"><a href="#初始Python" class="headerlink" title="初始Python"></a>初始Python</h2><h2 id="1-Python特性"><a href="#1-Python特性" class="headerlink" title="1 Python特性"></a>1 Python特性</h2><blockquote><p>Python 是一个高层次的结合了<strong>解释性、编译性、互动性和面向对象</strong>的脚本语言。</p></blockquote><ul><li>解释性</li><li>交互式</li><li>面向对象</li><li>跨平台</li></ul><h2 id="2-中文编码"><a href="#2-中文编码" class="headerlink" title="2 中文编码"></a>2 中文编码</h2><blockquote><p>Python2中默认的编码格式是 <strong>ASCII</strong> 格式，在没修改编码格式时无法正确打印汉字。</p></blockquote><p>解决方法：在文件开头加入 <strong># -*- coding: UTF-8 -*-</strong> 或者 <strong># coding=utf-8</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"你好，世界"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习01-环境安装</title>
      <link href="/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/"/>
      <url>/2024/06/29/python-xue-xi-01-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-环境安装"><a href="#Python-环境安装" class="headerlink" title="Python 环境安装"></a>Python 环境安装</h1><h2 id="Anaconda-与-Pip"><a href="#Anaconda-与-Pip" class="headerlink" title="Anaconda 与 Pip"></a>Anaconda 与 Pip</h2><h3 id="Anaconda-含-Conda-包管理工具"><a href="#Anaconda-含-Conda-包管理工具" class="headerlink" title="Anaconda(含 Conda 包管理工具)"></a>Anaconda(含 Conda 包管理工具)</h3><ul><li>开源的 Python 发型版本，里面包含了 Python 和各种用于科学计算的包，可以完全独立使用</li><li>屏蔽了系统平台的差异，解决底层依赖。安装一个包之后依赖的东西全部处理好，省心</li><li>有一个<code>虚拟环境</code>的概念，每个环境之间是隔离的，都可以设定不同的 Python 版本以及各种包，不和系统的冲突，可以随便切换，要删除也是整个一起清理</li></ul><h3 id="Python-Pip-包管理工具"><a href="#Python-Pip-包管理工具" class="headerlink" title="Python(Pip 包管理工具)"></a>Python(Pip 包管理工具)</h3><ul><li>提供了对 Python 包的查找、下载、安装、卸载的功能。</li><li>Pip 是一个单纯的传统包管理器</li></ul><blockquote><p>使用 Anaconda 可以同时使用者两种包管理器，Conda 一般能做的更多些</p></blockquote><h3 id="Conda-与-Pip-常用命令"><a href="#Conda-与-Pip-常用命令" class="headerlink" title="Conda 与 Pip 常用命令"></a>Conda 与 Pip 常用命令</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda create <span class="token operator">-</span>n xx python<span class="token operator">=</span><span class="token number">3.8</span> <span class="token operator">//</span>创建python3<span class="token punctuation">.</span><span class="token number">8</span>的xx虚拟环境conda remove <span class="token operator">-</span>n xx <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span> <span class="token operator">//</span>删除xx虚拟环境conda activate xx <span class="token operator">//</span>进入xxx环境conda deactivate <span class="token operator">//</span>关闭环境conda env <span class="token builtin">list</span> <span class="token operator">//</span>显示所有的虚拟环境conda <span class="token builtin">list</span> <span class="token operator">//</span>查看通过conda已经安装的文件包conda install xxx <span class="token operator">//</span>安装xxx文件包conda update xxx <span class="token operator">//</span>更新xxx文件包conda uninstall xxx <span class="token operator">//</span>卸载xxx文件包conda search xxx <span class="token operator">//</span>查询xxx文件包的版本pip <span class="token builtin">list</span> <span class="token operator">//</span>查看通过pip已经安装的文件包pip install xxx <span class="token operator">//</span>安装xxx文件包pip uninstall xxx <span class="token operator">//</span>卸载xxx文件包pip search xxx <span class="token operator">//</span>查询xxx文件包的版本pip install –U xxx <span class="token operator">//</span>更新xxx文件包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Conda-与-Pip-换源"><a href="#Conda-与-Pip-换源" class="headerlink" title="Conda 与 Pip 换源"></a>Conda 与 Pip 换源</h3><ul><li><p><strong>C:\Users\用户名\pip\pip.ini</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span class="token key attr-name">index-url</span> <span class="token punctuation">=</span> <span class="token value attr-value">https://pypi.tuna.tsinghua.edu.cn/simple</span><span class="token key attr-name">trusted-host</span> <span class="token punctuation">=</span> <span class="token value attr-value">pypi.tuna.tsinghua.edu.cn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>C:\Users\用户名.condarc</strong></p><pre class="line-numbers language-condarc" data-language="condarc"><code class="language-condarc">channels:  - defaultsshow_channel_urls: truedefault_channels:  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p><a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></p><h2 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h2><p><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
